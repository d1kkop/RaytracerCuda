/*
Copyright 2017 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GL
#if !defined(GL_VERSION_ES_CM_1_0)
#if !defined(__GL_H__)
#if defined(__gl_h_)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dARB_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fARB_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iARB_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sARB_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dARB_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fARB_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iARB_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sARB_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iARB_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iARB_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ATI_blend_equation_separate)
#define glBlendEquationSeparateATI(modeRGB, modeA) glatter_glBlendEquationSeparateATI_debug((modeRGB), (modeA), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateATI_debug(GLenum modeRGB, GLenum modeA, const char* file, int line);
#endif // defined(GL_ATI_blend_equation_separate)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetRenderbufferStorageOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetTexture2DOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#endif // defined(GL_OES_EGL_image)
#define glAccum(op, value) glatter_glAccum_debug((op), (value), __FILE__, __LINE__)
void glatter_glAccum_debug(GLenum op, GLfloat value, const char* file, int line);
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFunc_debug(GLenum func, GLclampf ref, const char* file, int line);
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident_debug((n), (textures), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreTexturesResident_debug(GLsizei n, const GLuint *textures, GLboolean *residences, const char* file, int line);
#define glArrayElement(i) glatter_glArrayElement_debug((i), __FILE__, __LINE__)
void glatter_glArrayElement_debug(GLint i, const char* file, int line);
#define glBegin(mode) glatter_glBegin_debug((mode), __FILE__, __LINE__)
void glatter_glBegin_debug(GLenum mode, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap_debug((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap), __FILE__, __LINE__)
void glatter_glBitmap_debug(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glCallList(list) glatter_glCallList_debug((list), __FILE__, __LINE__)
void glatter_glCallList_debug(GLuint list, const char* file, int line);
#define glCallLists(n, type, lists) glatter_glCallLists_debug((n), (type), (lists), __FILE__, __LINE__)
void glatter_glCallLists_debug(GLsizei n, GLenum type, const GLvoid *lists, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearAccum_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glClearDepth(depth) glatter_glClearDepth_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepth_debug(GLclampd depth, const char* file, int line);
#define glClearIndex(c) glatter_glClearIndex_debug((c), __FILE__, __LINE__)
void glatter_glClearIndex_debug(GLfloat c, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTexture_debug(GLenum texture, const char* file, int line);
#define glClipPlane(plane, equation) glatter_glClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlane_debug(GLenum plane, const GLdouble *equation, const char* file, int line);
#define glColor3b(red, green, blue) glatter_glColor3b_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3b_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glColor3bv(v) glatter_glColor3bv_debug((v), __FILE__, __LINE__)
void glatter_glColor3bv_debug(const GLbyte *v, const char* file, int line);
#define glColor3d(red, green, blue) glatter_glColor3d_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3d_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glColor3dv(v) glatter_glColor3dv_debug((v), __FILE__, __LINE__)
void glatter_glColor3dv_debug(const GLdouble *v, const char* file, int line);
#define glColor3f(red, green, blue) glatter_glColor3f_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3f_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glColor3fv(v) glatter_glColor3fv_debug((v), __FILE__, __LINE__)
void glatter_glColor3fv_debug(const GLfloat *v, const char* file, int line);
#define glColor3i(red, green, blue) glatter_glColor3i_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3i_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glColor3iv(v) glatter_glColor3iv_debug((v), __FILE__, __LINE__)
void glatter_glColor3iv_debug(const GLint *v, const char* file, int line);
#define glColor3s(red, green, blue) glatter_glColor3s_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3s_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glColor3sv(v) glatter_glColor3sv_debug((v), __FILE__, __LINE__)
void glatter_glColor3sv_debug(const GLshort *v, const char* file, int line);
#define glColor3ub(red, green, blue) glatter_glColor3ub_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ub_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glColor3ubv(v) glatter_glColor3ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor3ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor3ui(red, green, blue) glatter_glColor3ui_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ui_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glColor3uiv(v) glatter_glColor3uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor3uiv_debug(const GLuint *v, const char* file, int line);
#define glColor3us(red, green, blue) glatter_glColor3us_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3us_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glColor3usv(v) glatter_glColor3usv_debug((v), __FILE__, __LINE__)
void glatter_glColor3usv_debug(const GLushort *v, const char* file, int line);
#define glColor4b(red, green, blue, alpha) glatter_glColor4b_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4b_debug(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha, const char* file, int line);
#define glColor4bv(v) glatter_glColor4bv_debug((v), __FILE__, __LINE__)
void glatter_glColor4bv_debug(const GLbyte *v, const char* file, int line);
#define glColor4d(red, green, blue, alpha) glatter_glColor4d_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4d_debug(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha, const char* file, int line);
#define glColor4dv(v) glatter_glColor4dv_debug((v), __FILE__, __LINE__)
void glatter_glColor4dv_debug(const GLdouble *v, const char* file, int line);
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4f_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glColor4fv(v) glatter_glColor4fv_debug((v), __FILE__, __LINE__)
void glatter_glColor4fv_debug(const GLfloat *v, const char* file, int line);
#define glColor4i(red, green, blue, alpha) glatter_glColor4i_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4i_debug(GLint red, GLint green, GLint blue, GLint alpha, const char* file, int line);
#define glColor4iv(v) glatter_glColor4iv_debug((v), __FILE__, __LINE__)
void glatter_glColor4iv_debug(const GLint *v, const char* file, int line);
#define glColor4s(red, green, blue, alpha) glatter_glColor4s_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4s_debug(GLshort red, GLshort green, GLshort blue, GLshort alpha, const char* file, int line);
#define glColor4sv(v) glatter_glColor4sv_debug((v), __FILE__, __LINE__)
void glatter_glColor4sv_debug(const GLshort *v, const char* file, int line);
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ub_debug(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, const char* file, int line);
#define glColor4ubv(v) glatter_glColor4ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor4ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ui_debug(GLuint red, GLuint green, GLuint blue, GLuint alpha, const char* file, int line);
#define glColor4uiv(v) glatter_glColor4uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor4uiv_debug(const GLuint *v, const char* file, int line);
#define glColor4us(red, green, blue, alpha) glatter_glColor4us_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4us_debug(GLushort red, GLushort green, GLushort blue, GLushort alpha, const char* file, int line);
#define glColor4usv(v) glatter_glColor4usv_debug((v), __FILE__, __LINE__)
void glatter_glColor4usv_debug(const GLushort *v, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glColorMaterial(face, mode) glatter_glColorMaterial_debug((face), (mode), __FILE__, __LINE__)
void glatter_glColorMaterial_debug(GLenum face, GLenum mode, const char* file, int line);
#define glColorPointer(size, type, stride, ptr) glatter_glColorPointer_debug((size), (type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glColorPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable_debug((target), (start), (count), (format), (type), (data), __FILE__, __LINE__)
void glatter_glColorSubTable_debug(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data, const char* file, int line);
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable_debug((target), (internalformat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTable_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table, const char* file, int line);
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D_debug((target), (internalformat), (width), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image, const char* file, int line);
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image, const char* file, int line);
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterf_debug(GLenum target, GLenum pname, GLfloat params, const char* file, int line);
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteri_debug(GLenum target, GLenum pname, GLint params, const char* file, int line);
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable_debug((target), (start), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorSubTable_debug(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorTable_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D_debug((target), (internalformat), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels_debug((x), (y), (width), (height), (type), __FILE__, __LINE__)
void glatter_glCopyPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type, const char* file, int line);
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D_debug((target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteLists(list, range) glatter_glDeleteLists_debug((list), (range), __FILE__, __LINE__)
void glatter_glDeleteLists_debug(GLuint list, GLsizei range, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRange(near_val, far_val) glatter_glDepthRange_debug((near_val), (far_val), __FILE__, __LINE__)
void glatter_glDepthRange_debug(GLclampd near_val, GLclampd far_val, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableClientState(cap) glatter_glDisableClientState_debug((cap), __FILE__, __LINE__)
void glatter_glDisableClientState_debug(GLenum cap, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawBuffer(mode) glatter_glDrawBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glDrawBuffer_debug(GLenum mode, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels_debug((width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glDrawPixels_debug(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glEdgeFlag(flag) glatter_glEdgeFlag_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlag_debug(GLboolean flag, const char* file, int line);
#define glEdgeFlagPointer(stride, ptr) glatter_glEdgeFlagPointer_debug((stride), (ptr), __FILE__, __LINE__)
void glatter_glEdgeFlagPointer_debug(GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glEdgeFlagv(flag) glatter_glEdgeFlagv_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlagv_debug(const GLboolean *flag, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableClientState(cap) glatter_glEnableClientState_debug((cap), __FILE__, __LINE__)
void glatter_glEnableClientState_debug(GLenum cap, const char* file, int line);
#define glEnd() glatter_glEnd_debug(__FILE__, __LINE__)
void glatter_glEnd_debug(const char* file, int line);
#define glEndList() glatter_glEndList_debug(__FILE__, __LINE__)
void glatter_glEndList_debug(const char* file, int line);
#define glEvalCoord1d(u) glatter_glEvalCoord1d_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1d_debug(GLdouble u, const char* file, int line);
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord1f(u) glatter_glEvalCoord1f_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1f_debug(GLfloat u, const char* file, int line);
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2d_debug(GLdouble u, GLdouble v, const char* file, int line);
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2f_debug(GLfloat u, GLfloat v, const char* file, int line);
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1_debug((mode), (i1), (i2), __FILE__, __LINE__)
void glatter_glEvalMesh1_debug(GLenum mode, GLint i1, GLint i2, const char* file, int line);
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2_debug((mode), (i1), (i2), (j1), (j2), __FILE__, __LINE__)
void glatter_glEvalMesh2_debug(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2, const char* file, int line);
#define glEvalPoint1(i) glatter_glEvalPoint1_debug((i), __FILE__, __LINE__)
void glatter_glEvalPoint1_debug(GLint i, const char* file, int line);
#define glEvalPoint2(i, j) glatter_glEvalPoint2_debug((i), (j), __FILE__, __LINE__)
void glatter_glEvalPoint2_debug(GLint i, GLint j, const char* file, int line);
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer_debug((size), (type), (buffer), __FILE__, __LINE__)
void glatter_glFeedbackBuffer_debug(GLsizei size, GLenum type, GLfloat *buffer, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFogf(pname, param) glatter_glFogf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFogfv(pname, params) glatter_glFogfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFogi(pname, param) glatter_glFogi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogi_debug(GLenum pname, GLint param, const char* file, int line);
#define glFogiv(pname, params) glatter_glFogiv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogiv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glFrustum(left, right, bottom, top, near_val, far_val) glatter_glFrustum_debug((left), (right), (bottom), (top), (near_val), (far_val), __FILE__, __LINE__)
void glatter_glFrustum_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val, const char* file, int line);
#define glGenLists(range) glatter_glGenLists_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenLists_debug(GLsizei range, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *params, const char* file, int line);
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlane_debug(GLenum plane, GLdouble *equation, const char* file, int line);
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable_debug((target), (format), (type), (table), __FILE__, __LINE__)
void glatter_glGetColorTable_debug(GLenum target, GLenum format, GLenum type, GLvoid *table, const char* file, int line);
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetCompressedTexImage(target, lod, img) glatter_glGetCompressedTexImage_debug((target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImage_debug(GLenum target, GLint lod, GLvoid *img, const char* file, int line);
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter_debug((target), (format), (type), (image), __FILE__, __LINE__)
void glatter_glGetConvolutionFilter_debug(GLenum target, GLenum format, GLenum type, GLvoid *image, const char* file, int line);
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetDoublev(pname, params) glatter_glGetDoublev_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetDoublev_debug(GLenum pname, GLdouble *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, params) glatter_glGetFloatv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetHistogram_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values, const char* file, int line);
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *params, const char* file, int line);
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightfv_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetLightiv(light, pname, params) glatter_glGetLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightiv_debug(GLenum light, GLenum pname, GLint *params, const char* file, int line);
#define glGetMapdv(target, query, v) glatter_glGetMapdv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapdv_debug(GLenum target, GLenum query, GLdouble *v, const char* file, int line);
#define glGetMapfv(target, query, v) glatter_glGetMapfv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapfv_debug(GLenum target, GLenum query, GLfloat *v, const char* file, int line);
#define glGetMapiv(target, query, v) glatter_glGetMapiv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapiv_debug(GLenum target, GLenum query, GLint *v, const char* file, int line);
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialfv_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialiv_debug(GLenum face, GLenum pname, GLint *params, const char* file, int line);
#define glGetMinmax(target, reset, format, types, values) glatter_glGetMinmax_debug((target), (reset), (format), (types), (values), __FILE__, __LINE__)
void glatter_glGetMinmax_debug(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values, const char* file, int line);
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapfv_debug(GLenum map, GLfloat *values, const char* file, int line);
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapuiv_debug(GLenum map, GLuint *values, const char* file, int line);
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapusv_debug(GLenum map, GLushort *values, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, GLvoid **params, const char* file, int line);
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glGetPolygonStipple_debug(GLubyte *mask, const char* file, int line);
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter_debug((target), (format), (type), (row), (column), (span), __FILE__, __LINE__)
void glatter_glGetSeparableFilter_debug(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnviv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGendv_debug(GLenum coord, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGenfv_debug(GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGeniv_debug(GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_debug((target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram_debug((target), (width), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glHistogram_debug(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glIndexMask(mask) glatter_glIndexMask_debug((mask), __FILE__, __LINE__)
void glatter_glIndexMask_debug(GLuint mask, const char* file, int line);
#define glIndexPointer(type, stride, ptr) glatter_glIndexPointer_debug((type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glIndexPointer_debug(GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glIndexd(c) glatter_glIndexd_debug((c), __FILE__, __LINE__)
void glatter_glIndexd_debug(GLdouble c, const char* file, int line);
#define glIndexdv(c) glatter_glIndexdv_debug((c), __FILE__, __LINE__)
void glatter_glIndexdv_debug(const GLdouble *c, const char* file, int line);
#define glIndexf(c) glatter_glIndexf_debug((c), __FILE__, __LINE__)
void glatter_glIndexf_debug(GLfloat c, const char* file, int line);
#define glIndexfv(c) glatter_glIndexfv_debug((c), __FILE__, __LINE__)
void glatter_glIndexfv_debug(const GLfloat *c, const char* file, int line);
#define glIndexi(c) glatter_glIndexi_debug((c), __FILE__, __LINE__)
void glatter_glIndexi_debug(GLint c, const char* file, int line);
#define glIndexiv(c) glatter_glIndexiv_debug((c), __FILE__, __LINE__)
void glatter_glIndexiv_debug(const GLint *c, const char* file, int line);
#define glIndexs(c) glatter_glIndexs_debug((c), __FILE__, __LINE__)
void glatter_glIndexs_debug(GLshort c, const char* file, int line);
#define glIndexsv(c) glatter_glIndexsv_debug((c), __FILE__, __LINE__)
void glatter_glIndexsv_debug(const GLshort *c, const char* file, int line);
#define glIndexub(c) glatter_glIndexub_debug((c), __FILE__, __LINE__)
void glatter_glIndexub_debug(GLubyte c, const char* file, int line);
#define glIndexubv(c) glatter_glIndexubv_debug((c), __FILE__, __LINE__)
void glatter_glIndexubv_debug(const GLubyte *c, const char* file, int line);
#define glInitNames() glatter_glInitNames_debug(__FILE__, __LINE__)
void glatter_glInitNames_debug(const char* file, int line);
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays_debug((format), (stride), (pointer), __FILE__, __LINE__)
void glatter_glInterleavedArrays_debug(GLenum format, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsList(list) glatter_glIsList_debug((list), __FILE__, __LINE__)
GLboolean glatter_glIsList_debug(GLuint list, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLightModelf(pname, param) glatter_glLightModelf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glLightModelfv(pname, params) glatter_glLightModelfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightModeli(pname, param) glatter_glLightModeli_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModeli_debug(GLenum pname, GLint param, const char* file, int line);
#define glLightModeliv(pname, params) glatter_glLightModeliv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModeliv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glLightf(light, pname, param) glatter_glLightf_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightf_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glLightfv(light, pname, params) glatter_glLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightfv_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glLighti(light, pname, param) glatter_glLighti_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLighti_debug(GLenum light, GLenum pname, GLint param, const char* file, int line);
#define glLightiv(light, pname, params) glatter_glLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightiv_debug(GLenum light, GLenum pname, const GLint *params, const char* file, int line);
#define glLineStipple(factor, pattern) glatter_glLineStipple_debug((factor), (pattern), __FILE__, __LINE__)
void glatter_glLineStipple_debug(GLint factor, GLushort pattern, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glListBase(base) glatter_glListBase_debug((base), __FILE__, __LINE__)
void glatter_glListBase_debug(GLuint base, const char* file, int line);
#define glLoadIdentity() glatter_glLoadIdentity_debug(__FILE__, __LINE__)
void glatter_glLoadIdentity_debug(const char* file, int line);
#define glLoadMatrixd(m) glatter_glLoadMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glLoadMatrixf(m) glatter_glLoadMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glLoadName(name) glatter_glLoadName_debug((name), __FILE__, __LINE__)
void glatter_glLoadName_debug(GLuint name, const char* file, int line);
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixd_debug(const GLdouble m[16], const char* file, int line);
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixf_debug(const GLfloat m[16], const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points, const char* file, int line);
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points, const char* file, int line);
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points, const char* file, int line);
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points, const char* file, int line);
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1d_debug(GLint un, GLdouble u1, GLdouble u2, const char* file, int line);
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1f_debug(GLint un, GLfloat u1, GLfloat u2, const char* file, int line);
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2d_debug(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2, const char* file, int line);
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2f_debug(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2, const char* file, int line);
#define glMaterialf(face, pname, param) glatter_glMaterialf_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialf_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialfv_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMateriali(face, pname, param) glatter_glMateriali_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMateriali_debug(GLenum face, GLenum pname, GLint param, const char* file, int line);
#define glMaterialiv(face, pname, params) glatter_glMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialiv_debug(GLenum face, GLenum pname, const GLint *params, const char* file, int line);
#define glMatrixMode(mode) glatter_glMatrixMode_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixMode_debug(GLenum mode, const char* file, int line);
#define glMinmax(target, internalformat, sink) glatter_glMinmax_debug((target), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glMinmax_debug(GLenum target, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glMultMatrixd(m) glatter_glMultMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glMultMatrixf(m) glatter_glMultMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixd_debug(const GLdouble m[16], const char* file, int line);
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixf_debug(const GLfloat m[16], const char* file, int line);
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1d_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1f_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1i_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1s_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2d_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2f_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2i_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2s_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3i_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3s_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4i_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4s_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glNewList(list, mode) glatter_glNewList_debug((list), (mode), __FILE__, __LINE__)
void glatter_glNewList_debug(GLuint list, GLenum mode, const char* file, int line);
#define glNormal3b(nx, ny, nz) glatter_glNormal3b_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3b_debug(GLbyte nx, GLbyte ny, GLbyte nz, const char* file, int line);
#define glNormal3bv(v) glatter_glNormal3bv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3bv_debug(const GLbyte *v, const char* file, int line);
#define glNormal3d(nx, ny, nz) glatter_glNormal3d_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3d_debug(GLdouble nx, GLdouble ny, GLdouble nz, const char* file, int line);
#define glNormal3dv(v) glatter_glNormal3dv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3dv_debug(const GLdouble *v, const char* file, int line);
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3f_debug(GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormal3fv(v) glatter_glNormal3fv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3fv_debug(const GLfloat *v, const char* file, int line);
#define glNormal3i(nx, ny, nz) glatter_glNormal3i_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3i_debug(GLint nx, GLint ny, GLint nz, const char* file, int line);
#define glNormal3iv(v) glatter_glNormal3iv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3iv_debug(const GLint *v, const char* file, int line);
#define glNormal3s(nx, ny, nz) glatter_glNormal3s_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3s_debug(GLshort nx, GLshort ny, GLshort nz, const char* file, int line);
#define glNormal3sv(v) glatter_glNormal3sv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3sv_debug(const GLshort *v, const char* file, int line);
#define glNormalPointer(type, stride, ptr) glatter_glNormalPointer_debug((type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glNormalPointer_debug(GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glOrtho(left, right, bottom, top, near_val, far_val) glatter_glOrtho_debug((left), (right), (bottom), (top), (near_val), (far_val), __FILE__, __LINE__)
void glatter_glOrtho_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val, const char* file, int line);
#define glPassThrough(token) glatter_glPassThrough_debug((token), __FILE__, __LINE__)
void glatter_glPassThrough_debug(GLfloat token, const char* file, int line);
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapfv_debug(GLenum map, GLsizei mapsize, const GLfloat *values, const char* file, int line);
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapuiv_debug(GLenum map, GLsizei mapsize, const GLuint *values, const char* file, int line);
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapusv_debug(GLenum map, GLsizei mapsize, const GLushort *values, const char* file, int line);
#define glPixelStoref(pname, param) glatter_glPixelStoref_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStoref_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelTransferf(pname, param) glatter_glPixelTransferf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTransferi(pname, param) glatter_glPixelTransferi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferi_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom_debug((xfactor), (yfactor), __FILE__, __LINE__)
void glatter_glPixelZoom_debug(GLfloat xfactor, GLfloat yfactor, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPolygonMode(face, mode) glatter_glPolygonMode_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonMode_debug(GLenum face, GLenum mode, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPolygonStipple(mask) glatter_glPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glPolygonStipple_debug(const GLubyte *mask, const char* file, int line);
#define glPopAttrib() glatter_glPopAttrib_debug(__FILE__, __LINE__)
void glatter_glPopAttrib_debug(const char* file, int line);
#define glPopClientAttrib() glatter_glPopClientAttrib_debug(__FILE__, __LINE__)
void glatter_glPopClientAttrib_debug(const char* file, int line);
#define glPopMatrix() glatter_glPopMatrix_debug(__FILE__, __LINE__)
void glatter_glPopMatrix_debug(const char* file, int line);
#define glPopName() glatter_glPopName_debug(__FILE__, __LINE__)
void glatter_glPopName_debug(const char* file, int line);
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTextures_debug(GLsizei n, const GLuint *textures, const GLclampf *priorities, const char* file, int line);
#define glPushAttrib(mask) glatter_glPushAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushClientAttrib(mask) glatter_glPushClientAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushClientAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushMatrix() glatter_glPushMatrix_debug(__FILE__, __LINE__)
void glatter_glPushMatrix_debug(const char* file, int line);
#define glPushName(name) glatter_glPushName_debug((name), __FILE__, __LINE__)
void glatter_glPushName_debug(GLuint name, const char* file, int line);
#define glRasterPos2d(x, y) glatter_glRasterPos2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glRasterPos2dv(v) glatter_glRasterPos2dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos2f(x, y) glatter_glRasterPos2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glRasterPos2fv(v) glatter_glRasterPos2fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos2i(x, y) glatter_glRasterPos2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2i_debug(GLint x, GLint y, const char* file, int line);
#define glRasterPos2iv(v) glatter_glRasterPos2iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos2s(x, y) glatter_glRasterPos2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glRasterPos2sv(v) glatter_glRasterPos2sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRasterPos3dv(v) glatter_glRasterPos3dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glRasterPos3fv(v) glatter_glRasterPos3fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glRasterPos3iv(v) glatter_glRasterPos3iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glRasterPos3sv(v) glatter_glRasterPos3sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glRasterPos4dv(v) glatter_glRasterPos4dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glRasterPos4fv(v) glatter_glRasterPos4fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glRasterPos4iv(v) glatter_glRasterPos4iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glRasterPos4sv(v) glatter_glRasterPos4sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4sv_debug(const GLshort *v, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glRectd(x1, y1, x2, y2) glatter_glRectd_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectd_debug(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2, const char* file, int line);
#define glRectdv(v1, v2) glatter_glRectdv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectdv_debug(const GLdouble *v1, const GLdouble *v2, const char* file, int line);
#define glRectf(x1, y1, x2, y2) glatter_glRectf_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectf_debug(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, const char* file, int line);
#define glRectfv(v1, v2) glatter_glRectfv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectfv_debug(const GLfloat *v1, const GLfloat *v2, const char* file, int line);
#define glRecti(x1, y1, x2, y2) glatter_glRecti_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRecti_debug(GLint x1, GLint y1, GLint x2, GLint y2, const char* file, int line);
#define glRectiv(v1, v2) glatter_glRectiv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectiv_debug(const GLint *v1, const GLint *v2, const char* file, int line);
#define glRects(x1, y1, x2, y2) glatter_glRects_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRects_debug(GLshort x1, GLshort y1, GLshort x2, GLshort y2, const char* file, int line);
#define glRectsv(v1, v2) glatter_glRectsv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectsv_debug(const GLshort *v1, const GLshort *v2, const char* file, int line);
#define glRenderMode(mode) glatter_glRenderMode_debug((mode), __FILE__, __LINE__)
GLint glatter_glRenderMode_debug(GLenum mode, const char* file, int line);
#define glResetHistogram(target) glatter_glResetHistogram_debug((target), __FILE__, __LINE__)
void glatter_glResetHistogram_debug(GLenum target, const char* file, int line);
#define glResetMinmax(target) glatter_glResetMinmax_debug((target), __FILE__, __LINE__)
void glatter_glResetMinmax_debug(GLenum target, const char* file, int line);
#define glRotated(angle, x, y, z) glatter_glRotated_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotated_debug(GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRotatef(angle, x, y, z) glatter_glRotatef_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatef_debug(GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glScaled(x, y, z) glatter_glScaled_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScaled_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glScalef(x, y, z) glatter_glScalef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer_debug((size), (buffer), __FILE__, __LINE__)
void glatter_glSelectBuffer_debug(GLsizei size, GLuint *buffer, const char* file, int line);
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (row), (column), __FILE__, __LINE__)
void glatter_glSeparableFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column, const char* file, int line);
#define glShadeModel(mode) glatter_glShadeModel_debug((mode), __FILE__, __LINE__)
void glatter_glShadeModel_debug(GLenum mode, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexCoord1d(s) glatter_glTexCoord1d_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1d_debug(GLdouble s, const char* file, int line);
#define glTexCoord1dv(v) glatter_glTexCoord1dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord1f(s) glatter_glTexCoord1f_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1f_debug(GLfloat s, const char* file, int line);
#define glTexCoord1fv(v) glatter_glTexCoord1fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord1i(s) glatter_glTexCoord1i_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1i_debug(GLint s, const char* file, int line);
#define glTexCoord1iv(v) glatter_glTexCoord1iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord1s(s) glatter_glTexCoord1s_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1s_debug(GLshort s, const char* file, int line);
#define glTexCoord1sv(v) glatter_glTexCoord1sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord2d(s, t) glatter_glTexCoord2d_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2d_debug(GLdouble s, GLdouble t, const char* file, int line);
#define glTexCoord2dv(v) glatter_glTexCoord2dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord2f(s, t) glatter_glTexCoord2f_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2f_debug(GLfloat s, GLfloat t, const char* file, int line);
#define glTexCoord2fv(v) glatter_glTexCoord2fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord2i(s, t) glatter_glTexCoord2i_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2i_debug(GLint s, GLint t, const char* file, int line);
#define glTexCoord2iv(v) glatter_glTexCoord2iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord2s(s, t) glatter_glTexCoord2s_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2s_debug(GLshort s, GLshort t, const char* file, int line);
#define glTexCoord2sv(v) glatter_glTexCoord2sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3d_debug(GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glTexCoord3dv(v) glatter_glTexCoord3dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3f_debug(GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glTexCoord3fv(v) glatter_glTexCoord3fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3i_debug(GLint s, GLint t, GLint r, const char* file, int line);
#define glTexCoord3iv(v) glatter_glTexCoord3iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3s_debug(GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glTexCoord3sv(v) glatter_glTexCoord3sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4d_debug(GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glTexCoord4dv(v) glatter_glTexCoord4dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4f_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glTexCoord4fv(v) glatter_glTexCoord4fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4i_debug(GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glTexCoord4iv(v) glatter_glTexCoord4iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4s_debug(GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glTexCoord4sv(v) glatter_glTexCoord4sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoordPointer(size, type, stride, ptr) glatter_glTexCoordPointer_debug((size), (type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glTexCoordPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvi_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnviv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexGend(coord, pname, param) glatter_glTexGend_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGend_debug(GLenum coord, GLenum pname, GLdouble param, const char* file, int line);
#define glTexGendv(coord, pname, params) glatter_glTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGendv_debug(GLenum coord, GLenum pname, const GLdouble *params, const char* file, int line);
#define glTexGenf(coord, pname, param) glatter_glTexGenf_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGenf_debug(GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGenfv_debug(GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexGeni(coord, pname, param) glatter_glTexGeni_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGeni_debug(GLenum coord, GLenum pname, GLint param, const char* file, int line);
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGeniv_debug(GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#define glTexImage1D(target, level, internalFormat, width, border, format, type, pixels) glatter_glTexImage1D_debug((target), (level), (internalFormat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage1D_debug(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalFormat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalFormat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTranslated(x, y, z) glatter_glTranslated_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslated_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glTranslatef(x, y, z) glatter_glTranslatef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex2d(x, y) glatter_glVertex2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glVertex2dv(v) glatter_glVertex2dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex2f(x, y) glatter_glVertex2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glVertex2fv(v) glatter_glVertex2fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex2i(x, y) glatter_glVertex2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2i_debug(GLint x, GLint y, const char* file, int line);
#define glVertex2iv(v) glatter_glVertex2iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2iv_debug(const GLint *v, const char* file, int line);
#define glVertex2s(x, y) glatter_glVertex2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glVertex2sv(v) glatter_glVertex2sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2sv_debug(const GLshort *v, const char* file, int line);
#define glVertex3d(x, y, z) glatter_glVertex3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertex3dv(v) glatter_glVertex3dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex3f(x, y, z) glatter_glVertex3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex3fv(v) glatter_glVertex3fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex3i(x, y, z) glatter_glVertex3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glVertex3iv(v) glatter_glVertex3iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3iv_debug(const GLint *v, const char* file, int line);
#define glVertex3s(x, y, z) glatter_glVertex3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertex3sv(v) glatter_glVertex3sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3sv_debug(const GLshort *v, const char* file, int line);
#define glVertex4d(x, y, z, w) glatter_glVertex4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertex4dv(v) glatter_glVertex4dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex4f(x, y, z, w) glatter_glVertex4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertex4fv(v) glatter_glVertex4fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex4i(x, y, z, w) glatter_glVertex4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertex4iv(v) glatter_glVertex4iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4iv_debug(const GLint *v, const char* file, int line);
#define glVertex4s(x, y, z, w) glatter_glVertex4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertex4sv(v) glatter_glVertex4sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4sv_debug(const GLshort *v, const char* file, int line);
#define glVertexPointer(size, type, stride, ptr) glatter_glVertexPointer_debug((size), (type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glVertexPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(__gl_h_)
#endif // !defined(__GL_H__)
#if defined(__GL_H__)
#if defined(__gl_h_)
#define glAccum(op, value) glatter_glAccum_debug((op), (value), __FILE__, __LINE__)
void glatter_glAccum_debug(GLenum op, GLfloat value, const char* file, int line);
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFunc_debug(GLenum func, GLclampf ref, const char* file, int line);
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident_debug((n), (textures), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreTexturesResident_debug(GLsizei n, const GLuint *textures, GLboolean *residences, const char* file, int line);
#define glArrayElement(i) glatter_glArrayElement_debug((i), __FILE__, __LINE__)
void glatter_glArrayElement_debug(GLint i, const char* file, int line);
#define glBegin(mode) glatter_glBegin_debug((mode), __FILE__, __LINE__)
void glatter_glBegin_debug(GLenum mode, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap_debug((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap), __FILE__, __LINE__)
void glatter_glBitmap_debug(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glCallList(list) glatter_glCallList_debug((list), __FILE__, __LINE__)
void glatter_glCallList_debug(GLuint list, const char* file, int line);
#define glCallLists(n, type, lists) glatter_glCallLists_debug((n), (type), (lists), __FILE__, __LINE__)
void glatter_glCallLists_debug(GLsizei n, GLenum type, const GLvoid *lists, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearAccum_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glClearDepth(depth) glatter_glClearDepth_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepth_debug(GLclampd depth, const char* file, int line);
#define glClearIndex(c) glatter_glClearIndex_debug((c), __FILE__, __LINE__)
void glatter_glClearIndex_debug(GLfloat c, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glClipPlane(plane, equation) glatter_glClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlane_debug(GLenum plane, const GLdouble *equation, const char* file, int line);
#define glColor3b(red, green, blue) glatter_glColor3b_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3b_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glColor3bv(v) glatter_glColor3bv_debug((v), __FILE__, __LINE__)
void glatter_glColor3bv_debug(const GLbyte *v, const char* file, int line);
#define glColor3d(red, green, blue) glatter_glColor3d_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3d_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glColor3dv(v) glatter_glColor3dv_debug((v), __FILE__, __LINE__)
void glatter_glColor3dv_debug(const GLdouble *v, const char* file, int line);
#define glColor3f(red, green, blue) glatter_glColor3f_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3f_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glColor3fv(v) glatter_glColor3fv_debug((v), __FILE__, __LINE__)
void glatter_glColor3fv_debug(const GLfloat *v, const char* file, int line);
#define glColor3i(red, green, blue) glatter_glColor3i_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3i_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glColor3iv(v) glatter_glColor3iv_debug((v), __FILE__, __LINE__)
void glatter_glColor3iv_debug(const GLint *v, const char* file, int line);
#define glColor3s(red, green, blue) glatter_glColor3s_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3s_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glColor3sv(v) glatter_glColor3sv_debug((v), __FILE__, __LINE__)
void glatter_glColor3sv_debug(const GLshort *v, const char* file, int line);
#define glColor3ub(red, green, blue) glatter_glColor3ub_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ub_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glColor3ubv(v) glatter_glColor3ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor3ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor3ui(red, green, blue) glatter_glColor3ui_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ui_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glColor3uiv(v) glatter_glColor3uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor3uiv_debug(const GLuint *v, const char* file, int line);
#define glColor3us(red, green, blue) glatter_glColor3us_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3us_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glColor3usv(v) glatter_glColor3usv_debug((v), __FILE__, __LINE__)
void glatter_glColor3usv_debug(const GLushort *v, const char* file, int line);
#define glColor4b(red, green, blue, alpha) glatter_glColor4b_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4b_debug(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha, const char* file, int line);
#define glColor4bv(v) glatter_glColor4bv_debug((v), __FILE__, __LINE__)
void glatter_glColor4bv_debug(const GLbyte *v, const char* file, int line);
#define glColor4d(red, green, blue, alpha) glatter_glColor4d_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4d_debug(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha, const char* file, int line);
#define glColor4dv(v) glatter_glColor4dv_debug((v), __FILE__, __LINE__)
void glatter_glColor4dv_debug(const GLdouble *v, const char* file, int line);
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4f_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glColor4fv(v) glatter_glColor4fv_debug((v), __FILE__, __LINE__)
void glatter_glColor4fv_debug(const GLfloat *v, const char* file, int line);
#define glColor4i(red, green, blue, alpha) glatter_glColor4i_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4i_debug(GLint red, GLint green, GLint blue, GLint alpha, const char* file, int line);
#define glColor4iv(v) glatter_glColor4iv_debug((v), __FILE__, __LINE__)
void glatter_glColor4iv_debug(const GLint *v, const char* file, int line);
#define glColor4s(red, green, blue, alpha) glatter_glColor4s_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4s_debug(GLshort red, GLshort green, GLshort blue, GLshort alpha, const char* file, int line);
#define glColor4sv(v) glatter_glColor4sv_debug((v), __FILE__, __LINE__)
void glatter_glColor4sv_debug(const GLshort *v, const char* file, int line);
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ub_debug(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, const char* file, int line);
#define glColor4ubv(v) glatter_glColor4ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor4ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ui_debug(GLuint red, GLuint green, GLuint blue, GLuint alpha, const char* file, int line);
#define glColor4uiv(v) glatter_glColor4uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor4uiv_debug(const GLuint *v, const char* file, int line);
#define glColor4us(red, green, blue, alpha) glatter_glColor4us_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4us_debug(GLushort red, GLushort green, GLushort blue, GLushort alpha, const char* file, int line);
#define glColor4usv(v) glatter_glColor4usv_debug((v), __FILE__, __LINE__)
void glatter_glColor4usv_debug(const GLushort *v, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glColorMaterial(face, mode) glatter_glColorMaterial_debug((face), (mode), __FILE__, __LINE__)
void glatter_glColorMaterial_debug(GLenum face, GLenum mode, const char* file, int line);
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glColorPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels_debug((x), (y), (width), (height), (type), __FILE__, __LINE__)
void glatter_glCopyPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type, const char* file, int line);
#define glCopyTexImage1D(target, level, internalFormat, x, y, width, border) glatter_glCopyTexImage1D_debug((target), (level), (internalFormat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1D_debug(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2D(target, level, internalFormat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalFormat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteLists(list, range) glatter_glDeleteLists_debug((list), (range), __FILE__, __LINE__)
void glatter_glDeleteLists_debug(GLuint list, GLsizei range, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRange(zNear, zFar) glatter_glDepthRange_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRange_debug(GLclampd zNear, GLclampd zFar, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableClientState(array) glatter_glDisableClientState_debug((array), __FILE__, __LINE__)
void glatter_glDisableClientState_debug(GLenum array, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawBuffer(mode) glatter_glDrawBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glDrawBuffer_debug(GLenum mode, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels_debug((width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glDrawPixels_debug(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glEdgeFlag(flag) glatter_glEdgeFlag_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlag_debug(GLboolean flag, const char* file, int line);
#define glEdgeFlagPointer(stride, pointer) glatter_glEdgeFlagPointer_debug((stride), (pointer), __FILE__, __LINE__)
void glatter_glEdgeFlagPointer_debug(GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glEdgeFlagv(flag) glatter_glEdgeFlagv_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlagv_debug(const GLboolean *flag, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableClientState(array) glatter_glEnableClientState_debug((array), __FILE__, __LINE__)
void glatter_glEnableClientState_debug(GLenum array, const char* file, int line);
#define glEnd() glatter_glEnd_debug(__FILE__, __LINE__)
void glatter_glEnd_debug(const char* file, int line);
#define glEndList() glatter_glEndList_debug(__FILE__, __LINE__)
void glatter_glEndList_debug(const char* file, int line);
#define glEvalCoord1d(u) glatter_glEvalCoord1d_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1d_debug(GLdouble u, const char* file, int line);
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord1f(u) glatter_glEvalCoord1f_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1f_debug(GLfloat u, const char* file, int line);
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2d_debug(GLdouble u, GLdouble v, const char* file, int line);
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2f_debug(GLfloat u, GLfloat v, const char* file, int line);
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1_debug((mode), (i1), (i2), __FILE__, __LINE__)
void glatter_glEvalMesh1_debug(GLenum mode, GLint i1, GLint i2, const char* file, int line);
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2_debug((mode), (i1), (i2), (j1), (j2), __FILE__, __LINE__)
void glatter_glEvalMesh2_debug(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2, const char* file, int line);
#define glEvalPoint1(i) glatter_glEvalPoint1_debug((i), __FILE__, __LINE__)
void glatter_glEvalPoint1_debug(GLint i, const char* file, int line);
#define glEvalPoint2(i, j) glatter_glEvalPoint2_debug((i), (j), __FILE__, __LINE__)
void glatter_glEvalPoint2_debug(GLint i, GLint j, const char* file, int line);
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer_debug((size), (type), (buffer), __FILE__, __LINE__)
void glatter_glFeedbackBuffer_debug(GLsizei size, GLenum type, GLfloat *buffer, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFogf(pname, param) glatter_glFogf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFogfv(pname, params) glatter_glFogfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFogi(pname, param) glatter_glFogi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogi_debug(GLenum pname, GLint param, const char* file, int line);
#define glFogiv(pname, params) glatter_glFogiv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogiv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glFrustum(left, right, bottom, top, zNear, zFar) glatter_glFrustum_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glFrustum_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glGenLists(range) glatter_glGenLists_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenLists_debug(GLsizei range, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *params, const char* file, int line);
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlane_debug(GLenum plane, GLdouble *equation, const char* file, int line);
#define glGetDoublev(pname, params) glatter_glGetDoublev_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetDoublev_debug(GLenum pname, GLdouble *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, params) glatter_glGetFloatv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *params, const char* file, int line);
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightfv_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetLightiv(light, pname, params) glatter_glGetLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightiv_debug(GLenum light, GLenum pname, GLint *params, const char* file, int line);
#define glGetMapdv(target, query, v) glatter_glGetMapdv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapdv_debug(GLenum target, GLenum query, GLdouble *v, const char* file, int line);
#define glGetMapfv(target, query, v) glatter_glGetMapfv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapfv_debug(GLenum target, GLenum query, GLfloat *v, const char* file, int line);
#define glGetMapiv(target, query, v) glatter_glGetMapiv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapiv_debug(GLenum target, GLenum query, GLint *v, const char* file, int line);
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialfv_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialiv_debug(GLenum face, GLenum pname, GLint *params, const char* file, int line);
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapfv_debug(GLenum map, GLfloat *values, const char* file, int line);
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapuiv_debug(GLenum map, GLuint *values, const char* file, int line);
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapusv_debug(GLenum map, GLushort *values, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, GLvoid* *params, const char* file, int line);
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glGetPolygonStipple_debug(GLubyte *mask, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnviv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGendv_debug(GLenum coord, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGenfv_debug(GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGeniv_debug(GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_debug((target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIndexMask(mask) glatter_glIndexMask_debug((mask), __FILE__, __LINE__)
void glatter_glIndexMask_debug(GLuint mask, const char* file, int line);
#define glIndexPointer(type, stride, pointer) glatter_glIndexPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glIndexPointer_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glIndexd(c) glatter_glIndexd_debug((c), __FILE__, __LINE__)
void glatter_glIndexd_debug(GLdouble c, const char* file, int line);
#define glIndexdv(c) glatter_glIndexdv_debug((c), __FILE__, __LINE__)
void glatter_glIndexdv_debug(const GLdouble *c, const char* file, int line);
#define glIndexf(c) glatter_glIndexf_debug((c), __FILE__, __LINE__)
void glatter_glIndexf_debug(GLfloat c, const char* file, int line);
#define glIndexfv(c) glatter_glIndexfv_debug((c), __FILE__, __LINE__)
void glatter_glIndexfv_debug(const GLfloat *c, const char* file, int line);
#define glIndexi(c) glatter_glIndexi_debug((c), __FILE__, __LINE__)
void glatter_glIndexi_debug(GLint c, const char* file, int line);
#define glIndexiv(c) glatter_glIndexiv_debug((c), __FILE__, __LINE__)
void glatter_glIndexiv_debug(const GLint *c, const char* file, int line);
#define glIndexs(c) glatter_glIndexs_debug((c), __FILE__, __LINE__)
void glatter_glIndexs_debug(GLshort c, const char* file, int line);
#define glIndexsv(c) glatter_glIndexsv_debug((c), __FILE__, __LINE__)
void glatter_glIndexsv_debug(const GLshort *c, const char* file, int line);
#define glIndexub(c) glatter_glIndexub_debug((c), __FILE__, __LINE__)
void glatter_glIndexub_debug(GLubyte c, const char* file, int line);
#define glIndexubv(c) glatter_glIndexubv_debug((c), __FILE__, __LINE__)
void glatter_glIndexubv_debug(const GLubyte *c, const char* file, int line);
#define glInitNames() glatter_glInitNames_debug(__FILE__, __LINE__)
void glatter_glInitNames_debug(const char* file, int line);
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays_debug((format), (stride), (pointer), __FILE__, __LINE__)
void glatter_glInterleavedArrays_debug(GLenum format, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsList(list) glatter_glIsList_debug((list), __FILE__, __LINE__)
GLboolean glatter_glIsList_debug(GLuint list, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLightModelf(pname, param) glatter_glLightModelf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glLightModelfv(pname, params) glatter_glLightModelfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightModeli(pname, param) glatter_glLightModeli_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModeli_debug(GLenum pname, GLint param, const char* file, int line);
#define glLightModeliv(pname, params) glatter_glLightModeliv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModeliv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glLightf(light, pname, param) glatter_glLightf_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightf_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glLightfv(light, pname, params) glatter_glLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightfv_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glLighti(light, pname, param) glatter_glLighti_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLighti_debug(GLenum light, GLenum pname, GLint param, const char* file, int line);
#define glLightiv(light, pname, params) glatter_glLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightiv_debug(GLenum light, GLenum pname, const GLint *params, const char* file, int line);
#define glLineStipple(factor, pattern) glatter_glLineStipple_debug((factor), (pattern), __FILE__, __LINE__)
void glatter_glLineStipple_debug(GLint factor, GLushort pattern, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glListBase(base) glatter_glListBase_debug((base), __FILE__, __LINE__)
void glatter_glListBase_debug(GLuint base, const char* file, int line);
#define glLoadIdentity() glatter_glLoadIdentity_debug(__FILE__, __LINE__)
void glatter_glLoadIdentity_debug(const char* file, int line);
#define glLoadMatrixd(m) glatter_glLoadMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glLoadMatrixf(m) glatter_glLoadMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glLoadName(name) glatter_glLoadName_debug((name), __FILE__, __LINE__)
void glatter_glLoadName_debug(GLuint name, const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points, const char* file, int line);
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points, const char* file, int line);
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points, const char* file, int line);
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points, const char* file, int line);
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1d_debug(GLint un, GLdouble u1, GLdouble u2, const char* file, int line);
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1f_debug(GLint un, GLfloat u1, GLfloat u2, const char* file, int line);
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2d_debug(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2, const char* file, int line);
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2f_debug(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2, const char* file, int line);
#define glMaterialf(face, pname, param) glatter_glMaterialf_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialf_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialfv_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMateriali(face, pname, param) glatter_glMateriali_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMateriali_debug(GLenum face, GLenum pname, GLint param, const char* file, int line);
#define glMaterialiv(face, pname, params) glatter_glMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialiv_debug(GLenum face, GLenum pname, const GLint *params, const char* file, int line);
#define glMatrixMode(mode) glatter_glMatrixMode_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixMode_debug(GLenum mode, const char* file, int line);
#define glMultMatrixd(m) glatter_glMultMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glMultMatrixf(m) glatter_glMultMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glNewList(list, mode) glatter_glNewList_debug((list), (mode), __FILE__, __LINE__)
void glatter_glNewList_debug(GLuint list, GLenum mode, const char* file, int line);
#define glNormal3b(nx, ny, nz) glatter_glNormal3b_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3b_debug(GLbyte nx, GLbyte ny, GLbyte nz, const char* file, int line);
#define glNormal3bv(v) glatter_glNormal3bv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3bv_debug(const GLbyte *v, const char* file, int line);
#define glNormal3d(nx, ny, nz) glatter_glNormal3d_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3d_debug(GLdouble nx, GLdouble ny, GLdouble nz, const char* file, int line);
#define glNormal3dv(v) glatter_glNormal3dv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3dv_debug(const GLdouble *v, const char* file, int line);
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3f_debug(GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormal3fv(v) glatter_glNormal3fv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3fv_debug(const GLfloat *v, const char* file, int line);
#define glNormal3i(nx, ny, nz) glatter_glNormal3i_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3i_debug(GLint nx, GLint ny, GLint nz, const char* file, int line);
#define glNormal3iv(v) glatter_glNormal3iv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3iv_debug(const GLint *v, const char* file, int line);
#define glNormal3s(nx, ny, nz) glatter_glNormal3s_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3s_debug(GLshort nx, GLshort ny, GLshort nz, const char* file, int line);
#define glNormal3sv(v) glatter_glNormal3sv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3sv_debug(const GLshort *v, const char* file, int line);
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointer_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glOrtho(left, right, bottom, top, zNear, zFar) glatter_glOrtho_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glOrtho_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glPassThrough(token) glatter_glPassThrough_debug((token), __FILE__, __LINE__)
void glatter_glPassThrough_debug(GLfloat token, const char* file, int line);
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapfv_debug(GLenum map, GLsizei mapsize, const GLfloat *values, const char* file, int line);
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapuiv_debug(GLenum map, GLsizei mapsize, const GLuint *values, const char* file, int line);
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapusv_debug(GLenum map, GLsizei mapsize, const GLushort *values, const char* file, int line);
#define glPixelStoref(pname, param) glatter_glPixelStoref_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStoref_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelTransferf(pname, param) glatter_glPixelTransferf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTransferi(pname, param) glatter_glPixelTransferi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferi_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom_debug((xfactor), (yfactor), __FILE__, __LINE__)
void glatter_glPixelZoom_debug(GLfloat xfactor, GLfloat yfactor, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPolygonMode(face, mode) glatter_glPolygonMode_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonMode_debug(GLenum face, GLenum mode, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPolygonStipple(mask) glatter_glPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glPolygonStipple_debug(const GLubyte *mask, const char* file, int line);
#define glPopAttrib() glatter_glPopAttrib_debug(__FILE__, __LINE__)
void glatter_glPopAttrib_debug(const char* file, int line);
#define glPopClientAttrib() glatter_glPopClientAttrib_debug(__FILE__, __LINE__)
void glatter_glPopClientAttrib_debug(const char* file, int line);
#define glPopMatrix() glatter_glPopMatrix_debug(__FILE__, __LINE__)
void glatter_glPopMatrix_debug(const char* file, int line);
#define glPopName() glatter_glPopName_debug(__FILE__, __LINE__)
void glatter_glPopName_debug(const char* file, int line);
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTextures_debug(GLsizei n, const GLuint *textures, const GLclampf *priorities, const char* file, int line);
#define glPushAttrib(mask) glatter_glPushAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushClientAttrib(mask) glatter_glPushClientAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushClientAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushMatrix() glatter_glPushMatrix_debug(__FILE__, __LINE__)
void glatter_glPushMatrix_debug(const char* file, int line);
#define glPushName(name) glatter_glPushName_debug((name), __FILE__, __LINE__)
void glatter_glPushName_debug(GLuint name, const char* file, int line);
#define glRasterPos2d(x, y) glatter_glRasterPos2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glRasterPos2dv(v) glatter_glRasterPos2dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos2f(x, y) glatter_glRasterPos2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glRasterPos2fv(v) glatter_glRasterPos2fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos2i(x, y) glatter_glRasterPos2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2i_debug(GLint x, GLint y, const char* file, int line);
#define glRasterPos2iv(v) glatter_glRasterPos2iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos2s(x, y) glatter_glRasterPos2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glRasterPos2sv(v) glatter_glRasterPos2sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRasterPos3dv(v) glatter_glRasterPos3dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glRasterPos3fv(v) glatter_glRasterPos3fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glRasterPos3iv(v) glatter_glRasterPos3iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glRasterPos3sv(v) glatter_glRasterPos3sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glRasterPos4dv(v) glatter_glRasterPos4dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glRasterPos4fv(v) glatter_glRasterPos4fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glRasterPos4iv(v) glatter_glRasterPos4iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glRasterPos4sv(v) glatter_glRasterPos4sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4sv_debug(const GLshort *v, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glRectd(x1, y1, x2, y2) glatter_glRectd_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectd_debug(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2, const char* file, int line);
#define glRectdv(v1, v2) glatter_glRectdv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectdv_debug(const GLdouble *v1, const GLdouble *v2, const char* file, int line);
#define glRectf(x1, y1, x2, y2) glatter_glRectf_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectf_debug(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, const char* file, int line);
#define glRectfv(v1, v2) glatter_glRectfv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectfv_debug(const GLfloat *v1, const GLfloat *v2, const char* file, int line);
#define glRecti(x1, y1, x2, y2) glatter_glRecti_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRecti_debug(GLint x1, GLint y1, GLint x2, GLint y2, const char* file, int line);
#define glRectiv(v1, v2) glatter_glRectiv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectiv_debug(const GLint *v1, const GLint *v2, const char* file, int line);
#define glRects(x1, y1, x2, y2) glatter_glRects_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRects_debug(GLshort x1, GLshort y1, GLshort x2, GLshort y2, const char* file, int line);
#define glRectsv(v1, v2) glatter_glRectsv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectsv_debug(const GLshort *v1, const GLshort *v2, const char* file, int line);
#define glRenderMode(mode) glatter_glRenderMode_debug((mode), __FILE__, __LINE__)
GLint glatter_glRenderMode_debug(GLenum mode, const char* file, int line);
#define glRotated(angle, x, y, z) glatter_glRotated_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotated_debug(GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRotatef(angle, x, y, z) glatter_glRotatef_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatef_debug(GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScaled(x, y, z) glatter_glScaled_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScaled_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glScalef(x, y, z) glatter_glScalef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer_debug((size), (buffer), __FILE__, __LINE__)
void glatter_glSelectBuffer_debug(GLsizei size, GLuint *buffer, const char* file, int line);
#define glShadeModel(mode) glatter_glShadeModel_debug((mode), __FILE__, __LINE__)
void glatter_glShadeModel_debug(GLenum mode, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexCoord1d(s) glatter_glTexCoord1d_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1d_debug(GLdouble s, const char* file, int line);
#define glTexCoord1dv(v) glatter_glTexCoord1dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord1f(s) glatter_glTexCoord1f_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1f_debug(GLfloat s, const char* file, int line);
#define glTexCoord1fv(v) glatter_glTexCoord1fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord1i(s) glatter_glTexCoord1i_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1i_debug(GLint s, const char* file, int line);
#define glTexCoord1iv(v) glatter_glTexCoord1iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord1s(s) glatter_glTexCoord1s_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1s_debug(GLshort s, const char* file, int line);
#define glTexCoord1sv(v) glatter_glTexCoord1sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord2d(s, t) glatter_glTexCoord2d_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2d_debug(GLdouble s, GLdouble t, const char* file, int line);
#define glTexCoord2dv(v) glatter_glTexCoord2dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord2f(s, t) glatter_glTexCoord2f_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2f_debug(GLfloat s, GLfloat t, const char* file, int line);
#define glTexCoord2fv(v) glatter_glTexCoord2fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord2i(s, t) glatter_glTexCoord2i_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2i_debug(GLint s, GLint t, const char* file, int line);
#define glTexCoord2iv(v) glatter_glTexCoord2iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord2s(s, t) glatter_glTexCoord2s_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2s_debug(GLshort s, GLshort t, const char* file, int line);
#define glTexCoord2sv(v) glatter_glTexCoord2sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3d_debug(GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glTexCoord3dv(v) glatter_glTexCoord3dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3f_debug(GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glTexCoord3fv(v) glatter_glTexCoord3fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3i_debug(GLint s, GLint t, GLint r, const char* file, int line);
#define glTexCoord3iv(v) glatter_glTexCoord3iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3s_debug(GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glTexCoord3sv(v) glatter_glTexCoord3sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4d_debug(GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glTexCoord4dv(v) glatter_glTexCoord4dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4f_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glTexCoord4fv(v) glatter_glTexCoord4fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4i_debug(GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glTexCoord4iv(v) glatter_glTexCoord4iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4s_debug(GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glTexCoord4sv(v) glatter_glTexCoord4sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvi_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnviv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexGend(coord, pname, param) glatter_glTexGend_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGend_debug(GLenum coord, GLenum pname, GLdouble param, const char* file, int line);
#define glTexGendv(coord, pname, params) glatter_glTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGendv_debug(GLenum coord, GLenum pname, const GLdouble *params, const char* file, int line);
#define glTexGenf(coord, pname, param) glatter_glTexGenf_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGenf_debug(GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGenfv_debug(GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexGeni(coord, pname, param) glatter_glTexGeni_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGeni_debug(GLenum coord, GLenum pname, GLint param, const char* file, int line);
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGeniv_debug(GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D_debug((target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage1D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTranslated(x, y, z) glatter_glTranslated_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslated_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glTranslatef(x, y, z) glatter_glTranslatef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex2d(x, y) glatter_glVertex2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glVertex2dv(v) glatter_glVertex2dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex2f(x, y) glatter_glVertex2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glVertex2fv(v) glatter_glVertex2fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex2i(x, y) glatter_glVertex2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2i_debug(GLint x, GLint y, const char* file, int line);
#define glVertex2iv(v) glatter_glVertex2iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2iv_debug(const GLint *v, const char* file, int line);
#define glVertex2s(x, y) glatter_glVertex2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glVertex2sv(v) glatter_glVertex2sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2sv_debug(const GLshort *v, const char* file, int line);
#define glVertex3d(x, y, z) glatter_glVertex3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertex3dv(v) glatter_glVertex3dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex3f(x, y, z) glatter_glVertex3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex3fv(v) glatter_glVertex3fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex3i(x, y, z) glatter_glVertex3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glVertex3iv(v) glatter_glVertex3iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3iv_debug(const GLint *v, const char* file, int line);
#define glVertex3s(x, y, z) glatter_glVertex3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertex3sv(v) glatter_glVertex3sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3sv_debug(const GLshort *v, const char* file, int line);
#define glVertex4d(x, y, z, w) glatter_glVertex4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertex4dv(v) glatter_glVertex4dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex4f(x, y, z, w) glatter_glVertex4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertex4fv(v) glatter_glVertex4fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex4i(x, y, z, w) glatter_glVertex4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertex4iv(v) glatter_glVertex4iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4iv_debug(const GLint *v, const char* file, int line);
#define glVertex4s(x, y, z, w) glatter_glVertex4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertex4sv(v) glatter_glVertex4sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4sv_debug(const GLshort *v, const char* file, int line);
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(__gl_h_)
#endif // defined(__GL_H__)
#endif // !defined(GL_VERSION_ES_CM_1_0)
#if defined(GL_VERSION_ES_CM_1_0)
#if !defined(__GL_H__)
#if defined(__gl_h_)
#if defined(GL_OES_point_size_array)
#define glPointSizePointerOES(type, stride, pointer) glatter_glPointSizePointerOES_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glPointSizePointerOES_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#endif // defined(GL_OES_point_size_array)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFunc_debug(GLenum func, GLclampf ref, const char* file, int line);
#define glAlphaFuncx(func, ref) glatter_glAlphaFuncx_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFuncx_debug(GLenum func, GLclampx ref, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glClearColorx(red, green, blue, alpha) glatter_glClearColorx_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorx_debug(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha, const char* file, int line);
#define glClearDepthf(depth) glatter_glClearDepthf_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLclampf depth, const char* file, int line);
#define glClearDepthx(depth) glatter_glClearDepthx_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthx_debug(GLclampx depth, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTexture_debug(GLenum texture, const char* file, int line);
#define glClipPlanef(plane, equation) glatter_glClipPlanef_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanef_debug(GLenum plane, const GLfloat *equation, const char* file, int line);
#define glClipPlanex(plane, equation) glatter_glClipPlanex_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanex_debug(GLenum plane, const GLfixed *equation, const char* file, int line);
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4f_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ub_debug(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, const char* file, int line);
#define glColor4x(red, green, blue, alpha) glatter_glColor4x_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4x_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glColorPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(zNear, zFar) glatter_glDepthRangef_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLclampf zNear, GLclampf zFar, const char* file, int line);
#define glDepthRangex(zNear, zFar) glatter_glDepthRangex_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRangex_debug(GLclampx zNear, GLclampx zFar, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableClientState(array) glatter_glDisableClientState_debug((array), __FILE__, __LINE__)
void glatter_glDisableClientState_debug(GLenum array, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableClientState(array) glatter_glEnableClientState_debug((array), __FILE__, __LINE__)
void glatter_glEnableClientState_debug(GLenum array, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFogf(pname, param) glatter_glFogf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFogfv(pname, params) glatter_glFogfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFogx(pname, param) glatter_glFogx_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogx_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glFogxv(pname, params) glatter_glFogxv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogxv_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glFrustumf(left, right, bottom, top, zNear, zFar) glatter_glFrustumf_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glFrustumf_debug(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar, const char* file, int line);
#define glFrustumx(left, right, bottom, top, zNear, zFar) glatter_glFrustumx_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glFrustumx_debug(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *params, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetClipPlanef(pname, eqn) glatter_glGetClipPlanef_debug((pname), (eqn), __FILE__, __LINE__)
void glatter_glGetClipPlanef_debug(GLenum pname, GLfloat eqn[4], const char* file, int line);
#define glGetClipPlanex(pname, eqn) glatter_glGetClipPlanex_debug((pname), (eqn), __FILE__, __LINE__)
void glatter_glGetClipPlanex_debug(GLenum pname, GLfixed eqn[4], const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFixedv(pname, params) glatter_glGetFixedv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFixedv_debug(GLenum pname, GLfixed *params, const char* file, int line);
#define glGetFloatv(pname, params) glatter_glGetFloatv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *params, const char* file, int line);
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightfv_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetLightxv(light, pname, params) glatter_glGetLightxv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightxv_debug(GLenum light, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialfv_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMaterialxv(face, pname, params) glatter_glGetMaterialxv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialxv_debug(GLenum face, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, GLvoid **params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexEnvfv(env, pname, params) glatter_glGetTexEnvfv_debug((env), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvfv_debug(GLenum env, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexEnviv(env, pname, params) glatter_glGetTexEnviv_debug((env), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnviv_debug(GLenum env, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexEnvxv(env, pname, params) glatter_glGetTexEnvxv_debug((env), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvxv_debug(GLenum env, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterxv(target, pname, params) glatter_glGetTexParameterxv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterxv_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLightModelf(pname, param) glatter_glLightModelf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glLightModelfv(pname, params) glatter_glLightModelfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightModelx(pname, param) glatter_glLightModelx_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelx_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glLightModelxv(pname, params) glatter_glLightModelxv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelxv_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glLightf(light, pname, param) glatter_glLightf_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightf_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glLightfv(light, pname, params) glatter_glLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightfv_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightx(light, pname, param) glatter_glLightx_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightx_debug(GLenum light, GLenum pname, GLfixed param, const char* file, int line);
#define glLightxv(light, pname, params) glatter_glLightxv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightxv_debug(GLenum light, GLenum pname, const GLfixed *params, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLineWidthx(width) glatter_glLineWidthx_debug((width), __FILE__, __LINE__)
void glatter_glLineWidthx_debug(GLfixed width, const char* file, int line);
#define glLoadIdentity() glatter_glLoadIdentity_debug(__FILE__, __LINE__)
void glatter_glLoadIdentity_debug(const char* file, int line);
#define glLoadMatrixf(m) glatter_glLoadMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glLoadMatrixx(m) glatter_glLoadMatrixx_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixx_debug(const GLfixed *m, const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glMaterialf(face, pname, param) glatter_glMaterialf_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialf_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialfv_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMaterialx(face, pname, param) glatter_glMaterialx_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialx_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#define glMaterialxv(face, pname, params) glatter_glMaterialxv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialxv_debug(GLenum face, GLenum pname, const GLfixed *params, const char* file, int line);
#define glMatrixMode(mode) glatter_glMatrixMode_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixMode_debug(GLenum mode, const char* file, int line);
#define glMultMatrixf(m) glatter_glMultMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultMatrixx(m) glatter_glMultMatrixx_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixx_debug(const GLfixed *m, const char* file, int line);
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4x(target, s, t, r, q) glatter_glMultiTexCoord4x_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4x_debug(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3f_debug(GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormal3x(nx, ny, nz) glatter_glNormal3x_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3x_debug(GLfixed nx, GLfixed ny, GLfixed nz, const char* file, int line);
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointer_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glOrthof(left, right, bottom, top, zNear, zFar) glatter_glOrthof_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glOrthof_debug(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar, const char* file, int line);
#define glOrthox(left, right, bottom, top, zNear, zFar) glatter_glOrthox_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glOrthox_debug(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPointParameterx(pname, param) glatter_glPointParameterx_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterx_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glPointParameterxv(pname, params) glatter_glPointParameterxv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterxv_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPointSizex(size) glatter_glPointSizex_debug((size), __FILE__, __LINE__)
void glatter_glPointSizex_debug(GLfixed size, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPolygonOffsetx(factor, units) glatter_glPolygonOffsetx_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffsetx_debug(GLfixed factor, GLfixed units, const char* file, int line);
#define glPopMatrix() glatter_glPopMatrix_debug(__FILE__, __LINE__)
void glatter_glPopMatrix_debug(const char* file, int line);
#define glPushMatrix() glatter_glPushMatrix_debug(__FILE__, __LINE__)
void glatter_glPushMatrix_debug(const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glRotatef(angle, x, y, z) glatter_glRotatef_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatef_debug(GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glRotatex(angle, x, y, z) glatter_glRotatex_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatex_debug(GLfixed angle, GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glSampleCoveragex(value, invert) glatter_glSampleCoveragex_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoveragex_debug(GLclampx value, GLboolean invert, const char* file, int line);
#define glScalef(x, y, z) glatter_glScalef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScalex(x, y, z) glatter_glScalex_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalex_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShadeModel(mode) glatter_glShadeModel_debug((mode), __FILE__, __LINE__)
void glatter_glShadeModel_debug(GLenum mode, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvi_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnviv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexEnvx(target, pname, param) glatter_glTexEnvx_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvx_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexEnvxv(target, pname, params) glatter_glTexEnvxv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvxv_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterx(target, pname, param) glatter_glTexParameterx_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterx_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexParameterxv(target, pname, params) glatter_glTexParameterxv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterxv_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTranslatef(x, y, z) glatter_glTranslatef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTranslatex(x, y, z) glatter_glTranslatex_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatex_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(__gl_h_)
#endif // !defined(__GL_H__)
#endif // defined(GL_VERSION_ES_CM_1_0)
#if defined(__gl2_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#endif // defined(__gl2_h_)
#if defined(__gl2ext_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glBeginPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glDeletePerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glEndPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glGenPerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_debug((monitor), (pname), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterDataAMD_debug(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, const char* file, int line);
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_debug((group), (counter), (pname), (data), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterInfoAMD_debug(GLuint group, GLuint counter, GLenum pname, void *data, const char* file, int line);
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_debug((group), (counter), (bufSize), (length), (counterString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterStringAMD_debug(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, const char* file, int line);
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_debug((group), (numCounters), (maxActiveCounters), (counterSize), (counters), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCountersAMD_debug(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, const char* file, int line);
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_debug((group), (bufSize), (length), (groupString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupStringAMD_debug(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, const char* file, int line);
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_debug((numGroups), (groupsSize), (groups), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupsAMD_debug(GLint *numGroups, GLsizei groupsSize, GLuint *groups, const char* file, int line);
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_debug((monitor), (enable), (group), (numCounters), (counterList), __FILE__, __LINE__)
void glatter_glSelectPerfMonitorCountersAMD_debug(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, const char* file, int line);
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ANGLE_framebuffer_blit)
#define glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferANGLE_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebufferANGLE_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_ANGLE_framebuffer_blit)
#if defined(GL_ANGLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleANGLE_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleANGLE_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ANGLE_framebuffer_multisample)
#if defined(GL_ANGLE_instanced_arrays)
#define glDrawArraysInstancedANGLE(mode, first, count, primcount) glatter_glDrawArraysInstancedANGLE_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedANGLE_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedANGLE_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedANGLE_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#define glVertexAttribDivisorANGLE(index, divisor) glatter_glVertexAttribDivisorANGLE_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorANGLE_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_ANGLE_instanced_arrays)
#if defined(GL_ANGLE_translated_shader_source)
#define glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source) glatter_glGetTranslatedShaderSourceANGLE_debug((shader), (bufsize), (length), (source), __FILE__, __LINE__)
void glatter_glGetTranslatedShaderSourceANGLE_debug(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source, const char* file, int line);
#endif // defined(GL_ANGLE_translated_shader_source)
#if defined(GL_APPLE_copy_texture_levels)
#define glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) glatter_glCopyTextureLevelsAPPLE_debug((destinationTexture), (sourceTexture), (sourceBaseLevel), (sourceLevelCount), __FILE__, __LINE__)
void glatter_glCopyTextureLevelsAPPLE_debug(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount, const char* file, int line);
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAPPLE_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleAPPLE_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResolveMultisampleFramebufferAPPLE() glatter_glResolveMultisampleFramebufferAPPLE_debug(__FILE__, __LINE__)
void glatter_glResolveMultisampleFramebufferAPPLE_debug(const char* file, int line);
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
#define glClientWaitSyncAPPLE(sync, flags, timeout) glatter_glClientWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glDeleteSyncAPPLE(sync) glatter_glDeleteSyncAPPLE_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSyncAPPLE_debug(GLsync sync, const char* file, int line);
#define glFenceSyncAPPLE(condition, flags) glatter_glFenceSyncAPPLE_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSyncAPPLE_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glGetInteger64vAPPLE(pname, params) glatter_glGetInteger64vAPPLE_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetInteger64vAPPLE_debug(GLenum pname, GLint64 *params, const char* file, int line);
#define glGetSyncivAPPLE(sync, pname, bufSize, length, values) glatter_glGetSyncivAPPLE_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSyncivAPPLE_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glIsSyncAPPLE(sync) glatter_glIsSyncAPPLE_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSyncAPPLE_debug(GLsync sync, const char* file, int line);
#define glWaitSyncAPPLE(sync, flags, timeout) glatter_glWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_base_instance)
#define glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstanceEXT_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedBaseInstanceEXT_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstanceEXT_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseInstanceEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#endif // defined(GL_EXT_base_instance)
#if defined(GL_EXT_blend_func_extended)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationEXT_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glBindFragDataLocationIndexedEXT(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexedEXT_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationIndexedEXT_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#define glGetFragDataIndexEXT(program, name) glatter_glGetFragDataIndexEXT_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataIndexEXT_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocationIndexEXT(program, programInterface, name) glatter_glGetProgramResourceLocationIndexEXT_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocationIndexEXT_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#endif // defined(GL_EXT_blend_func_extended)
#if defined(GL_EXT_buffer_storage)
#define glBufferStorageEXT(target, size, data, flags) glatter_glBufferStorageEXT_debug((target), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glBufferStorageEXT_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#endif // defined(GL_EXT_buffer_storage)
#if defined(GL_EXT_clear_texture)
#define glClearTexImageEXT(texture, level, format, type, data) glatter_glClearTexImageEXT_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexImageEXT_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImageEXT_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexSubImageEXT_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_EXT_clear_texture)
#if defined(GL_EXT_copy_image)
#define glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataEXT_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubDataEXT_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#endif // defined(GL_EXT_copy_image)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_debug((type), (object), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelEXT_debug(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_debug((type), (object), (length), (label), __FILE__, __LINE__)
void glatter_glLabelObjectEXT_debug(GLenum type, GLuint object, GLsizei length, const GLchar *label, const char* file, int line);
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
#define glDiscardFramebufferEXT(target, numAttachments, attachments) glatter_glDiscardFramebufferEXT_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glDiscardFramebufferEXT_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_disjoint_timer_query)
#define glBeginQueryEXT(target, id) glatter_glBeginQueryEXT_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQueryEXT_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteQueriesEXT(n, ids) glatter_glDeleteQueriesEXT_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueriesEXT_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQueryEXT(target) glatter_glEndQueryEXT_debug((target), __FILE__, __LINE__)
void glatter_glEndQueryEXT_debug(GLenum target, const char* file, int line);
#define glGenQueriesEXT(n, ids) glatter_glGenQueriesEXT_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueriesEXT_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64vEXT_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectivEXT(id, pname, params) glatter_glGetQueryObjectivEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectivEXT_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64vEXT_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glGetQueryObjectuivEXT(id, pname, params) glatter_glGetQueryObjectuivEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuivEXT_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryivEXT(target, pname, params) glatter_glGetQueryivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsQueryEXT(id) glatter_glIsQueryEXT_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQueryEXT_debug(GLuint id, const char* file, int line);
#define glQueryCounterEXT(id, target) glatter_glQueryCounterEXT_debug((id), (target), __FILE__, __LINE__)
void glatter_glQueryCounterEXT_debug(GLuint id, GLenum target, const char* file, int line);
#endif // defined(GL_EXT_disjoint_timer_query)
#if defined(GL_EXT_draw_buffers)
#define glDrawBuffersEXT(n, bufs) glatter_glDrawBuffersEXT_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersEXT_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers)
#if defined(GL_EXT_draw_buffers_indexed)
#define glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiEXT_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiEXT_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiEXT(buf, mode) glatter_glBlendEquationiEXT_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiEXT_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiEXT_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiEXT_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciEXT(buf, src, dst) glatter_glBlendFunciEXT_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciEXT_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glColorMaskiEXT(index, r, g, b, a) glatter_glColorMaskiEXT_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaskiEXT_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDisableiEXT(target, index) glatter_glDisableiEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableiEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableiEXT(target, index) glatter_glEnableiEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableiEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsEnablediEXT(target, index) glatter_glIsEnablediEXT_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnablediEXT_debug(GLenum target, GLuint index, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers_indexed)
#if defined(GL_EXT_draw_elements_base_vertex)
#define glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexEXT_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertexEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexEXT_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexEXT_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertexEXT_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexEXT_debug((mode), (count), (type), (indices), (primcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertexEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex, const char* file, int line);
#endif // defined(GL_EXT_draw_elements_base_vertex)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_debug((mode), (start), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedEXT_debug(GLenum mode, GLint start, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_transform_feedback)
#define glDrawTransformFeedbackEXT(mode, id) glatter_glDrawTransformFeedbackEXT_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackEXT_debug(GLenum mode, GLuint id, const char* file, int line);
#define glDrawTransformFeedbackInstancedEXT(mode, id, instancecount) glatter_glDrawTransformFeedbackInstancedEXT_debug((mode), (id), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackInstancedEXT_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#endif // defined(GL_EXT_draw_transform_feedback)
#if defined(GL_EXT_geometry_shader)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_EXT_geometry_shader)
#if defined(GL_EXT_instanced_arrays)
#define glVertexAttribDivisorEXT(index, divisor) glatter_glVertexAttribDivisorEXT_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorEXT_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_EXT_instanced_arrays)
#if defined(GL_EXT_map_buffer_range)
#define glFlushMappedBufferRangeEXT(target, offset, length) glatter_glFlushMappedBufferRangeEXT_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glMapBufferRangeEXT(target, offset, length, access) glatter_glMapBufferRangeEXT_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysEXT_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multi_draw_indirect)
#define glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirectEXT_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectEXT_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirectEXT_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectEXT_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_indirect)
#if defined(GL_EXT_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleEXT_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DMultisampleEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_multiview_draw_buffers)
#define glDrawBuffersIndexedEXT(n, location, indices) glatter_glDrawBuffersIndexedEXT_debug((n), (location), (indices), __FILE__, __LINE__)
void glatter_glDrawBuffersIndexedEXT_debug(GLint n, const GLenum *location, const GLint *indices, const char* file, int line);
#define glGetIntegeri_vEXT(target, index, data) glatter_glGetIntegeri_vEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_vEXT_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glReadBufferIndexedEXT(src, index) glatter_glReadBufferIndexedEXT_debug((src), (index), __FILE__, __LINE__)
void glatter_glReadBufferIndexedEXT_debug(GLenum src, GLint index, const char* file, int line);
#endif // defined(GL_EXT_multiview_draw_buffers)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClampEXT_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_primitive_bounding_box)
#define glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxEXT_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBoxEXT_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_EXT_primitive_bounding_box)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_debug((samples), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glRasterSamplesEXT_debug(GLuint samples, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_robustness)
#define glGetGraphicsResetStatusEXT() glatter_glGetGraphicsResetStatusEXT_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusEXT_debug(const char* file, int line);
#define glGetnUniformfvEXT(program, location, bufSize, params) glatter_glGetnUniformfvEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivEXT(program, location, bufSize, params) glatter_glGetnUniformivEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsEXT_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsEXT_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveShaderProgramEXT(pipeline, program) glatter_glActiveShaderProgramEXT_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgramEXT_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindProgramPipelineEXT(pipeline) glatter_glBindProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#define glCreateShaderProgramvEXT(type, count, strings) glatter_glCreateShaderProgramvEXT_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramvEXT_debug(GLenum type, GLsizei count, const GLchar **strings, const char* file, int line);
#define glDeleteProgramPipelinesEXT(n, pipelines) glatter_glDeleteProgramPipelinesEXT_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelinesEXT_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glGenProgramPipelinesEXT(n, pipelines) glatter_glGenProgramPipelinesEXT_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelinesEXT_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLogEXT_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLogEXT_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineivEXT(pipeline, pname, params) glatter_glGetProgramPipelineivEXT_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineivEXT_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramPipelineEXT(pipeline) glatter_glIsProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteriEXT_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1fEXT_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1iEXT_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1uiEXT_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgramStagesEXT(pipeline, stages, program) glatter_glUseProgramStagesEXT_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStagesEXT_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipelineEXT(pipeline) glatter_glValidateProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_pixel_local_storage2)
#define glClearPixelLocalStorageuiEXT(offset, n, values) glatter_glClearPixelLocalStorageuiEXT_debug((offset), (n), (values), __FILE__, __LINE__)
void glatter_glClearPixelLocalStorageuiEXT_debug(GLsizei offset, GLsizei n, const GLuint *values, const char* file, int line);
#define glFramebufferPixelLocalStorageSizeEXT(target, size) glatter_glFramebufferPixelLocalStorageSizeEXT_debug((target), (size), __FILE__, __LINE__)
void glatter_glFramebufferPixelLocalStorageSizeEXT_debug(GLuint target, GLsizei size, const char* file, int line);
#define glGetFramebufferPixelLocalStorageSizeEXT(target) glatter_glGetFramebufferPixelLocalStorageSizeEXT_debug((target), __FILE__, __LINE__)
GLsizei glatter_glGetFramebufferPixelLocalStorageSizeEXT_debug(GLuint target, const char* file, int line);
#endif // defined(GL_EXT_shader_pixel_local_storage2)
#if defined(GL_EXT_sparse_texture)
#define glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentEXT_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexPageCommitmentEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#endif // defined(GL_EXT_sparse_texture)
#if defined(GL_EXT_tessellation_shader)
#define glPatchParameteriEXT(pname, value) glatter_glPatchParameteriEXT_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteriEXT_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_EXT_tessellation_shader)
#if defined(GL_EXT_texture_border_clamp)
#define glGetSamplerParameterIivEXT(sampler, pname, params) glatter_glGetSamplerParameterIivEXT_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIivEXT_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuivEXT(sampler, pname, params) glatter_glGetSamplerParameterIuivEXT_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuivEXT_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuivEXT_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glSamplerParameterIivEXT(sampler, pname, param) glatter_glSamplerParameterIivEXT_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIivEXT_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuivEXT(sampler, pname, param) glatter_glSamplerParameterIuivEXT_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuivEXT_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuivEXT_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_EXT_texture_border_clamp)
#if defined(GL_EXT_texture_buffer)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTexBufferRangeEXT(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeEXT_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRangeEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_EXT_texture_buffer)
#if defined(GL_EXT_texture_storage)
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTexStorage1DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_debug((texture), (target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_EXT_texture_view)
#define glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewEXT_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureViewEXT_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#endif // defined(GL_EXT_texture_view)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_debug((mode), (count), (box), __FILE__, __LINE__)
void glatter_glWindowRectanglesEXT_debug(GLenum mode, GLsizei count, const GLint *box, const char* file, int line);
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_IMG_bindless_texture)
#define glGetTextureHandleIMG(texture) glatter_glGetTextureHandleIMG_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleIMG_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleIMG(texture, sampler) glatter_glGetTextureSamplerHandleIMG_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleIMG_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glProgramUniformHandleui64IMG(program, location, value) glatter_glProgramUniformHandleui64IMG_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64IMG_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vIMG(program, location, count, values) glatter_glProgramUniformHandleui64vIMG_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vIMG_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64IMG(location, value) glatter_glUniformHandleui64IMG_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64IMG_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vIMG(location, count, value) glatter_glUniformHandleui64vIMG_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vIMG_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_IMG_bindless_texture)
#if defined(GL_IMG_framebuffer_downsample)
#define glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale) glatter_glFramebufferTexture2DDownsampleIMG_debug((target), (attachment), (textarget), (texture), (level), (xscale), (yscale), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DDownsampleIMG_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale, const char* file, int line);
#define glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale) glatter_glFramebufferTextureLayerDownsampleIMG_debug((target), (attachment), (texture), (level), (layer), (xscale), (yscale), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayerDownsampleIMG_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale, const char* file, int line);
#endif // defined(GL_IMG_framebuffer_downsample)
#if defined(GL_IMG_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleIMG_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DMultisampleIMG_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#define glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleIMG_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleIMG_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(__FILE__, __LINE__)
void glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(const char* file, int line);
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glBeginPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_debug((queryId), (queryHandle), __FILE__, __LINE__)
void glatter_glCreatePerfQueryINTEL_debug(GLuint queryId, GLuint *queryHandle, const char* file, int line);
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glDeletePerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glEndPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_debug((queryId), __FILE__, __LINE__)
void glatter_glGetFirstPerfQueryIdINTEL_debug(GLuint *queryId, const char* file, int line);
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_debug((queryId), (nextQueryId), __FILE__, __LINE__)
void glatter_glGetNextPerfQueryIdINTEL_debug(GLuint queryId, GLuint *nextQueryId, const char* file, int line);
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_debug((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue), __FILE__, __LINE__)
void glatter_glGetPerfCounterInfoINTEL_debug(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, const char* file, int line);
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_debug((queryHandle), (flags), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfQueryDataINTEL_debug(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten, const char* file, int line);
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_debug((queryName), (queryId), __FILE__, __LINE__)
void glatter_glGetPerfQueryIdByNameINTEL_debug(GLchar *queryName, GLuint *queryId, const char* file, int line);
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_debug((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask), __FILE__, __LINE__)
void glatter_glGetPerfQueryInfoINTEL_debug(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, const char* file, int line);
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierKHR_debug(const char* file, int line);
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_debug)
#define glDebugMessageCallbackKHR(callback, userParam) glatter_glDebugMessageCallbackKHR_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackKHR_debug(GLDEBUGPROCKHR callback, const void *userParam, const char* file, int line);
#define glDebugMessageControlKHR(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlKHR_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControlKHR_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertKHR(source, type, id, severity, length, buf) glatter_glDebugMessageInsertKHR_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertKHR_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogKHR_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogKHR_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetObjectLabelKHR(identifier, name, bufSize, length, label) glatter_glGetObjectLabelKHR_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelKHR_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabelKHR(ptr, bufSize, length, label) glatter_glGetObjectPtrLabelKHR_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabelKHR_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetPointervKHR(pname, params) glatter_glGetPointervKHR_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointervKHR_debug(GLenum pname, void **params, const char* file, int line);
#define glObjectLabelKHR(identifier, name, length, label) glatter_glObjectLabelKHR_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabelKHR_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabelKHR(ptr, length, label) glatter_glObjectPtrLabelKHR_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabelKHR_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPopDebugGroupKHR() glatter_glPopDebugGroupKHR_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroupKHR_debug(const char* file, int line);
#define glPushDebugGroupKHR(source, id, length, message) glatter_glPushDebugGroupKHR_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroupKHR_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#endif // defined(GL_KHR_debug)
#if defined(GL_KHR_robustness)
#define glGetGraphicsResetStatusKHR() glatter_glGetGraphicsResetStatusKHR_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusKHR_debug(const char* file, int line);
#define glGetnUniformfvKHR(program, location, bufSize, params) glatter_glGetnUniformfvKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivKHR(program, location, bufSize, params) glatter_glGetnUniformivKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuivKHR(program, location, bufSize, params) glatter_glGetnUniformuivKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuivKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsKHR_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsKHR_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_KHR_robustness)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleNV_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleNV_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleNV_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentNV_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64NV_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64NV_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vNV_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierNV_debug(const char* file, int line);
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glBlendParameteriNV_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNV_debug(GLuint id, GLenum mode, const char* file, int line);
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNV_debug(const char* file, int line);
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_debug((xbits), (ybits), __FILE__, __LINE__)
void glatter_glSubpixelPrecisionBiasNV_debug(GLuint xbits, GLuint ybits, const char* file, int line);
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glConservativeRasterParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_buffer)
#define glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubDataNV_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubDataNV_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_NV_copy_buffer)
#if defined(GL_NV_coverage_sample)
#define glCoverageMaskNV(mask) glatter_glCoverageMaskNV_debug((mask), __FILE__, __LINE__)
void glatter_glCoverageMaskNV_debug(GLboolean mask, const char* file, int line);
#define glCoverageOperationNV(operation) glatter_glCoverageOperationNV_debug((operation), __FILE__, __LINE__)
void glatter_glCoverageOperationNV_debug(GLenum operation, const char* file, int line);
#endif // defined(GL_NV_coverage_sample)
#if defined(GL_NV_draw_buffers)
#define glDrawBuffersNV(n, bufs) glatter_glDrawBuffersNV_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersNV_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_NV_draw_buffers)
#if defined(GL_NV_draw_instanced)
#define glDrawArraysInstancedNV(mode, first, count, primcount) glatter_glDrawArraysInstancedNV_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedNV_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedNV(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedNV_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedNV_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_NV_draw_instanced)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glDeleteFencesNV_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_debug((fence), __FILE__, __LINE__)
void glatter_glFinishFenceNV_debug(GLuint fence, const char* file, int line);
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glGenFencesNV_debug(GLsizei n, GLuint *fences, const char* file, int line);
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_debug((fence), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFenceivNV_debug(GLuint fence, GLenum pname, GLint *params, const char* file, int line);
#define glIsFenceNV(fence) glatter_glIsFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glIsFenceNV_debug(GLuint fence, const char* file, int line);
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_debug((fence), (condition), __FILE__, __LINE__)
void glatter_glSetFenceNV_debug(GLuint fence, GLenum condition, const char* file, int line);
#define glTestFenceNV(fence) glatter_glTestFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glTestFenceNV_debug(GLuint fence, const char* file, int line);
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_debug((color), __FILE__, __LINE__)
void glatter_glFragmentCoverageColorNV_debug(GLuint color, const char* file, int line);
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_blit)
#define glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferNV_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebufferNV_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_NV_framebuffer_blit)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_debug((components), __FILE__, __LINE__)
void glatter_glCoverageModulationNV_debug(GLenum components, const char* file, int line);
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_debug((n), (v), __FILE__, __LINE__)
void glatter_glCoverageModulationTableNV_debug(GLsizei n, const GLfloat *v, const char* file, int line);
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_debug((bufsize), (v), __FILE__, __LINE__)
void glatter_glGetCoverageModulationTableNV_debug(GLsizei bufsize, GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample)
#define glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleNV_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleNV_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_NV_framebuffer_multisample)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vNV_debug(GLuint program, GLint location, GLint64EXT *params, const char* file, int line);
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64NV_debug(GLuint program, GLint location, GLint64EXT x, const char* file, int line);
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, const char* file, int line);
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64NV_debug(GLint location, GLint64EXT x, const char* file, int line);
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64NV_debug(GLint location, GLuint64EXT x, const char* file, int line);
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_instanced_arrays)
#define glVertexAttribDivisorNV(index, divisor) glatter_glVertexAttribDivisorNV_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorNV_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_NV_instanced_arrays)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_debug((target), (internalformat), (samples), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformatSampleivNV_debug(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_non_square_matrices)
#define glUniformMatrix2x3fvNV(location, count, transpose, value) glatter_glUniformMatrix2x3fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fvNV(location, count, transpose, value) glatter_glUniformMatrix2x4fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fvNV(location, count, transpose, value) glatter_glUniformMatrix3x2fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fvNV(location, count, transpose, value) glatter_glUniformMatrix3x4fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fvNV(location, count, transpose, value) glatter_glUniformMatrix4x2fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fvNV(location, count, transpose, value) glatter_glUniformMatrix4x3fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_NV_non_square_matrices)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_debug((resultPath), (srcPath), __FILE__, __LINE__)
void glatter_glCopyPathNV_debug(GLuint resultPath, GLuint srcPath, const char* file, int line);
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverFillPathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverStrokePathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_debug((path), (range), __FILE__, __LINE__)
void glatter_glDeletePathsNV_debug(GLuint path, GLsizei range, const char* file, int line);
#define glGenPathsNV(range) glatter_glGenPathsNV_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenPathsNV_debug(GLsizei range, const char* file, int line);
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_debug((path), (commands), __FILE__, __LINE__)
void glatter_glGetPathCommandsNV_debug(GLuint path, GLubyte *commands, const char* file, int line);
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_debug((path), (coords), __FILE__, __LINE__)
void glatter_glGetPathCoordsNV_debug(GLuint path, GLfloat *coords, const char* file, int line);
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_debug((path), (dashArray), __FILE__, __LINE__)
void glatter_glGetPathDashArrayNV_debug(GLuint path, GLfloat *dashArray, const char* file, int line);
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_debug((path), (startSegment), (numSegments), __FILE__, __LINE__)
GLfloat glatter_glGetPathLengthNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, const char* file, int line);
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_debug((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricRangeNV_debug(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_debug((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricsNV_debug(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterfvNV_debug(GLuint path, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterivNV_debug(GLuint path, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_debug((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing), __FILE__, __LINE__)
void glatter_glGetPathSpacingNV_debug(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing, const char* file, int line);
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourcefvNV_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params, const char* file, int line);
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_debug((resultPath), (pathA), (pathB), (weight), __FILE__, __LINE__)
void glatter_glInterpolatePathsNV_debug(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, const char* file, int line);
#define glIsPathNV(path) glatter_glIsPathNV_debug((path), __FILE__, __LINE__)
GLboolean glatter_glIsPathNV_debug(GLuint path, const char* file, int line);
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_debug((path), (mask), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInFillPathNV_debug(GLuint path, GLuint mask, GLfloat x, GLfloat y, const char* file, int line);
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_debug((path), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInStrokePathNV_debug(GLuint path, GLfloat x, GLfloat y, const char* file, int line);
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_debug((path), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCommandsNV_debug(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_debug((path), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCoordsNV_debug(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_debug((func), __FILE__, __LINE__)
void glatter_glPathCoverDepthFuncNV_debug(GLenum func, const char* file, int line);
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_debug((path), (dashCount), (dashArray), __FILE__, __LINE__)
void glatter_glPathDashArrayNV_debug(GLuint path, GLsizei dashCount, const GLfloat *dashArray, const char* file, int line);
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_debug((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexRangeNV_debug(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2], const char* file, int line);
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphRangeNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphsNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathMemoryGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfNV_debug(GLuint path, GLenum pname, GLfloat value, const char* file, int line);
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfvNV_debug(GLuint path, GLenum pname, const GLfloat *value, const char* file, int line);
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameteriNV_debug(GLuint path, GLenum pname, GLint value, const char* file, int line);
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterivNV_debug(GLuint path, GLenum pname, const GLint *value, const char* file, int line);
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPathStencilDepthOffsetNV_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glPathStencilFuncNV_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_debug((path), (format), (length), (pathString), __FILE__, __LINE__)
void glatter_glPathStringNV_debug(GLuint path, GLenum format, GLsizei length, const void *pathString, const char* file, int line);
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_debug((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCommandsNV_debug(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_debug((path), (coordStart), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCoordsNV_debug(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_debug((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY), __FILE__, __LINE__)
GLboolean glatter_glPointAlongPathNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, const char* file, int line);
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_debug((program), (location), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glProgramPathFragmentInputGenNV_debug(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_debug((path), (fillMode), (mask), __FILE__, __LINE__)
void glatter_glStencilFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, const char* file, int line);
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_debug((path), (reference), (mask), __FILE__, __LINE__)
void glatter_glStencilStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, const char* file, int line);
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_debug((path), (fillMode), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, const char* file, int line);
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_debug((path), (reference), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, GLenum coverMode, const char* file, int line);
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_debug((resultPath), (srcPath), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glTransformPathNV_debug(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_debug((resultPath), (numPaths), (paths), (weights), __FILE__, __LINE__)
void glatter_glWeightPathsNV_debug(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_polygon_mode)
#define glPolygonModeNV(face, mode) glatter_glPolygonModeNV_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonModeNV_debug(GLenum face, GLenum mode, const char* file, int line);
#endif // defined(GL_NV_polygon_mode)
#if defined(GL_NV_read_buffer)
#define glReadBufferNV(mode) glatter_glReadBufferNV_debug((mode), __FILE__, __LINE__)
void glatter_glReadBufferNV_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_NV_read_buffer)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvNV_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvNV_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_debug(__FILE__, __LINE__)
void glatter_glResolveDepthValuesNV_debug(const char* file, int line);
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_viewport_array)
#define glDepthRangeArrayfvNV(first, count, v) glatter_glDepthRangeArrayfvNV_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayfvNV_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glDepthRangeIndexedfNV(index, n, f) glatter_glDepthRangeIndexedfNV_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexedfNV_debug(GLuint index, GLfloat n, GLfloat f, const char* file, int line);
#define glDisableiNV(target, index) glatter_glDisableiNV_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableiNV_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableiNV(target, index) glatter_glEnableiNV_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableiNV_debug(GLenum target, GLuint index, const char* file, int line);
#define glGetFloati_vNV(target, index, data) glatter_glGetFloati_vNV_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_vNV_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glIsEnablediNV(target, index) glatter_glIsEnablediNV_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnablediNV_debug(GLenum target, GLuint index, const char* file, int line);
#define glScissorArrayvNV(first, count, v) glatter_glScissorArrayvNV_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayvNV_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexedNV(index, left, bottom, width, height) glatter_glScissorIndexedNV_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexedNV_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedvNV(index, v) glatter_glScissorIndexedvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedvNV_debug(GLuint index, const GLint *v, const char* file, int line);
#define glViewportArrayvNV(first, count, v) glatter_glViewportArrayvNV_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayvNV_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedfNV(index, x, y, w, h) glatter_glViewportIndexedfNV_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedfNV_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfvNV(index, v) glatter_glViewportIndexedfvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_viewport_array)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_debug((index), (swizzlex), (swizzley), (swizzlez), (swizzlew), __FILE__, __LINE__)
void glatter_glViewportSwizzleNV_debug(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, const char* file, int line);
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetRenderbufferStorageOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetTexture2DOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_copy_image)
#define glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataOES_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubDataOES_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#endif // defined(GL_OES_copy_image)
#if defined(GL_OES_draw_buffers_indexed)
#define glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiOES_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiOES_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiOES(buf, mode) glatter_glBlendEquationiOES_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiOES_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiOES_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiOES_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciOES(buf, src, dst) glatter_glBlendFunciOES_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciOES_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glColorMaskiOES(index, r, g, b, a) glatter_glColorMaskiOES_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaskiOES_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDisableiOES(target, index) glatter_glDisableiOES_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableiOES_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableiOES(target, index) glatter_glEnableiOES_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableiOES_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsEnablediOES(target, index) glatter_glIsEnablediOES_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnablediOES_debug(GLenum target, GLuint index, const char* file, int line);
#endif // defined(GL_OES_draw_buffers_indexed)
#if defined(GL_OES_draw_elements_base_vertex)
#define glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexOES_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertexOES_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexOES_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexOES_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexOES_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertexOES_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glMultiDrawElementsBaseVertexOES(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexOES_debug((mode), (count), (type), (indices), (primcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertexOES_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex, const char* file, int line);
#endif // defined(GL_OES_draw_elements_base_vertex)
#if defined(GL_OES_geometry_shader)
#define glFramebufferTextureOES(target, attachment, texture, level) glatter_glFramebufferTextureOES_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureOES_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_OES_geometry_shader)
#if defined(GL_OES_get_program_binary)
#define glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinaryOES_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinaryOES_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glProgramBinaryOES(program, binaryFormat, binary, length) glatter_glProgramBinaryOES_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinaryOES_debug(GLuint program, GLenum binaryFormat, const void *binary, GLint length, const char* file, int line);
#endif // defined(GL_OES_get_program_binary)
#if defined(GL_OES_mapbuffer)
#define glGetBufferPointervOES(target, pname, params) glatter_glGetBufferPointervOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointervOES_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glMapBufferOES(target, access) glatter_glMapBufferOES_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBufferOES_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBufferOES(target) glatter_glUnmapBufferOES_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBufferOES_debug(GLenum target, const char* file, int line);
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_primitive_bounding_box)
#define glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxOES_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBoxOES_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_OES_primitive_bounding_box)
#if defined(GL_OES_sample_shading)
#define glMinSampleShadingOES(value) glatter_glMinSampleShadingOES_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShadingOES_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_OES_sample_shading)
#if defined(GL_OES_tessellation_shader)
#define glPatchParameteriOES(pname, value) glatter_glPatchParameteriOES_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteriOES_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_OES_tessellation_shader)
#if defined(GL_OES_texture_3D)
#define glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DOES_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3DOES_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DOES_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3DOES_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DOES_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3DOES_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_OES_texture_3D)
#if defined(GL_OES_texture_border_clamp)
#define glGetSamplerParameterIivOES(sampler, pname, params) glatter_glGetSamplerParameterIivOES_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIivOES_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuivOES(sampler, pname, params) glatter_glGetSamplerParameterIuivOES_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuivOES_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTexParameterIivOES(target, pname, params) glatter_glGetTexParameterIivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIivOES_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuivOES(target, pname, params) glatter_glGetTexParameterIuivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuivOES_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glSamplerParameterIivOES(sampler, pname, param) glatter_glSamplerParameterIivOES_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIivOES_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuivOES(sampler, pname, param) glatter_glSamplerParameterIuivOES_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuivOES_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glTexParameterIivOES(target, pname, params) glatter_glTexParameterIivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIivOES_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuivOES(target, pname, params) glatter_glTexParameterIuivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuivOES_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_OES_texture_border_clamp)
#if defined(GL_OES_texture_buffer)
#define glTexBufferOES(target, internalformat, buffer) glatter_glTexBufferOES_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferOES_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTexBufferRangeOES(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeOES_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRangeOES_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_OES_texture_buffer)
#if defined(GL_OES_texture_storage_multisample_2d_array)
#define glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisampleOES_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisampleOES_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_OES_texture_storage_multisample_2d_array)
#if defined(GL_OES_texture_view)
#define glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewOES_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureViewOES_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#endif // defined(GL_OES_texture_view)
#if defined(GL_OES_vertex_array_object)
#define glBindVertexArrayOES(array) glatter_glBindVertexArrayOES_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArrayOES_debug(GLuint array, const char* file, int line);
#define glDeleteVertexArraysOES(n, arrays) glatter_glDeleteVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArraysOES_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glGenVertexArraysOES(n, arrays) glatter_glGenVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArraysOES_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glIsVertexArrayOES(array) glatter_glIsVertexArrayOES_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArrayOES_debug(GLuint array, const char* file, int line);
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_OES_viewport_array)
#define glDepthRangeArrayfvOES(first, count, v) glatter_glDepthRangeArrayfvOES_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayfvOES_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glDepthRangeIndexedfOES(index, n, f) glatter_glDepthRangeIndexedfOES_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexedfOES_debug(GLuint index, GLfloat n, GLfloat f, const char* file, int line);
#define glGetFloati_vOES(target, index, data) glatter_glGetFloati_vOES_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_vOES_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glScissorArrayvOES(first, count, v) glatter_glScissorArrayvOES_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayvOES_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexedOES(index, left, bottom, width, height) glatter_glScissorIndexedOES_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexedOES_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedvOES(index, v) glatter_glScissorIndexedvOES_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedvOES_debug(GLuint index, const GLint *v, const char* file, int line);
#define glViewportArrayvOES(first, count, v) glatter_glViewportArrayvOES_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayvOES_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedfOES(index, x, y, w, h) glatter_glViewportIndexedfOES_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedfOES_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfvOES(index, v) glatter_glViewportIndexedfvOES_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfvOES_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_OES_viewport_array)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_debug((target), (attachment), (texture), (level), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview)
#if defined(GL_OVR_multiview_multisampled_render_to_texture)
#define glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews) glatter_glFramebufferTextureMultisampleMultiviewOVR_debug((target), (attachment), (texture), (level), (samples), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultisampleMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview_multisampled_render_to_texture)
#if defined(GL_QCOM_alpha_test)
#define glAlphaFuncQCOM(func, ref) glatter_glAlphaFuncQCOM_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFuncQCOM_debug(GLenum func, GLclampf ref, const char* file, int line);
#endif // defined(GL_QCOM_alpha_test)
#if defined(GL_QCOM_driver_control)
#define glDisableDriverControlQCOM(driverControl) glatter_glDisableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
void glatter_glDisableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#define glEnableDriverControlQCOM(driverControl) glatter_glEnableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
void glatter_glEnableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#define glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) glatter_glGetDriverControlStringQCOM_debug((driverControl), (bufSize), (length), (driverControlString), __FILE__, __LINE__)
void glatter_glGetDriverControlStringQCOM_debug(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString, const char* file, int line);
#define glGetDriverControlsQCOM(num, size, driverControls) glatter_glGetDriverControlsQCOM_debug((num), (size), (driverControls), __FILE__, __LINE__)
void glatter_glGetDriverControlsQCOM_debug(GLint *num, GLsizei size, GLuint *driverControls, const char* file, int line);
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
#define glExtGetBufferPointervQCOM(target, params) glatter_glExtGetBufferPointervQCOM_debug((target), (params), __FILE__, __LINE__)
void glatter_glExtGetBufferPointervQCOM_debug(GLenum target, void **params, const char* file, int line);
#define glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) glatter_glExtGetBuffersQCOM_debug((buffers), (maxBuffers), (numBuffers), __FILE__, __LINE__)
void glatter_glExtGetBuffersQCOM_debug(GLuint *buffers, GLint maxBuffers, GLint *numBuffers, const char* file, int line);
#define glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) glatter_glExtGetFramebuffersQCOM_debug((framebuffers), (maxFramebuffers), (numFramebuffers), __FILE__, __LINE__)
void glatter_glExtGetFramebuffersQCOM_debug(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers, const char* file, int line);
#define glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) glatter_glExtGetRenderbuffersQCOM_debug((renderbuffers), (maxRenderbuffers), (numRenderbuffers), __FILE__, __LINE__)
void glatter_glExtGetRenderbuffersQCOM_debug(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers, const char* file, int line);
#define glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) glatter_glExtGetTexLevelParameterivQCOM_debug((texture), (face), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glExtGetTexLevelParameterivQCOM_debug(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels) glatter_glExtGetTexSubImageQCOM_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (texels), __FILE__, __LINE__)
void glatter_glExtGetTexSubImageQCOM_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels, const char* file, int line);
#define glExtGetTexturesQCOM(textures, maxTextures, numTextures) glatter_glExtGetTexturesQCOM_debug((textures), (maxTextures), (numTextures), __FILE__, __LINE__)
void glatter_glExtGetTexturesQCOM_debug(GLuint *textures, GLint maxTextures, GLint *numTextures, const char* file, int line);
#define glExtTexObjectStateOverrideiQCOM(target, pname, param) glatter_glExtTexObjectStateOverrideiQCOM_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glExtTexObjectStateOverrideiQCOM_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
#define glExtGetProgramBinarySourceQCOM(program, shadertype, source, length) glatter_glExtGetProgramBinarySourceQCOM_debug((program), (shadertype), (source), (length), __FILE__, __LINE__)
void glatter_glExtGetProgramBinarySourceQCOM_debug(GLuint program, GLenum shadertype, GLchar *source, GLint *length, const char* file, int line);
#define glExtGetProgramsQCOM(programs, maxPrograms, numPrograms) glatter_glExtGetProgramsQCOM_debug((programs), (maxPrograms), (numPrograms), __FILE__, __LINE__)
void glatter_glExtGetProgramsQCOM_debug(GLuint *programs, GLint maxPrograms, GLint *numPrograms, const char* file, int line);
#define glExtGetShadersQCOM(shaders, maxShaders, numShaders) glatter_glExtGetShadersQCOM_debug((shaders), (maxShaders), (numShaders), __FILE__, __LINE__)
void glatter_glExtGetShadersQCOM_debug(GLuint *shaders, GLint maxShaders, GLint *numShaders, const char* file, int line);
#define glExtIsProgramBinaryQCOM(program) glatter_glExtIsProgramBinaryQCOM_debug((program), __FILE__, __LINE__)
GLboolean glatter_glExtIsProgramBinaryQCOM_debug(GLuint program, const char* file, int line);
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_tiled_rendering)
#define glEndTilingQCOM(preserveMask) glatter_glEndTilingQCOM_debug((preserveMask), __FILE__, __LINE__)
void glatter_glEndTilingQCOM_debug(GLbitfield preserveMask, const char* file, int line);
#define glStartTilingQCOM(x, y, width, height, preserveMask) glatter_glStartTilingQCOM_debug((x), (y), (width), (height), (preserveMask), __FILE__, __LINE__)
void glatter_glStartTilingQCOM_debug(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask, const char* file, int line);
#endif // defined(GL_QCOM_tiled_rendering)
#endif // defined(__gl2ext_h_)
#if defined(__gl31_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_1)
#endif // defined(__gl31_h_)
#if defined(__gl32_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_1)
#if defined(GL_ES_VERSION_3_2)
#define glBlendBarrier() glatter_glBlendBarrier_debug(__FILE__, __LINE__)
void glatter_glBlendBarrier_debug(const char* file, int line);
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, void **params, const char* file, int line);
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroup_debug(const char* file, int line);
#define glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBox_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBox_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_2)
#endif // defined(__gl32_h_)
#if defined(__gl3_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#endif // defined(__gl3_h_)
#if defined(__gl_glcorearb_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glBeginPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glDeletePerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glEndPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glGenPerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_debug((monitor), (pname), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterDataAMD_debug(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, const char* file, int line);
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_debug((group), (counter), (pname), (data), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterInfoAMD_debug(GLuint group, GLuint counter, GLenum pname, void *data, const char* file, int line);
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_debug((group), (counter), (bufSize), (length), (counterString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterStringAMD_debug(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, const char* file, int line);
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_debug((group), (numCounters), (maxActiveCounters), (counterSize), (counters), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCountersAMD_debug(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, const char* file, int line);
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_debug((group), (bufSize), (length), (groupString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupStringAMD_debug(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, const char* file, int line);
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_debug((numGroups), (groupsSize), (groups), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupsAMD_debug(GLint *numGroups, GLsizei groupsSize, GLuint *groups, const char* file, int line);
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_debug((monitor), (enable), (group), (numCounters), (counterList), __FILE__, __LINE__)
void glatter_glSelectPerfMonitorCountersAMD_debug(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, const char* file, int line);
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ARB_ES3_2_compatibility)
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxARB_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBoxARB_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_ARB_ES3_2_compatibility)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleARB_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleARB_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleARB_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vARB_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentARB_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64ARB_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64ARB_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64ARB_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vARB_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB_debug((context), (event), (flags), __FILE__, __LINE__)
GLsync glatter_glCreateSyncFromCLeventARB_debug(struct _cl_context *context, struct _cl_event *event, GLbitfield flags, const char* file, int line);
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB_debug((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z), __FILE__, __LINE__)
void glatter_glDispatchComputeGroupSizeARB_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z, const char* file, int line);
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackARB_debug(GLDEBUGPROCARB callback, const void *userParam, const char* file, int line);
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControlARB_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertARB_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogARB_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiARB_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiARB_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiARB_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciARB_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_draw_instanced)
#define glDrawArraysInstancedARB(mode, first, count, primcount) glatter_glDrawArraysInstancedARB_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedARB_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedARB_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedARB_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_ARB_draw_instanced)
#if defined(GL_ARB_geometry_shader4)
#define glFramebufferTextureARB(target, attachment, texture, level) glatter_glFramebufferTextureARB_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceARB_debug((target), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glFramebufferTextureFaceARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerARB_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayerARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glProgramParameteriARB(program, pname, value) glatter_glProgramParameteriARB_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteriARB_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_ARB_geometry_shader4)
#if defined(GL_ARB_gl_spirv)
#define glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShaderARB_debug((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue), __FILE__, __LINE__)
void glatter_glSpecializeShaderARB_debug(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue, const char* file, int line);
#endif // defined(GL_ARB_gl_spirv)
#if defined(GL_ARB_gpu_shader_int64)
#define glGetUniformi64vARB(program, location, params) glatter_glGetUniformi64vARB_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vARB_debug(GLuint program, GLint location, GLint64 *params, const char* file, int line);
#define glGetUniformui64vARB(program, location, params) glatter_glGetUniformui64vARB_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformui64vARB_debug(GLuint program, GLint location, GLuint64 *params, const char* file, int line);
#define glGetnUniformi64vARB(program, location, bufSize, params) glatter_glGetnUniformi64vARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformi64vARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetnUniformui64vARB(program, location, bufSize, params) glatter_glGetnUniformui64vARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformui64vARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params, const char* file, int line);
#define glProgramUniform1i64ARB(program, location, x) glatter_glProgramUniform1i64ARB_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64ARB_debug(GLuint program, GLint location, GLint64 x, const char* file, int line);
#define glProgramUniform1i64vARB(program, location, count, value) glatter_glProgramUniform1i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform1ui64ARB(program, location, x) glatter_glProgramUniform1ui64ARB_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64ARB_debug(GLuint program, GLint location, GLuint64 x, const char* file, int line);
#define glProgramUniform1ui64vARB(program, location, count, value) glatter_glProgramUniform1ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform2i64ARB(program, location, x, y) glatter_glProgramUniform2i64ARB_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, const char* file, int line);
#define glProgramUniform2i64vARB(program, location, count, value) glatter_glProgramUniform2i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform2ui64ARB(program, location, x, y) glatter_glProgramUniform2ui64ARB_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, const char* file, int line);
#define glProgramUniform2ui64vARB(program, location, count, value) glatter_glProgramUniform2ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform3i64ARB(program, location, x, y, z) glatter_glProgramUniform3i64ARB_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, const char* file, int line);
#define glProgramUniform3i64vARB(program, location, count, value) glatter_glProgramUniform3i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform3ui64ARB(program, location, x, y, z) glatter_glProgramUniform3ui64ARB_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, const char* file, int line);
#define glProgramUniform3ui64vARB(program, location, count, value) glatter_glProgramUniform3ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform4i64ARB(program, location, x, y, z, w) glatter_glProgramUniform4i64ARB_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, const char* file, int line);
#define glProgramUniform4i64vARB(program, location, count, value) glatter_glProgramUniform4i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) glatter_glProgramUniform4ui64ARB_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, const char* file, int line);
#define glProgramUniform4ui64vARB(program, location, count, value) glatter_glProgramUniform4ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform1i64ARB(location, x) glatter_glUniform1i64ARB_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64ARB_debug(GLint location, GLint64 x, const char* file, int line);
#define glUniform1i64vARB(location, count, value) glatter_glUniform1i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform1ui64ARB(location, x) glatter_glUniform1ui64ARB_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64ARB_debug(GLint location, GLuint64 x, const char* file, int line);
#define glUniform1ui64vARB(location, count, value) glatter_glUniform1ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform2i64ARB(location, x, y) glatter_glUniform2i64ARB_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64ARB_debug(GLint location, GLint64 x, GLint64 y, const char* file, int line);
#define glUniform2i64vARB(location, count, value) glatter_glUniform2i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform2ui64ARB(location, x, y) glatter_glUniform2ui64ARB_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, const char* file, int line);
#define glUniform2ui64vARB(location, count, value) glatter_glUniform2ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform3i64ARB(location, x, y, z) glatter_glUniform3i64ARB_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64ARB_debug(GLint location, GLint64 x, GLint64 y, GLint64 z, const char* file, int line);
#define glUniform3i64vARB(location, count, value) glatter_glUniform3i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform3ui64ARB(location, x, y, z) glatter_glUniform3ui64ARB_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, const char* file, int line);
#define glUniform3ui64vARB(location, count, value) glatter_glUniform3ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform4i64ARB(location, x, y, z, w) glatter_glUniform4i64ARB_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64ARB_debug(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, const char* file, int line);
#define glUniform4i64vARB(location, count, value) glatter_glUniform4i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform4ui64ARB(location, x, y, z, w) glatter_glUniform4ui64ARB_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, const char* file, int line);
#define glUniform4ui64vARB(location, count, value) glatter_glUniform4ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_ARB_gpu_shader_int64)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB_debug((mode), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectCountARB_debug(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB_debug((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectCountARB_debug(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_instanced_arrays)
#define glVertexAttribDivisorARB(index, divisor) glatter_glVertexAttribDivisorARB_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorARB_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_ARB_instanced_arrays)
#if defined(GL_ARB_parallel_shader_compile)
#define glMaxShaderCompilerThreadsARB(count) glatter_glMaxShaderCompilerThreadsARB_debug((count), __FILE__, __LINE__)
void glatter_glMaxShaderCompilerThreadsARB_debug(GLuint count, const char* file, int line);
#endif // defined(GL_ARB_parallel_shader_compile)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusARB_debug(const char* file, int line);
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB_debug((target), (lod), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImageARB_debug(GLenum target, GLint lod, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB_debug((target), (level), (format), (type), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnTexImageARB_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsARB_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_locations)
#define glEvaluateDepthValuesARB() glatter_glEvaluateDepthValuesARB_debug(__FILE__, __LINE__)
void glatter_glEvaluateDepthValuesARB_debug(const char* file, int line);
#define glFramebufferSampleLocationsfvARB(target, start, count, v) glatter_glFramebufferSampleLocationsfvARB_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvARB_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvARB_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvARB_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#endif // defined(GL_ARB_sample_locations)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShadingARB_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB_debug((shader), (count), (path), (length), __FILE__, __LINE__)
void glatter_glCompileShaderIncludeARB_debug(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length, const char* file, int line);
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
void glatter_glDeleteNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB_debug((namelen), (name), (bufSize), (stringlen), (string), __FILE__, __LINE__)
void glatter_glGetNamedStringARB_debug(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string, const char* file, int line);
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB_debug((namelen), (name), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedStringivARB_debug(GLint namelen, const GLchar *name, GLenum pname, GLint *params, const char* file, int line);
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
GLboolean glatter_glIsNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB_debug((type), (namelen), (name), (stringlen), (string), __FILE__, __LINE__)
void glatter_glNamedStringARB_debug(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string, const char* file, int line);
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB_debug((target), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glBufferPageCommitmentARB_debug(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentARB_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentARB_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexPageCommitmentARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_ARB_texture_buffer_object)
#define glTexBufferARB(target, internalformat, buffer) glatter_glTexBufferARB_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferARB_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#endif // defined(GL_ARB_texture_buffer_object)
#if defined(GL_EXT_EGL_image_storage)
#define glEGLImageTargetTexStorageEXT(target, image, attrib_list) glatter_glEGLImageTargetTexStorageEXT_debug((target), (image), (attrib_list), __FILE__, __LINE__)
void glatter_glEGLImageTargetTexStorageEXT_debug(GLenum target, GLeglImageOES image, const GLint* attrib_list, const char* file, int line);
#define glEGLImageTargetTextureStorageEXT(texture, image, attrib_list) glatter_glEGLImageTargetTextureStorageEXT_debug((texture), (image), (attrib_list), __FILE__, __LINE__)
void glatter_glEGLImageTargetTextureStorageEXT_debug(GLuint texture, GLeglImageOES image, const GLint* attrib_list, const char* file, int line);
#endif // defined(GL_EXT_EGL_image_storage)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_debug((type), (object), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelEXT_debug(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_debug((type), (object), (length), (label), __FILE__, __LINE__)
void glatter_glLabelObjectEXT_debug(GLenum type, GLuint object, GLsizei length, const GLchar *label, const char* file, int line);
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_direct_state_access)
#define glBindMultiTextureEXT(texunit, target, texture) glatter_glBindMultiTextureEXT_debug((texunit), (target), (texture), __FILE__, __LINE__)
void glatter_glBindMultiTextureEXT_debug(GLenum texunit, GLenum target, GLuint texture, const char* file, int line);
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) glatter_glCheckNamedFramebufferStatusEXT_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatusEXT_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) glatter_glClearNamedBufferDataEXT_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferDataEXT_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubDataEXT_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubDataEXT_debug(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClientAttribDefaultEXT(mask) glatter_glClientAttribDefaultEXT_debug((mask), __FILE__, __LINE__)
void glatter_glClientAttribDefaultEXT_debug(GLbitfield mask, const char* file, int line);
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (width), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedMultiTexImage3DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (width), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (width), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedTextureImage3DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (width), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) glatter_glCopyMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) glatter_glCopyMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) glatter_glCopyMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) glatter_glCopyTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) glatter_glCopyTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDisableClientStateIndexedEXT(array, index) glatter_glDisableClientStateIndexedEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glDisableClientStateIndexedEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glDisableClientStateiEXT(array, index) glatter_glDisableClientStateiEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glDisableClientStateiEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glDisableIndexedEXT(target, index) glatter_glDisableIndexedEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glDisableVertexArrayAttribEXT(vaobj, index) glatter_glDisableVertexArrayAttribEXT_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttribEXT_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glDisableVertexArrayEXT(vaobj, array) glatter_glDisableVertexArrayEXT_debug((vaobj), (array), __FILE__, __LINE__)
void glatter_glDisableVertexArrayEXT_debug(GLuint vaobj, GLenum array, const char* file, int line);
#define glEnableClientStateIndexedEXT(array, index) glatter_glEnableClientStateIndexedEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glEnableClientStateIndexedEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glEnableClientStateiEXT(array, index) glatter_glEnableClientStateiEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glEnableClientStateiEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glEnableIndexedEXT(target, index) glatter_glEnableIndexedEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttribEXT(vaobj, index) glatter_glEnableVertexArrayAttribEXT_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttribEXT_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayEXT(vaobj, array) glatter_glEnableVertexArrayEXT_debug((vaobj), (array), __FILE__, __LINE__)
void glatter_glEnableVertexArrayEXT_debug(GLuint vaobj, GLenum array, const char* file, int line);
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) glatter_glFlushMappedNamedBufferRangeEXT_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRangeEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferDrawBufferEXT(framebuffer, mode) glatter_glFramebufferDrawBufferEXT_debug((framebuffer), (mode), __FILE__, __LINE__)
void glatter_glFramebufferDrawBufferEXT_debug(GLuint framebuffer, GLenum mode, const char* file, int line);
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) glatter_glFramebufferDrawBuffersEXT_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glFramebufferDrawBuffersEXT_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glFramebufferReadBufferEXT(framebuffer, mode) glatter_glFramebufferReadBufferEXT_debug((framebuffer), (mode), __FILE__, __LINE__)
void glatter_glFramebufferReadBufferEXT_debug(GLuint framebuffer, GLenum mode, const char* file, int line);
#define glGenerateMultiTexMipmapEXT(texunit, target) glatter_glGenerateMultiTexMipmapEXT_debug((texunit), (target), __FILE__, __LINE__)
void glatter_glGenerateMultiTexMipmapEXT_debug(GLenum texunit, GLenum target, const char* file, int line);
#define glGenerateTextureMipmapEXT(texture, target) glatter_glGenerateTextureMipmapEXT_debug((texture), (target), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmapEXT_debug(GLuint texture, GLenum target, const char* file, int line);
#define glGetBooleanIndexedvEXT(target, index, data) glatter_glGetBooleanIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleanIndexedvEXT_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) glatter_glGetCompressedMultiTexImageEXT_debug((texunit), (target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedMultiTexImageEXT_debug(GLenum texunit, GLenum target, GLint lod, void *img, const char* file, int line);
#define glGetCompressedTextureImageEXT(texture, target, lod, img) glatter_glGetCompressedTextureImageEXT_debug((texture), (target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImageEXT_debug(GLuint texture, GLenum target, GLint lod, void *img, const char* file, int line);
#define glGetDoubleIndexedvEXT(target, index, data) glatter_glGetDoubleIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoubleIndexedvEXT_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetDoublei_vEXT(pname, index, params) glatter_glGetDoublei_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetDoublei_vEXT_debug(GLenum pname, GLuint index, GLdouble *params, const char* file, int line);
#define glGetFloatIndexedvEXT(target, index, data) glatter_glGetFloatIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloatIndexedvEXT_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetFloati_vEXT(pname, index, params) glatter_glGetFloati_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetFloati_vEXT_debug(GLenum pname, GLuint index, GLfloat *params, const char* file, int line);
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetFramebufferParameterivEXT_debug((framebuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameterivEXT_debug(GLuint framebuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerIndexedvEXT(target, index, data) glatter_glGetIntegerIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegerIndexedvEXT_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexEnvfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexEnvivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGendvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGendvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenfvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGenfvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenivEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGenivEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) glatter_glGetMultiTexImageEXT_debug((texunit), (target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetMultiTexImageEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterfvEXT_debug((texunit), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexLevelParameterfvEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterivEXT_debug((texunit), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexLevelParameterivEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterIivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIuivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterIuivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferParameterivEXT(buffer, pname, params) glatter_glGetNamedBufferParameterivEXT_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameterivEXT_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointervEXT(buffer, pname, params) glatter_glGetNamedBufferPointervEXT_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointervEXT_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glGetNamedBufferSubDataEXT_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubDataEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameterivEXT_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameterivEXT_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetNamedFramebufferParameterivEXT_debug((framebuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameterivEXT_debug(GLuint framebuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterIivEXT_debug(GLuint program, GLenum target, GLuint index, GLint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIuivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterIuivEXT_debug(GLuint program, GLenum target, GLuint index, GLuint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterdvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterdvEXT_debug(GLuint program, GLenum target, GLuint index, GLdouble *params, const char* file, int line);
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterfvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterfvEXT_debug(GLuint program, GLenum target, GLuint index, GLfloat *params, const char* file, int line);
#define glGetNamedProgramStringEXT(program, target, pname, string) glatter_glGetNamedProgramStringEXT_debug((program), (target), (pname), (string), __FILE__, __LINE__)
void glatter_glGetNamedProgramStringEXT_debug(GLuint program, GLenum target, GLenum pname, void *string, const char* file, int line);
#define glGetNamedProgramivEXT(program, target, pname, params) glatter_glGetNamedProgramivEXT_debug((program), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramivEXT_debug(GLuint program, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameterivEXT_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameterivEXT_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetPointerIndexedvEXT(target, index, data) glatter_glGetPointerIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetPointerIndexedvEXT_debug(GLenum target, GLuint index, void **data, const char* file, int line);
#define glGetPointeri_vEXT(pname, index, params) glatter_glGetPointeri_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetPointeri_vEXT_debug(GLenum pname, GLuint index, void **params, const char* file, int line);
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) glatter_glGetTextureImageEXT_debug((texture), (target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImageEXT_debug(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterfvEXT_debug((texture), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfvEXT_debug(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterivEXT_debug((texture), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterivEXT_debug(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIivEXT(texture, target, pname, params) glatter_glGetTextureParameterIivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuivEXT(texture, target, pname, params) glatter_glGetTextureParameterIuivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfvEXT(texture, target, pname, params) glatter_glGetTextureParameterfvEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfvEXT_debug(GLuint texture, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameterivEXT(texture, target, pname, params) glatter_glGetTextureParameterivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayIntegeri_vEXT_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIntegeri_vEXT_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) glatter_glGetVertexArrayIntegervEXT_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIntegervEXT_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayPointeri_vEXT_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayPointeri_vEXT_debug(GLuint vaobj, GLuint index, GLenum pname, void **param, const char* file, int line);
#define glGetVertexArrayPointervEXT(vaobj, pname, param) glatter_glGetVertexArrayPointervEXT_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayPointervEXT_debug(GLuint vaobj, GLenum pname, void **param, const char* file, int line);
#define glIsEnabledIndexedEXT(target, index) glatter_glIsEnabledIndexedEXT_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glMapNamedBufferEXT(buffer, access) glatter_glMapNamedBufferEXT_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferEXT_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) glatter_glMapNamedBufferRangeEXT_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRangeEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glMatrixFrustumEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixLoadIdentityEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoaddEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultdEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glMatrixOrthoEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixPopEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixPushEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixRotatedEXT_debug(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixRotatefEXT_debug(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixScaledEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixScalefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixTranslatedEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixTranslatefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) glatter_glMultiTexBufferEXT_debug((texunit), (target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glMultiTexBufferEXT_debug(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) glatter_glMultiTexCoordPointerEXT_debug((texunit), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glMultiTexCoordPointerEXT_debug(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glMultiTexEnvfEXT(texunit, target, pname, param) glatter_glMultiTexEnvfEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexEnvfEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glMultiTexEnvfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexEnvfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexEnviEXT(texunit, target, pname, param) glatter_glMultiTexEnviEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexEnviEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexEnvivEXT(texunit, target, pname, params) glatter_glMultiTexEnvivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexEnvivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexGendEXT(texunit, coord, pname, param) glatter_glMultiTexGendEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGendEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLdouble param, const char* file, int line);
#define glMultiTexGendvEXT(texunit, coord, pname, params) glatter_glMultiTexGendvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGendvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params, const char* file, int line);
#define glMultiTexGenfEXT(texunit, coord, pname, param) glatter_glMultiTexGenfEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGenfEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glMultiTexGenfvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGenfvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexGeniEXT(texunit, coord, pname, param) glatter_glMultiTexGeniEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGeniEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexGenivEXT(texunit, coord, pname, params) glatter_glMultiTexGenivEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGenivEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) glatter_glMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) glatter_glMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glMultiTexImage3DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterIivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIuivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterIuivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glMultiTexParameterfEXT(texunit, target, pname, param) glatter_glMultiTexParameterfEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexParameterfEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glMultiTexParameterfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexParameteriEXT(texunit, target, pname, param) glatter_glMultiTexParameteriEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexParameteriEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexParameterivEXT(texunit, target, pname, params) glatter_glMultiTexParameterivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) glatter_glMultiTexRenderbufferEXT_debug((texunit), (target), (renderbuffer), __FILE__, __LINE__)
void glatter_glMultiTexRenderbufferEXT_debug(GLenum texunit, GLenum target, GLuint renderbuffer, const char* file, int line);
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) glatter_glMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glNamedBufferDataEXT(buffer, size, data, usage) glatter_glNamedBufferDataEXT_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferDataEXT_debug(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorageEXT(buffer, size, data, flags) glatter_glNamedBufferStorageEXT_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorageEXT_debug(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glNamedBufferSubDataEXT_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubDataEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glNamedCopyBufferSubDataEXT_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glNamedCopyBufferSubDataEXT_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) glatter_glNamedFramebufferParameteriEXT_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteriEXT_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbufferEXT_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbufferEXT_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture1DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture1DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture2DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture2DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) glatter_glNamedFramebufferTexture3DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture3DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTextureEXT_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) glatter_glNamedFramebufferTextureFaceEXT_debug((framebuffer), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureFaceEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayerEXT_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayerEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4dEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4dEXT_debug(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4dvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4dvEXT_debug(GLuint program, GLenum target, GLuint index, const GLdouble *params, const char* file, int line);
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4fEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4fEXT_debug(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4fvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4fvEXT_debug(GLuint program, GLenum target, GLuint index, const GLfloat *params, const char* file, int line);
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4iEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4iEXT_debug(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4ivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4ivEXT_debug(GLuint program, GLenum target, GLuint index, const GLint *params, const char* file, int line);
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4uiEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4uiEXT_debug(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4uivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4uivEXT_debug(GLuint program, GLenum target, GLuint index, const GLuint *params, const char* file, int line);
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) glatter_glNamedProgramLocalParameters4fvEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameters4fvEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params, const char* file, int line);
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4ivEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParametersI4ivEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params, const char* file, int line);
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4uivEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParametersI4uivEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params, const char* file, int line);
#define glNamedProgramStringEXT(program, target, format, len, string) glatter_glNamedProgramStringEXT_debug((program), (target), (format), (len), (string), __FILE__, __LINE__)
void glatter_glNamedProgramStringEXT_debug(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string, const char* file, int line);
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorageEXT_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageEXT_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleCoverageEXT_debug((renderbuffer), (coverageSamples), (colorSamples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisampleCoverageEXT_debug(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleEXT_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisampleEXT_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glProgramUniform1dEXT(program, location, x) glatter_glProgramUniform1dEXT_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1dEXT_debug(GLuint program, GLint location, GLdouble x, const char* file, int line);
#define glProgramUniform1dvEXT(program, location, count, value) glatter_glProgramUniform1dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1fEXT_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1iEXT_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1uiEXT_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2dEXT(program, location, x, y) glatter_glProgramUniform2dEXT_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glProgramUniform2dvEXT(program, location, count, value) glatter_glProgramUniform2dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3dEXT(program, location, x, y, z) glatter_glProgramUniform3dEXT_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glProgramUniform3dvEXT(program, location, count, value) glatter_glProgramUniform3dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4dEXT(program, location, x, y, z, w) glatter_glProgramUniform4dEXT_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramUniform4dvEXT(program, location, count, value) glatter_glProgramUniform4dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glPushClientAttribDefaultEXT(mask) glatter_glPushClientAttribDefaultEXT_debug((mask), __FILE__, __LINE__)
void glatter_glPushClientAttribDefaultEXT_debug(GLbitfield mask, const char* file, int line);
#define glTextureBufferEXT(texture, target, internalformat, buffer) glatter_glTextureBufferEXT_debug((texture), (target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBufferEXT_debug(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) glatter_glTextureBufferRangeEXT_debug((texture), (target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRangeEXT_debug(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) glatter_glTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) glatter_glTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTextureImage3DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexturePageCommitmentEXT_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexturePageCommitmentEXT_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#define glTextureParameterIivEXT(texture, target, pname, params) glatter_glTextureParameterIivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuivEXT(texture, target, pname, params) glatter_glTextureParameterIuivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterfEXT(texture, target, pname, param) glatter_glTextureParameterfEXT_debug((texture), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfEXT_debug(GLuint texture, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfvEXT(texture, target, pname, params) glatter_glTextureParameterfvEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterfvEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTextureParameteriEXT(texture, target, pname, param) glatter_glTextureParameteriEXT_debug((texture), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameterivEXT(texture, target, pname, params) glatter_glTextureParameterivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureRenderbufferEXT(texture, target, renderbuffer) glatter_glTextureRenderbufferEXT_debug((texture), (target), (renderbuffer), __FILE__, __LINE__)
void glatter_glTextureRenderbufferEXT_debug(GLuint texture, GLenum target, GLuint renderbuffer, const char* file, int line);
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_debug((texture), (target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisampleEXT_debug((texture), (target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisampleEXT_debug(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisampleEXT_debug((texture), (target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisampleEXT_debug(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUnmapNamedBufferEXT(buffer) glatter_glUnmapNamedBufferEXT_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBufferEXT_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayBindVertexBufferEXT_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayBindVertexBufferEXT_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayColorOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayColorOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) glatter_glVertexArrayEdgeFlagOffsetEXT_debug((vaobj), (buffer), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayEdgeFlagOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayFogCoordOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayFogCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayIndexOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayIndexOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) glatter_glVertexArrayMultiTexCoordOffsetEXT_debug((vaobj), (buffer), (texunit), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayMultiTexCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayNormalOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayNormalOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArraySecondaryColorOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArraySecondaryColorOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayTexCoordOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayTexCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) glatter_glVertexArrayVertexAttribBindingEXT_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribBindingEXT_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) glatter_glVertexArrayVertexAttribDivisorEXT_debug((vaobj), (index), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribDivisorEXT_debug(GLuint vaobj, GLuint index, GLuint divisor, const char* file, int line);
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayVertexAttribFormatEXT_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribIFormatEXT_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribIFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribIOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribIOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribLFormatEXT_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribLFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribLOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribLOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) glatter_glVertexArrayVertexAttribOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (normalized), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) glatter_glVertexArrayVertexBindingDivisorEXT_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBindingDivisorEXT_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayVertexOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#endif // defined(GL_EXT_direct_state_access)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_debug((mode), (start), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedEXT_debug(GLenum mode, GLint start, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClampEXT_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_debug((samples), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glRasterSamplesEXT_debug(GLuint samples, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT_debug((program), __FILE__, __LINE__)
void glatter_glActiveProgramEXT_debug(GLuint program, const char* file, int line);
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT_debug((type), (string), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramEXT_debug(GLenum type, const GLchar *string, const char* file, int line);
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT_debug((type), (program), __FILE__, __LINE__)
void glatter_glUseShaderProgramEXT_debug(GLenum type, GLuint program, const char* file, int line);
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#define glFramebufferFetchBarrierEXT() glatter_glFramebufferFetchBarrierEXT_debug(__FILE__, __LINE__)
void glatter_glFramebufferFetchBarrierEXT_debug(const char* file, int line);
#endif // defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_debug((mode), (count), (box), __FILE__, __LINE__)
void glatter_glWindowRectanglesEXT_debug(GLenum mode, GLsizei count, const GLint *box, const char* file, int line);
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(__FILE__, __LINE__)
void glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(const char* file, int line);
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glBeginPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_debug((queryId), (queryHandle), __FILE__, __LINE__)
void glatter_glCreatePerfQueryINTEL_debug(GLuint queryId, GLuint *queryHandle, const char* file, int line);
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glDeletePerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glEndPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_debug((queryId), __FILE__, __LINE__)
void glatter_glGetFirstPerfQueryIdINTEL_debug(GLuint *queryId, const char* file, int line);
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_debug((queryId), (nextQueryId), __FILE__, __LINE__)
void glatter_glGetNextPerfQueryIdINTEL_debug(GLuint queryId, GLuint *nextQueryId, const char* file, int line);
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_debug((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue), __FILE__, __LINE__)
void glatter_glGetPerfCounterInfoINTEL_debug(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, const char* file, int line);
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_debug((queryHandle), (flags), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfQueryDataINTEL_debug(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten, const char* file, int line);
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_debug((queryName), (queryId), __FILE__, __LINE__)
void glatter_glGetPerfQueryIdByNameINTEL_debug(GLchar *queryName, GLuint *queryId, const char* file, int line);
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_debug((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask), __FILE__, __LINE__)
void glatter_glGetPerfQueryInfoINTEL_debug(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, const char* file, int line);
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierKHR_debug(const char* file, int line);
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_parallel_shader_compile)
#define glMaxShaderCompilerThreadsKHR(count) glatter_glMaxShaderCompilerThreadsKHR_debug((count), __FILE__, __LINE__)
void glatter_glMaxShaderCompilerThreadsKHR_debug(GLuint count, const char* file, int line);
#endif // defined(GL_KHR_parallel_shader_compile)
#if defined(GL_NV_bindless_multi_draw_indirect)
#define glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessNV_debug((mode), (indirect), (drawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectBindlessNV_debug(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#define glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessNV_debug((mode), (type), (indirect), (drawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectBindlessNV_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#endif // defined(GL_NV_bindless_multi_draw_indirect)
#if defined(GL_NV_bindless_multi_draw_indirect_count)
#define glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessCountNV_debug((mode), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectBindlessCountNV_debug(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#define glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessCountNV_debug((mode), (type), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectBindlessCountNV_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#endif // defined(GL_NV_bindless_multi_draw_indirect_count)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleNV_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleNV_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleNV_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentNV_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64NV_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64NV_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vNV_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierNV_debug(const char* file, int line);
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glBlendParameteriNV_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV_debug((index), (xcoeff), (ycoeff), __FILE__, __LINE__)
void glatter_glViewportPositionWScaleNV_debug(GLuint index, GLfloat xcoeff, GLfloat ycoeff, const char* file, int line);
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_command_list)
#define glCallCommandListNV(list) glatter_glCallCommandListNV_debug((list), __FILE__, __LINE__)
void glatter_glCallCommandListNV_debug(GLuint list, const char* file, int line);
#define glCommandListSegmentsNV(list, segments) glatter_glCommandListSegmentsNV_debug((list), (segments), __FILE__, __LINE__)
void glatter_glCommandListSegmentsNV_debug(GLuint list, GLuint segments, const char* file, int line);
#define glCompileCommandListNV(list) glatter_glCompileCommandListNV_debug((list), __FILE__, __LINE__)
void glatter_glCompileCommandListNV_debug(GLuint list, const char* file, int line);
#define glCreateCommandListsNV(n, lists) glatter_glCreateCommandListsNV_debug((n), (lists), __FILE__, __LINE__)
void glatter_glCreateCommandListsNV_debug(GLsizei n, GLuint *lists, const char* file, int line);
#define glCreateStatesNV(n, states) glatter_glCreateStatesNV_debug((n), (states), __FILE__, __LINE__)
void glatter_glCreateStatesNV_debug(GLsizei n, GLuint *states, const char* file, int line);
#define glDeleteCommandListsNV(n, lists) glatter_glDeleteCommandListsNV_debug((n), (lists), __FILE__, __LINE__)
void glatter_glDeleteCommandListsNV_debug(GLsizei n, const GLuint *lists, const char* file, int line);
#define glDeleteStatesNV(n, states) glatter_glDeleteStatesNV_debug((n), (states), __FILE__, __LINE__)
void glatter_glDeleteStatesNV_debug(GLsizei n, const GLuint *states, const char* file, int line);
#define glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count) glatter_glDrawCommandsAddressNV_debug((primitiveMode), (indirects), (sizes), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsAddressNV_debug(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count, const char* file, int line);
#define glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count) glatter_glDrawCommandsNV_debug((primitiveMode), (buffer), (indirects), (sizes), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsNV_debug(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count, const char* file, int line);
#define glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesAddressNV_debug((indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsStatesAddressNV_debug(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesNV_debug((buffer), (indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsStatesNV_debug(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glGetCommandHeaderNV(tokenID, size) glatter_glGetCommandHeaderNV_debug((tokenID), (size), __FILE__, __LINE__)
GLuint glatter_glGetCommandHeaderNV_debug(GLenum tokenID, GLuint size, const char* file, int line);
#define glGetStageIndexNV(shadertype) glatter_glGetStageIndexNV_debug((shadertype), __FILE__, __LINE__)
GLushort glatter_glGetStageIndexNV_debug(GLenum shadertype, const char* file, int line);
#define glIsCommandListNV(list) glatter_glIsCommandListNV_debug((list), __FILE__, __LINE__)
GLboolean glatter_glIsCommandListNV_debug(GLuint list, const char* file, int line);
#define glIsStateNV(state) glatter_glIsStateNV_debug((state), __FILE__, __LINE__)
GLboolean glatter_glIsStateNV_debug(GLuint state, const char* file, int line);
#define glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count) glatter_glListDrawCommandsStatesClientNV_debug((list), (segment), (indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glListDrawCommandsStatesClientNV_debug(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glStateCaptureNV(state, mode) glatter_glStateCaptureNV_debug((state), (mode), __FILE__, __LINE__)
void glatter_glStateCaptureNV_debug(GLuint state, GLenum mode, const char* file, int line);
#endif // defined(GL_NV_command_list)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNV_debug(GLuint id, GLenum mode, const char* file, int line);
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNV_debug(const char* file, int line);
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_debug((xbits), (ybits), __FILE__, __LINE__)
void glatter_glSubpixelPrecisionBiasNV_debug(GLuint xbits, GLuint ybits, const char* file, int line);
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_dilate)
#define glConservativeRasterParameterfNV(pname, value) glatter_glConservativeRasterParameterfNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glConservativeRasterParameterfNV_debug(GLenum pname, GLfloat value, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_dilate)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glConservativeRasterParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_draw_vulkan_image)
#define glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawVkImageNV_debug((vkImage), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1), __FILE__, __LINE__)
void glatter_glDrawVkImageNV_debug(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1, const char* file, int line);
#define glGetVkProcAddrNV(name) glatter_glGetVkProcAddrNV_debug((name), __FILE__, __LINE__)
GLVULKANPROCNV glatter_glGetVkProcAddrNV_debug(const GLchar *name, const char* file, int line);
#define glSignalVkFenceNV(vkFence) glatter_glSignalVkFenceNV_debug((vkFence), __FILE__, __LINE__)
void glatter_glSignalVkFenceNV_debug(GLuint64 vkFence, const char* file, int line);
#define glSignalVkSemaphoreNV(vkSemaphore) glatter_glSignalVkSemaphoreNV_debug((vkSemaphore), __FILE__, __LINE__)
void glatter_glSignalVkSemaphoreNV_debug(GLuint64 vkSemaphore, const char* file, int line);
#define glWaitVkSemaphoreNV(vkSemaphore) glatter_glWaitVkSemaphoreNV_debug((vkSemaphore), __FILE__, __LINE__)
void glatter_glWaitVkSemaphoreNV_debug(GLuint64 vkSemaphore, const char* file, int line);
#endif // defined(GL_NV_draw_vulkan_image)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_debug((color), __FILE__, __LINE__)
void glatter_glFragmentCoverageColorNV_debug(GLuint color, const char* file, int line);
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_debug((components), __FILE__, __LINE__)
void glatter_glCoverageModulationNV_debug(GLenum components, const char* file, int line);
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_debug((n), (v), __FILE__, __LINE__)
void glatter_glCoverageModulationTableNV_debug(GLsizei n, const GLfloat *v, const char* file, int line);
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_debug((bufsize), (v), __FILE__, __LINE__)
void glatter_glGetCoverageModulationTableNV_debug(GLsizei bufsize, GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample_coverage)
#define glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleCoverageNV_debug((target), (coverageSamples), (colorSamples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleCoverageNV_debug(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_NV_framebuffer_multisample_coverage)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vNV_debug(GLuint program, GLint location, GLint64EXT *params, const char* file, int line);
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64NV_debug(GLuint program, GLint location, GLint64EXT x, const char* file, int line);
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, const char* file, int line);
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64NV_debug(GLint location, GLint64EXT x, const char* file, int line);
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64NV_debug(GLint location, GLuint64EXT x, const char* file, int line);
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_debug((target), (internalformat), (samples), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformatSampleivNV_debug(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_debug((resultPath), (srcPath), __FILE__, __LINE__)
void glatter_glCopyPathNV_debug(GLuint resultPath, GLuint srcPath, const char* file, int line);
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverFillPathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverStrokePathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_debug((path), (range), __FILE__, __LINE__)
void glatter_glDeletePathsNV_debug(GLuint path, GLsizei range, const char* file, int line);
#define glGenPathsNV(range) glatter_glGenPathsNV_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenPathsNV_debug(GLsizei range, const char* file, int line);
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_debug((path), (commands), __FILE__, __LINE__)
void glatter_glGetPathCommandsNV_debug(GLuint path, GLubyte *commands, const char* file, int line);
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_debug((path), (coords), __FILE__, __LINE__)
void glatter_glGetPathCoordsNV_debug(GLuint path, GLfloat *coords, const char* file, int line);
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_debug((path), (dashArray), __FILE__, __LINE__)
void glatter_glGetPathDashArrayNV_debug(GLuint path, GLfloat *dashArray, const char* file, int line);
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_debug((path), (startSegment), (numSegments), __FILE__, __LINE__)
GLfloat glatter_glGetPathLengthNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, const char* file, int line);
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_debug((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricRangeNV_debug(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_debug((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricsNV_debug(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterfvNV_debug(GLuint path, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterivNV_debug(GLuint path, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_debug((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing), __FILE__, __LINE__)
void glatter_glGetPathSpacingNV_debug(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing, const char* file, int line);
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourcefvNV_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params, const char* file, int line);
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_debug((resultPath), (pathA), (pathB), (weight), __FILE__, __LINE__)
void glatter_glInterpolatePathsNV_debug(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, const char* file, int line);
#define glIsPathNV(path) glatter_glIsPathNV_debug((path), __FILE__, __LINE__)
GLboolean glatter_glIsPathNV_debug(GLuint path, const char* file, int line);
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_debug((path), (mask), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInFillPathNV_debug(GLuint path, GLuint mask, GLfloat x, GLfloat y, const char* file, int line);
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_debug((path), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInStrokePathNV_debug(GLuint path, GLfloat x, GLfloat y, const char* file, int line);
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_debug((path), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCommandsNV_debug(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_debug((path), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCoordsNV_debug(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_debug((func), __FILE__, __LINE__)
void glatter_glPathCoverDepthFuncNV_debug(GLenum func, const char* file, int line);
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_debug((path), (dashCount), (dashArray), __FILE__, __LINE__)
void glatter_glPathDashArrayNV_debug(GLuint path, GLsizei dashCount, const GLfloat *dashArray, const char* file, int line);
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_debug((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexRangeNV_debug(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2], const char* file, int line);
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphRangeNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphsNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathMemoryGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfNV_debug(GLuint path, GLenum pname, GLfloat value, const char* file, int line);
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfvNV_debug(GLuint path, GLenum pname, const GLfloat *value, const char* file, int line);
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameteriNV_debug(GLuint path, GLenum pname, GLint value, const char* file, int line);
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterivNV_debug(GLuint path, GLenum pname, const GLint *value, const char* file, int line);
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPathStencilDepthOffsetNV_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glPathStencilFuncNV_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_debug((path), (format), (length), (pathString), __FILE__, __LINE__)
void glatter_glPathStringNV_debug(GLuint path, GLenum format, GLsizei length, const void *pathString, const char* file, int line);
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_debug((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCommandsNV_debug(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_debug((path), (coordStart), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCoordsNV_debug(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_debug((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY), __FILE__, __LINE__)
GLboolean glatter_glPointAlongPathNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, const char* file, int line);
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_debug((program), (location), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glProgramPathFragmentInputGenNV_debug(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_debug((path), (fillMode), (mask), __FILE__, __LINE__)
void glatter_glStencilFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, const char* file, int line);
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_debug((path), (reference), (mask), __FILE__, __LINE__)
void glatter_glStencilStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, const char* file, int line);
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_debug((path), (fillMode), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, const char* file, int line);
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_debug((path), (reference), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, GLenum coverMode, const char* file, int line);
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_debug((resultPath), (srcPath), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glTransformPathNV_debug(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_debug((resultPath), (numPaths), (paths), (weights), __FILE__, __LINE__)
void glatter_glWeightPathsNV_debug(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvNV_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvNV_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_debug(__FILE__, __LINE__)
void glatter_glResolveDepthValuesNV_debug(const char* file, int line);
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_shader_buffer_load)
#define glGetBufferParameterui64vNV(target, pname, params) glatter_glGetBufferParameterui64vNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameterui64vNV_debug(GLenum target, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glGetIntegerui64vNV(value, result) glatter_glGetIntegerui64vNV_debug((value), (result), __FILE__, __LINE__)
void glatter_glGetIntegerui64vNV_debug(GLenum value, GLuint64EXT *result, const char* file, int line);
#define glGetNamedBufferParameterui64vNV(buffer, pname, params) glatter_glGetNamedBufferParameterui64vNV_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameterui64vNV_debug(GLuint buffer, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glGetUniformui64vNV(program, location, params) glatter_glGetUniformui64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformui64vNV_debug(GLuint program, GLint location, GLuint64EXT *params, const char* file, int line);
#define glIsBufferResidentNV(target) glatter_glIsBufferResidentNV_debug((target), __FILE__, __LINE__)
GLboolean glatter_glIsBufferResidentNV_debug(GLenum target, const char* file, int line);
#define glIsNamedBufferResidentNV(buffer) glatter_glIsNamedBufferResidentNV_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsNamedBufferResidentNV_debug(GLuint buffer, const char* file, int line);
#define glMakeBufferNonResidentNV(target) glatter_glMakeBufferNonResidentNV_debug((target), __FILE__, __LINE__)
void glatter_glMakeBufferNonResidentNV_debug(GLenum target, const char* file, int line);
#define glMakeBufferResidentNV(target, access) glatter_glMakeBufferResidentNV_debug((target), (access), __FILE__, __LINE__)
void glatter_glMakeBufferResidentNV_debug(GLenum target, GLenum access, const char* file, int line);
#define glMakeNamedBufferNonResidentNV(buffer) glatter_glMakeNamedBufferNonResidentNV_debug((buffer), __FILE__, __LINE__)
void glatter_glMakeNamedBufferNonResidentNV_debug(GLuint buffer, const char* file, int line);
#define glMakeNamedBufferResidentNV(buffer, access) glatter_glMakeNamedBufferResidentNV_debug((buffer), (access), __FILE__, __LINE__)
void glatter_glMakeNamedBufferResidentNV_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glProgramUniformui64NV(program, location, value) glatter_glProgramUniformui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformui64NV_debug(GLuint program, GLint location, GLuint64EXT value, const char* file, int line);
#define glProgramUniformui64vNV(program, location, count, value) glatter_glProgramUniformui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniformui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniformui64NV(location, value) glatter_glUniformui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformui64NV_debug(GLint location, GLuint64EXT value, const char* file, int line);
#define glUniformui64vNV(location, count, value) glatter_glUniformui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_shader_buffer_load)
#if defined(GL_NV_texture_barrier)
#define glTextureBarrierNV() glatter_glTextureBarrierNV_debug(__FILE__, __LINE__)
void glatter_glTextureBarrierNV_debug(const char* file, int line);
#endif // defined(GL_NV_texture_barrier)
#if defined(GL_NV_vertex_attrib_integer_64bit)
#define glGetVertexAttribLi64vNV(index, pname, params) glatter_glGetVertexAttribLi64vNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLi64vNV_debug(GLuint index, GLenum pname, GLint64EXT *params, const char* file, int line);
#define glGetVertexAttribLui64vNV(index, pname, params) glatter_glGetVertexAttribLui64vNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vNV_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glVertexAttribL1i64NV(index, x) glatter_glVertexAttribL1i64NV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1i64NV_debug(GLuint index, GLint64EXT x, const char* file, int line);
#define glVertexAttribL1i64vNV(index, v) glatter_glVertexAttribL1i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL1ui64NV(index, x) glatter_glVertexAttribL1ui64NV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64NV_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vNV(index, v) glatter_glVertexAttribL1ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL2i64NV(index, x, y) glatter_glVertexAttribL2i64NV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glVertexAttribL2i64vNV(index, v) glatter_glVertexAttribL2i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL2ui64NV(index, x, y) glatter_glVertexAttribL2ui64NV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glVertexAttribL2ui64vNV(index, v) glatter_glVertexAttribL2ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL3i64NV(index, x, y, z) glatter_glVertexAttribL3i64NV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glVertexAttribL3i64vNV(index, v) glatter_glVertexAttribL3i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL3ui64NV(index, x, y, z) glatter_glVertexAttribL3ui64NV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glVertexAttribL3ui64vNV(index, v) glatter_glVertexAttribL3ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL4i64NV(index, x, y, z, w) glatter_glVertexAttribL4i64NV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glVertexAttribL4i64vNV(index, v) glatter_glVertexAttribL4i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL4ui64NV(index, x, y, z, w) glatter_glVertexAttribL4ui64NV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glVertexAttribL4ui64vNV(index, v) glatter_glVertexAttribL4ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribLFormatNV(index, size, type, stride) glatter_glVertexAttribLFormatNV_debug((index), (size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribLFormatNV_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const char* file, int line);
#endif // defined(GL_NV_vertex_attrib_integer_64bit)
#if defined(GL_NV_vertex_buffer_unified_memory)
#define glBufferAddressRangeNV(pname, index, address, length) glatter_glBufferAddressRangeNV_debug((pname), (index), (address), (length), __FILE__, __LINE__)
void glatter_glBufferAddressRangeNV_debug(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length, const char* file, int line);
#define glColorFormatNV(size, type, stride) glatter_glColorFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glColorFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glEdgeFlagFormatNV(stride) glatter_glEdgeFlagFormatNV_debug((stride), __FILE__, __LINE__)
void glatter_glEdgeFlagFormatNV_debug(GLsizei stride, const char* file, int line);
#define glFogCoordFormatNV(type, stride) glatter_glFogCoordFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glFogCoordFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glGetIntegerui64i_vNV(value, index, result) glatter_glGetIntegerui64i_vNV_debug((value), (index), (result), __FILE__, __LINE__)
void glatter_glGetIntegerui64i_vNV_debug(GLenum value, GLuint index, GLuint64EXT *result, const char* file, int line);
#define glIndexFormatNV(type, stride) glatter_glIndexFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glIndexFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glNormalFormatNV(type, stride) glatter_glNormalFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glNormalFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glSecondaryColorFormatNV(size, type, stride) glatter_glSecondaryColorFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glSecondaryColorFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glTexCoordFormatNV(size, type, stride) glatter_glTexCoordFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glTexCoordFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glVertexAttribFormatNV(index, size, type, normalized, stride) glatter_glVertexAttribFormatNV_debug((index), (size), (type), (normalized), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribFormatNV_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const char* file, int line);
#define glVertexAttribIFormatNV(index, size, type, stride) glatter_glVertexAttribIFormatNV_debug((index), (size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribIFormatNV_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glVertexFormatNV(size, type, stride) glatter_glVertexFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#endif // defined(GL_NV_vertex_buffer_unified_memory)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_debug((index), (swizzlex), (swizzley), (swizzlez), (swizzlew), __FILE__, __LINE__)
void glatter_glViewportSwizzleNV_debug(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, const char* file, int line);
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_debug((target), (attachment), (texture), (level), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview)
#if defined(GL_VERSION_1_0)
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepth(depth) glatter_glClearDepth_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepth_debug(GLdouble depth, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRange(n, f) glatter_glDepthRange_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRange_debug(GLdouble n, GLdouble f, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDrawBuffer(buf) glatter_glDrawBuffer_debug((buf), __FILE__, __LINE__)
void glatter_glDrawBuffer_debug(GLenum buf, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetDoublev(pname, data) glatter_glGetDoublev_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetDoublev_debug(GLenum pname, GLdouble *data, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_debug((target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glPixelStoref(pname, param) glatter_glPixelStoref_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStoref_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPolygonMode(face, mode) glatter_glPolygonMode_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonMode_debug(GLenum face, GLenum mode, const char* file, int line);
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D_debug((target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage1D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_VERSION_1_0)
#if defined(GL_VERSION_1_1)
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D_debug((target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, void **params, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_1)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage_debug((target), (level), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImage_debug(GLenum target, GLint level, void *img, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays_debug((mode), (first), (count), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawArrays_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount, const char* file, int line);
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements_debug((mode), (count), (type), (indices), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawElements_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const char* file, int line);
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPointParameteri(pname, param) glatter_glPointParameteri_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameteri_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameteriv(pname, params) glatter_glPointParameteriv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameteriv_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectiv_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glMapBuffer(target, access) glatter_glMapBuffer_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBuffer_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1s_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2s_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3s_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nbv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Niv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nsv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nub_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nuiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nusv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4s_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRender_debug(GLuint id, GLenum mode, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocation_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClampColor(target, clamp) glatter_glClampColor_debug((target), (clamp), __FILE__, __LINE__)
void glatter_glClampColor_debug(GLenum target, GLenum clamp, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEndConditionalRender() glatter_glEndConditionalRender_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRender_debug(const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture1D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1i_debug(GLuint index, GLint x, const char* file, int line);
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1ui_debug(GLuint index, GLuint x, const char* file, int line);
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2i_debug(GLuint index, GLint x, GLint y, const char* file, int line);
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2ui_debug(GLuint index, GLuint x, GLuint y, const char* file, int line);
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3i_debug(GLuint index, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, const char* file, int line);
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName_debug((program), (uniformIndex), (bufSize), (length), (uniformName), __FILE__, __LINE__)
void glatter_glGetActiveUniformName_debug(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex_debug((index), __FILE__, __LINE__)
void glatter_glPrimitiveRestartIndex_debug(GLuint index, const char* file, int line);
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (drawcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertex_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex, const char* file, int line);
#define glProvokingVertex(mode) glatter_glProvokingVertex_debug((mode), __FILE__, __LINE__)
void glatter_glProvokingVertex_debug(GLenum mode, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationIndexed_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataIndex_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64v_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64v_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glQueryCounter(id, target) glatter_glQueryCounter_debug((id), (target), __FILE__, __LINE__)
void glatter_glQueryCounter_debug(GLuint id, GLenum target, const char* file, int line);
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed_debug((target), (index), (id), __FILE__, __LINE__)
void glatter_glBeginQueryIndexed_debug(GLenum target, GLuint index, GLuint id, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedback_debug(GLenum mode, GLuint id, const char* file, int line);
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream_debug((mode), (id), (stream), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStream_debug(GLenum mode, GLuint id, GLuint stream, const char* file, int line);
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed_debug((target), (index), __FILE__, __LINE__)
void glatter_glEndQueryIndexed_debug(GLenum target, GLuint index, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv_debug((program), (shadertype), (index), (pname), (values), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformiv_debug(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values, const char* file, int line);
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv_debug((program), (shadertype), (pname), (values), __FILE__, __LINE__)
void glatter_glGetProgramStageiv_debug(GLuint program, GLenum shadertype, GLenum pname, GLint *values, const char* file, int line);
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryIndexediv_debug(GLenum target, GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLuint glatter_glGetSubroutineIndex_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLint glatter_glGetSubroutineUniformLocation_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv_debug((shadertype), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformSubroutineuiv_debug(GLenum shadertype, GLint location, GLuint *params, const char* file, int line);
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformdv_debug(GLuint program, GLint location, GLdouble *params, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv_debug((pname), (values), __FILE__, __LINE__)
void glatter_glPatchParameterfv_debug(GLenum pname, const GLfloat *values, const char* file, int line);
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glUniform1d(location, x) glatter_glUniform1d_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1d_debug(GLint location, GLdouble x, const char* file, int line);
#define glUniform1dv(location, count, value) glatter_glUniform1dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform2d(location, x, y) glatter_glUniform2d_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2d_debug(GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glUniform2dv(location, count, value) glatter_glUniform2dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform3d(location, x, y, z) glatter_glUniform3d_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glUniform3dv(location, count, value) glatter_glUniform3dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glUniform4dv(location, count, value) glatter_glUniform4dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv_debug((shadertype), (count), (indices), __FILE__, __LINE__)
void glatter_glUniformSubroutinesuiv_debug(GLenum shadertype, GLsizei count, const GLuint *indices, const char* file, int line);
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayv_debug(GLuint first, GLsizei count, const GLdouble *v, const char* file, int line);
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexed_debug(GLuint index, GLdouble n, GLdouble f, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoublei_v_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_v_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1d_debug(GLuint program, GLint location, GLdouble v0, const char* file, int line);
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, const char* file, int line);
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, const char* file, int line);
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, const char* file, int line);
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayv_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexed_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribLPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayv_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedf_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedBaseInstance_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced_debug((mode), (id), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackInstanced_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced_debug((mode), (id), (stream), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStreamInstanced_debug(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount, const char* file, int line);
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv_debug((program), (bufferIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveAtomicCounterBufferiv_debug(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTexStorage1D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData_debug((target), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferData_debug(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData_debug((target), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferSubData_debug(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformati64v_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocationIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData_debug((buffer), __FILE__, __LINE__)
void glatter_glInvalidateBufferData_debug(GLuint buffer, const char* file, int line);
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glInvalidateBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage_debug((texture), (level), __FILE__, __LINE__)
void glatter_glInvalidateTexImage_debug(GLuint texture, GLint level, const char* file, int line);
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glInvalidateTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirect_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroup_debug(const char* file, int line);
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding_debug((program), (storageBlockIndex), (storageBlockBinding), __FILE__, __LINE__)
void glatter_glShaderStorageBlockBinding_debug(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, const char* file, int line);
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureView_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribLFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase_debug((target), (first), (count), (buffers), __FILE__, __LINE__)
void glatter_glBindBuffersBase_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const char* file, int line);
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange_debug((target), (first), (count), (buffers), (offsets), (sizes), __FILE__, __LINE__)
void glatter_glBindBuffersRange_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes, const char* file, int line);
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindImageTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers_debug((first), (count), (samplers), __FILE__, __LINE__)
void glatter_glBindSamplers_debug(GLuint first, GLsizei count, const GLuint *samplers, const char* file, int line);
#define glBindTextures(first, count, textures) glatter_glBindTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers_debug((first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glBindVertexBuffers_debug(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage_debug((target), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glBufferStorage_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit_debug((unit), (texture), __FILE__, __LINE__)
void glatter_glBindTextureUnit_debug(GLuint unit, GLuint texture, const char* file, int line);
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer_debug((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitNamedFramebuffer_debug(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatus_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferData_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubData_debug(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) glatter_glClearNamedFramebufferfi_debug((framebuffer), (buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfi_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferuiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClipControl(origin, depth) glatter_glClipControl_debug((origin), (depth), __FILE__, __LINE__)
void glatter_glClipControl_debug(GLenum origin, GLenum depth, const char* file, int line);
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyNamedBufferSubData_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D_debug((texture), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glCreateBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glCreateFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glCreateProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glCreateQueries(target, n, ids) glatter_glCreateQueries_debug((target), (n), (ids), __FILE__, __LINE__)
void glatter_glCreateQueries_debug(GLenum target, GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glCreateRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers_debug((n), (samplers), __FILE__, __LINE__)
void glatter_glCreateSamplers_debug(GLsizei n, GLuint *samplers, const char* file, int line);
#define glCreateTextures(target, n, textures) glatter_glCreateTextures_debug((target), (n), (textures), __FILE__, __LINE__)
void glatter_glCreateTextures_debug(GLenum target, GLsizei n, GLuint *textures, const char* file, int line);
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glCreateTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glCreateVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap_debug((texture), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmap_debug(GLuint texture, const char* file, int line);
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage_debug((texture), (level), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImage_debug(GLuint texture, GLint level, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteri64v_debug(GLuint buffer, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteriv_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointerv_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameteriv_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameteriv_debug(GLuint framebuffer, GLenum pname, GLint *param, const char* file, int line);
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameteriv_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjecti64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectui64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectuiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage_debug((texture), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfv_debug(GLuint texture, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameteriv_debug(GLuint texture, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIiv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuiv_debug(GLuint texture, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfv_debug(GLuint texture, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameteriv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki64_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint64 *param, const char* file, int line);
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint *param, const char* file, int line);
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv_debug((xfb), (pname), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackiv_debug(GLuint xfb, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexed64iv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param, const char* file, int line);
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexediv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayiv_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage_debug((target), (lod), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImage_debug(GLenum target, GLint lod, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage_debug((target), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdv_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData_debug((framebuffer), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData_debug((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferSubData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBuffer_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferData_debug(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorage_debug(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer_debug((framebuffer), (buf), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffer_debug(GLuint framebuffer, GLenum buf, const char* file, int line);
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffers_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteri_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer_debug((framebuffer), (src), __FILE__, __LINE__)
void glatter_glNamedFramebufferReadBuffer_debug(GLuint framebuffer, GLenum src, const char* file, int line);
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbuffer_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayer_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorage_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisample_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#define glTextureBarrier() glatter_glTextureBarrier_debug(__FILE__, __LINE__)
void glatter_glTextureBarrier_debug(const char* file, int line);
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer_debug((texture), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBuffer_debug(GLuint texture, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange_debug((texture), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRange_debug(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIiv_debug(GLuint texture, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuiv_debug(GLuint texture, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterf_debug(GLuint texture, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfv_debug(GLuint texture, GLenum pname, const GLfloat *param, const char* file, int line);
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteri_debug(GLuint texture, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriv_debug(GLuint texture, GLenum pname, const GLint *param, const char* file, int line);
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D_debug((texture), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D_debug((texture), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample_debug((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D_debug((texture), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample_debug((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase_debug((xfb), (index), (buffer), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferBase_debug(GLuint xfb, GLuint index, GLuint buffer, const char* file, int line);
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange_debug((xfb), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferRange_debug(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBuffer_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayAttribBinding_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribIFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribLFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayBindingDivisor_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer_debug((vaobj), (buffer), __FILE__, __LINE__)
void glatter_glVertexArrayElementBuffer_debug(GLuint vaobj, GLuint buffer, const char* file, int line);
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffer_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers_debug((vaobj), (first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffers_debug(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#endif // defined(GL_VERSION_4_5)
#if defined(GL_VERSION_4_6)
#define glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCount_debug((mode), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectCount_debug(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCount_debug((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectCount_debug(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glPolygonOffsetClamp(factor, units, clamp) glatter_glPolygonOffsetClamp_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClamp_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#define glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShader_debug((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue), __FILE__, __LINE__)
void glatter_glSpecializeShader_debug(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue, const char* file, int line);
#endif // defined(GL_VERSION_4_6)
#endif // defined(__gl_glcorearb_h_)
#if defined(__gl_glext_h_)
#if defined(GL_3DFX_tbuffer)
#define glTbufferMask3DFX(mask) glatter_glTbufferMask3DFX_debug((mask), __FILE__, __LINE__)
void glatter_glTbufferMask3DFX_debug(GLuint mask, const char* file, int line);
#endif // defined(GL_3DFX_tbuffer)
#if defined(GL_AMD_debug_output)
#define glDebugMessageCallbackAMD(callback, userParam) glatter_glDebugMessageCallbackAMD_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackAMD_debug(GLDEBUGPROCAMD callback, void *userParam, const char* file, int line);
#define glDebugMessageEnableAMD(category, severity, count, ids, enabled) glatter_glDebugMessageEnableAMD_debug((category), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageEnableAMD_debug(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertAMD(category, severity, id, length, buf) glatter_glDebugMessageInsertAMD_debug((category), (severity), (id), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertAMD_debug(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message) glatter_glGetDebugMessageLogAMD_debug((count), (bufsize), (categories), (severities), (ids), (lengths), (message), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogAMD_debug(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message, const char* file, int line);
#endif // defined(GL_AMD_debug_output)
#if defined(GL_AMD_draw_buffers_blend)
#define glBlendEquationIndexedAMD(buf, mode) glatter_glBlendEquationIndexedAMD_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationIndexedAMD_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateIndexedAMD_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateIndexedAMD_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFuncIndexedAMD(buf, src, dst) glatter_glBlendFuncIndexedAMD_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFuncIndexedAMD_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateIndexedAMD_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateIndexedAMD_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#endif // defined(GL_AMD_draw_buffers_blend)
#if defined(GL_AMD_framebuffer_sample_positions)
#define glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values) glatter_glFramebufferSamplePositionsfvAMD_debug((target), (numsamples), (pixelindex), (values), __FILE__, __LINE__)
void glatter_glFramebufferSamplePositionsfvAMD_debug(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values, const char* file, int line);
#define glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values) glatter_glGetFramebufferParameterfvAMD_debug((target), (pname), (numsamples), (pixelindex), (size), (values), __FILE__, __LINE__)
void glatter_glGetFramebufferParameterfvAMD_debug(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values, const char* file, int line);
#define glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values) glatter_glGetNamedFramebufferParameterfvAMD_debug((framebuffer), (pname), (numsamples), (pixelindex), (size), (values), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameterfvAMD_debug(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values, const char* file, int line);
#define glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values) glatter_glNamedFramebufferSamplePositionsfvAMD_debug((framebuffer), (numsamples), (pixelindex), (values), __FILE__, __LINE__)
void glatter_glNamedFramebufferSamplePositionsfvAMD_debug(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values, const char* file, int line);
#endif // defined(GL_AMD_framebuffer_sample_positions)
#if defined(GL_AMD_gpu_shader_int64)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vNV_debug(GLuint program, GLint location, GLint64EXT *params, const char* file, int line);
#define glGetUniformui64vNV(program, location, params) glatter_glGetUniformui64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformui64vNV_debug(GLuint program, GLint location, GLuint64EXT *params, const char* file, int line);
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64NV_debug(GLuint program, GLint location, GLint64EXT x, const char* file, int line);
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, const char* file, int line);
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64NV_debug(GLint location, GLint64EXT x, const char* file, int line);
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64NV_debug(GLint location, GLuint64EXT x, const char* file, int line);
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_AMD_gpu_shader_int64)
#if defined(GL_AMD_interleaved_elements)
#define glVertexAttribParameteriAMD(index, pname, param) glatter_glVertexAttribParameteriAMD_debug((index), (pname), (param), __FILE__, __LINE__)
void glatter_glVertexAttribParameteriAMD_debug(GLuint index, GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_AMD_interleaved_elements)
#if defined(GL_AMD_multi_draw_indirect)
#define glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride) glatter_glMultiDrawArraysIndirectAMD_debug((mode), (indirect), (primcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectAMD_debug(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride) glatter_glMultiDrawElementsIndirectAMD_debug((mode), (type), (indirect), (primcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectAMD_debug(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_AMD_multi_draw_indirect)
#if defined(GL_AMD_name_gen_delete)
#define glDeleteNamesAMD(identifier, num, names) glatter_glDeleteNamesAMD_debug((identifier), (num), (names), __FILE__, __LINE__)
void glatter_glDeleteNamesAMD_debug(GLenum identifier, GLuint num, const GLuint *names, const char* file, int line);
#define glGenNamesAMD(identifier, num, names) glatter_glGenNamesAMD_debug((identifier), (num), (names), __FILE__, __LINE__)
void glatter_glGenNamesAMD_debug(GLenum identifier, GLuint num, GLuint *names, const char* file, int line);
#define glIsNameAMD(identifier, name) glatter_glIsNameAMD_debug((identifier), (name), __FILE__, __LINE__)
GLboolean glatter_glIsNameAMD_debug(GLenum identifier, GLuint name, const char* file, int line);
#endif // defined(GL_AMD_name_gen_delete)
#if defined(GL_AMD_occlusion_query_event)
#define glQueryObjectParameteruiAMD(target, id, pname, param) glatter_glQueryObjectParameteruiAMD_debug((target), (id), (pname), (param), __FILE__, __LINE__)
void glatter_glQueryObjectParameteruiAMD_debug(GLenum target, GLuint id, GLenum pname, GLuint param, const char* file, int line);
#endif // defined(GL_AMD_occlusion_query_event)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glBeginPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glDeletePerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glEndPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glGenPerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_debug((monitor), (pname), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterDataAMD_debug(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, const char* file, int line);
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_debug((group), (counter), (pname), (data), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterInfoAMD_debug(GLuint group, GLuint counter, GLenum pname, void *data, const char* file, int line);
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_debug((group), (counter), (bufSize), (length), (counterString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterStringAMD_debug(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, const char* file, int line);
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_debug((group), (numCounters), (maxActiveCounters), (counterSize), (counters), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCountersAMD_debug(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, const char* file, int line);
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_debug((group), (bufSize), (length), (groupString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupStringAMD_debug(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, const char* file, int line);
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_debug((numGroups), (groupsSize), (groups), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupsAMD_debug(GLint *numGroups, GLsizei groupsSize, GLuint *groups, const char* file, int line);
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_debug((monitor), (enable), (group), (numCounters), (counterList), __FILE__, __LINE__)
void glatter_glSelectPerfMonitorCountersAMD_debug(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, const char* file, int line);
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_AMD_sample_positions)
#define glSetMultisamplefvAMD(pname, index, val) glatter_glSetMultisamplefvAMD_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glSetMultisamplefvAMD_debug(GLenum pname, GLuint index, const GLfloat *val, const char* file, int line);
#endif // defined(GL_AMD_sample_positions)
#if defined(GL_AMD_sparse_texture)
#define glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) glatter_glTexStorageSparseAMD_debug((target), (internalFormat), (width), (height), (depth), (layers), (flags), __FILE__, __LINE__)
void glatter_glTexStorageSparseAMD_debug(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags, const char* file, int line);
#define glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) glatter_glTextureStorageSparseAMD_debug((texture), (target), (internalFormat), (width), (height), (depth), (layers), (flags), __FILE__, __LINE__)
void glatter_glTextureStorageSparseAMD_debug(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags, const char* file, int line);
#endif // defined(GL_AMD_sparse_texture)
#if defined(GL_AMD_stencil_operation_extended)
#define glStencilOpValueAMD(face, value) glatter_glStencilOpValueAMD_debug((face), (value), __FILE__, __LINE__)
void glatter_glStencilOpValueAMD_debug(GLenum face, GLuint value, const char* file, int line);
#endif // defined(GL_AMD_stencil_operation_extended)
#if defined(GL_AMD_vertex_shader_tessellator)
#define glTessellationFactorAMD(factor) glatter_glTessellationFactorAMD_debug((factor), __FILE__, __LINE__)
void glatter_glTessellationFactorAMD_debug(GLfloat factor, const char* file, int line);
#define glTessellationModeAMD(mode) glatter_glTessellationModeAMD_debug((mode), __FILE__, __LINE__)
void glatter_glTessellationModeAMD_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_AMD_vertex_shader_tessellator)
#if defined(GL_APPLE_element_array)
#define glDrawElementArrayAPPLE(mode, first, count) glatter_glDrawElementArrayAPPLE_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawElementArrayAPPLE_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawRangeElementArrayAPPLE(mode, start, end, first, count) glatter_glDrawRangeElementArrayAPPLE_debug((mode), (start), (end), (first), (count), __FILE__, __LINE__)
void glatter_glDrawRangeElementArrayAPPLE_debug(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count, const char* file, int line);
#define glElementPointerAPPLE(type, pointer) glatter_glElementPointerAPPLE_debug((type), (pointer), __FILE__, __LINE__)
void glatter_glElementPointerAPPLE_debug(GLenum type, const void *pointer, const char* file, int line);
#define glMultiDrawElementArrayAPPLE(mode, first, count, primcount) glatter_glMultiDrawElementArrayAPPLE_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawElementArrayAPPLE_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#define glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount) glatter_glMultiDrawRangeElementArrayAPPLE_debug((mode), (start), (end), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawRangeElementArrayAPPLE_debug(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#endif // defined(GL_APPLE_element_array)
#if defined(GL_APPLE_fence)
#define glDeleteFencesAPPLE(n, fences) glatter_glDeleteFencesAPPLE_debug((n), (fences), __FILE__, __LINE__)
void glatter_glDeleteFencesAPPLE_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#define glFinishFenceAPPLE(fence) glatter_glFinishFenceAPPLE_debug((fence), __FILE__, __LINE__)
void glatter_glFinishFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glFinishObjectAPPLE(object, name) glatter_glFinishObjectAPPLE_debug((object), (name), __FILE__, __LINE__)
void glatter_glFinishObjectAPPLE_debug(GLenum object, GLint name, const char* file, int line);
#define glGenFencesAPPLE(n, fences) glatter_glGenFencesAPPLE_debug((n), (fences), __FILE__, __LINE__)
void glatter_glGenFencesAPPLE_debug(GLsizei n, GLuint *fences, const char* file, int line);
#define glIsFenceAPPLE(fence) glatter_glIsFenceAPPLE_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glIsFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glSetFenceAPPLE(fence) glatter_glSetFenceAPPLE_debug((fence), __FILE__, __LINE__)
void glatter_glSetFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glTestFenceAPPLE(fence) glatter_glTestFenceAPPLE_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glTestFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glTestObjectAPPLE(object, name) glatter_glTestObjectAPPLE_debug((object), (name), __FILE__, __LINE__)
GLboolean glatter_glTestObjectAPPLE_debug(GLenum object, GLuint name, const char* file, int line);
#endif // defined(GL_APPLE_fence)
#if defined(GL_APPLE_flush_buffer_range)
#define glBufferParameteriAPPLE(target, pname, param) glatter_glBufferParameteriAPPLE_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glBufferParameteriAPPLE_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glFlushMappedBufferRangeAPPLE(target, offset, size) glatter_glFlushMappedBufferRangeAPPLE_debug((target), (offset), (size), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRangeAPPLE_debug(GLenum target, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_APPLE_flush_buffer_range)
#if defined(GL_APPLE_object_purgeable)
#define glGetObjectParameterivAPPLE(objectType, name, pname, params) glatter_glGetObjectParameterivAPPLE_debug((objectType), (name), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectParameterivAPPLE_debug(GLenum objectType, GLuint name, GLenum pname, GLint *params, const char* file, int line);
#define glObjectPurgeableAPPLE(objectType, name, option) glatter_glObjectPurgeableAPPLE_debug((objectType), (name), (option), __FILE__, __LINE__)
GLenum glatter_glObjectPurgeableAPPLE_debug(GLenum objectType, GLuint name, GLenum option, const char* file, int line);
#define glObjectUnpurgeableAPPLE(objectType, name, option) glatter_glObjectUnpurgeableAPPLE_debug((objectType), (name), (option), __FILE__, __LINE__)
GLenum glatter_glObjectUnpurgeableAPPLE_debug(GLenum objectType, GLuint name, GLenum option, const char* file, int line);
#endif // defined(GL_APPLE_object_purgeable)
#if defined(GL_APPLE_texture_range)
#define glGetTexParameterPointervAPPLE(target, pname, params) glatter_glGetTexParameterPointervAPPLE_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterPointervAPPLE_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glTextureRangeAPPLE(target, length, pointer) glatter_glTextureRangeAPPLE_debug((target), (length), (pointer), __FILE__, __LINE__)
void glatter_glTextureRangeAPPLE_debug(GLenum target, GLsizei length, const void *pointer, const char* file, int line);
#endif // defined(GL_APPLE_texture_range)
#if defined(GL_APPLE_vertex_array_object)
#define glBindVertexArrayAPPLE(array) glatter_glBindVertexArrayAPPLE_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArrayAPPLE_debug(GLuint array, const char* file, int line);
#define glDeleteVertexArraysAPPLE(n, arrays) glatter_glDeleteVertexArraysAPPLE_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArraysAPPLE_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glGenVertexArraysAPPLE(n, arrays) glatter_glGenVertexArraysAPPLE_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArraysAPPLE_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glIsVertexArrayAPPLE(array) glatter_glIsVertexArrayAPPLE_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArrayAPPLE_debug(GLuint array, const char* file, int line);
#endif // defined(GL_APPLE_vertex_array_object)
#if defined(GL_APPLE_vertex_array_range)
#define glFlushVertexArrayRangeAPPLE(length, pointer) glatter_glFlushVertexArrayRangeAPPLE_debug((length), (pointer), __FILE__, __LINE__)
void glatter_glFlushVertexArrayRangeAPPLE_debug(GLsizei length, void *pointer, const char* file, int line);
#define glVertexArrayParameteriAPPLE(pname, param) glatter_glVertexArrayParameteriAPPLE_debug((pname), (param), __FILE__, __LINE__)
void glatter_glVertexArrayParameteriAPPLE_debug(GLenum pname, GLint param, const char* file, int line);
#define glVertexArrayRangeAPPLE(length, pointer) glatter_glVertexArrayRangeAPPLE_debug((length), (pointer), __FILE__, __LINE__)
void glatter_glVertexArrayRangeAPPLE_debug(GLsizei length, void *pointer, const char* file, int line);
#endif // defined(GL_APPLE_vertex_array_range)
#if defined(GL_APPLE_vertex_program_evaluators)
#define glDisableVertexAttribAPPLE(index, pname) glatter_glDisableVertexAttribAPPLE_debug((index), (pname), __FILE__, __LINE__)
void glatter_glDisableVertexAttribAPPLE_debug(GLuint index, GLenum pname, const char* file, int line);
#define glEnableVertexAttribAPPLE(index, pname) glatter_glEnableVertexAttribAPPLE_debug((index), (pname), __FILE__, __LINE__)
void glatter_glEnableVertexAttribAPPLE_debug(GLuint index, GLenum pname, const char* file, int line);
#define glIsVertexAttribEnabledAPPLE(index, pname) glatter_glIsVertexAttribEnabledAPPLE_debug((index), (pname), __FILE__, __LINE__)
GLboolean glatter_glIsVertexAttribEnabledAPPLE_debug(GLuint index, GLenum pname, const char* file, int line);
#define glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1dAPPLE_debug((index), (size), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib1dAPPLE_debug(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points, const char* file, int line);
#define glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1fAPPLE_debug((index), (size), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib1fAPPLE_debug(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points, const char* file, int line);
#define glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2dAPPLE_debug((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib2dAPPLE_debug(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points, const char* file, int line);
#define glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2fAPPLE_debug((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib2fAPPLE_debug(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points, const char* file, int line);
#endif // defined(GL_APPLE_vertex_program_evaluators)
#if defined(GL_ARB_ES3_2_compatibility)
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxARB_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBoxARB_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_ARB_ES3_2_compatibility)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleARB_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleARB_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleARB_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vARB_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentARB_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64ARB_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64ARB_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64ARB_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vARB_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB_debug((context), (event), (flags), __FILE__, __LINE__)
GLsync glatter_glCreateSyncFromCLeventARB_debug(struct _cl_context *context, struct _cl_event *event, GLbitfield flags, const char* file, int line);
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_color_buffer_float)
#define glClampColorARB(target, clamp) glatter_glClampColorARB_debug((target), (clamp), __FILE__, __LINE__)
void glatter_glClampColorARB_debug(GLenum target, GLenum clamp, const char* file, int line);
#endif // defined(GL_ARB_color_buffer_float)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB_debug((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z), __FILE__, __LINE__)
void glatter_glDispatchComputeGroupSizeARB_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z, const char* file, int line);
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackARB_debug(GLDEBUGPROCARB callback, const void *userParam, const char* file, int line);
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControlARB_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertARB_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogARB_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers)
#define glDrawBuffersARB(n, bufs) glatter_glDrawBuffersARB_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersARB_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_ARB_draw_buffers)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiARB_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiARB_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiARB_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciARB_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_draw_instanced)
#define glDrawArraysInstancedARB(mode, first, count, primcount) glatter_glDrawArraysInstancedARB_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedARB_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedARB_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedARB_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_ARB_draw_instanced)
#if defined(GL_ARB_fragment_program)
#define glBindProgramARB(target, program) glatter_glBindProgramARB_debug((target), (program), __FILE__, __LINE__)
void glatter_glBindProgramARB_debug(GLenum target, GLuint program, const char* file, int line);
#define glDeleteProgramsARB(n, programs) glatter_glDeleteProgramsARB_debug((n), (programs), __FILE__, __LINE__)
void glatter_glDeleteProgramsARB_debug(GLsizei n, const GLuint *programs, const char* file, int line);
#define glGenProgramsARB(n, programs) glatter_glGenProgramsARB_debug((n), (programs), __FILE__, __LINE__)
void glatter_glGenProgramsARB_debug(GLsizei n, GLuint *programs, const char* file, int line);
#define glGetProgramEnvParameterdvARB(target, index, params) glatter_glGetProgramEnvParameterdvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterdvARB_debug(GLenum target, GLuint index, GLdouble *params, const char* file, int line);
#define glGetProgramEnvParameterfvARB(target, index, params) glatter_glGetProgramEnvParameterfvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterfvARB_debug(GLenum target, GLuint index, GLfloat *params, const char* file, int line);
#define glGetProgramLocalParameterdvARB(target, index, params) glatter_glGetProgramLocalParameterdvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterdvARB_debug(GLenum target, GLuint index, GLdouble *params, const char* file, int line);
#define glGetProgramLocalParameterfvARB(target, index, params) glatter_glGetProgramLocalParameterfvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterfvARB_debug(GLenum target, GLuint index, GLfloat *params, const char* file, int line);
#define glGetProgramStringARB(target, pname, string) glatter_glGetProgramStringARB_debug((target), (pname), (string), __FILE__, __LINE__)
void glatter_glGetProgramStringARB_debug(GLenum target, GLenum pname, void *string, const char* file, int line);
#define glGetProgramivARB(target, pname, params) glatter_glGetProgramivARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramivARB_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramARB(program) glatter_glIsProgramARB_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgramARB_debug(GLuint program, const char* file, int line);
#define glProgramEnvParameter4dARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4dARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4dARB_debug(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramEnvParameter4dvARB(target, index, params) glatter_glProgramEnvParameter4dvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4dvARB_debug(GLenum target, GLuint index, const GLdouble *params, const char* file, int line);
#define glProgramEnvParameter4fARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4fARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4fARB_debug(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramEnvParameter4fvARB(target, index, params) glatter_glProgramEnvParameter4fvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4fvARB_debug(GLenum target, GLuint index, const GLfloat *params, const char* file, int line);
#define glProgramLocalParameter4dARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4dARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4dARB_debug(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramLocalParameter4dvARB(target, index, params) glatter_glProgramLocalParameter4dvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4dvARB_debug(GLenum target, GLuint index, const GLdouble *params, const char* file, int line);
#define glProgramLocalParameter4fARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4fARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4fARB_debug(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramLocalParameter4fvARB(target, index, params) glatter_glProgramLocalParameter4fvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4fvARB_debug(GLenum target, GLuint index, const GLfloat *params, const char* file, int line);
#define glProgramStringARB(target, format, len, string) glatter_glProgramStringARB_debug((target), (format), (len), (string), __FILE__, __LINE__)
void glatter_glProgramStringARB_debug(GLenum target, GLenum format, GLsizei len, const void *string, const char* file, int line);
#endif // defined(GL_ARB_fragment_program)
#if defined(GL_ARB_geometry_shader4)
#define glFramebufferTextureARB(target, attachment, texture, level) glatter_glFramebufferTextureARB_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceARB_debug((target), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glFramebufferTextureFaceARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerARB_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayerARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glProgramParameteriARB(program, pname, value) glatter_glProgramParameteriARB_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteriARB_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_ARB_geometry_shader4)
#if defined(GL_ARB_gl_spirv)
#define glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShaderARB_debug((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue), __FILE__, __LINE__)
void glatter_glSpecializeShaderARB_debug(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue, const char* file, int line);
#endif // defined(GL_ARB_gl_spirv)
#if defined(GL_ARB_gpu_shader_int64)
#define glGetUniformi64vARB(program, location, params) glatter_glGetUniformi64vARB_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vARB_debug(GLuint program, GLint location, GLint64 *params, const char* file, int line);
#define glGetUniformui64vARB(program, location, params) glatter_glGetUniformui64vARB_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformui64vARB_debug(GLuint program, GLint location, GLuint64 *params, const char* file, int line);
#define glGetnUniformi64vARB(program, location, bufSize, params) glatter_glGetnUniformi64vARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformi64vARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetnUniformui64vARB(program, location, bufSize, params) glatter_glGetnUniformui64vARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformui64vARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params, const char* file, int line);
#define glProgramUniform1i64ARB(program, location, x) glatter_glProgramUniform1i64ARB_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64ARB_debug(GLuint program, GLint location, GLint64 x, const char* file, int line);
#define glProgramUniform1i64vARB(program, location, count, value) glatter_glProgramUniform1i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform1ui64ARB(program, location, x) glatter_glProgramUniform1ui64ARB_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64ARB_debug(GLuint program, GLint location, GLuint64 x, const char* file, int line);
#define glProgramUniform1ui64vARB(program, location, count, value) glatter_glProgramUniform1ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform2i64ARB(program, location, x, y) glatter_glProgramUniform2i64ARB_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, const char* file, int line);
#define glProgramUniform2i64vARB(program, location, count, value) glatter_glProgramUniform2i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform2ui64ARB(program, location, x, y) glatter_glProgramUniform2ui64ARB_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, const char* file, int line);
#define glProgramUniform2ui64vARB(program, location, count, value) glatter_glProgramUniform2ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform3i64ARB(program, location, x, y, z) glatter_glProgramUniform3i64ARB_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, const char* file, int line);
#define glProgramUniform3i64vARB(program, location, count, value) glatter_glProgramUniform3i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform3ui64ARB(program, location, x, y, z) glatter_glProgramUniform3ui64ARB_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, const char* file, int line);
#define glProgramUniform3ui64vARB(program, location, count, value) glatter_glProgramUniform3ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform4i64ARB(program, location, x, y, z, w) glatter_glProgramUniform4i64ARB_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, const char* file, int line);
#define glProgramUniform4i64vARB(program, location, count, value) glatter_glProgramUniform4i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) glatter_glProgramUniform4ui64ARB_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, const char* file, int line);
#define glProgramUniform4ui64vARB(program, location, count, value) glatter_glProgramUniform4ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform1i64ARB(location, x) glatter_glUniform1i64ARB_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64ARB_debug(GLint location, GLint64 x, const char* file, int line);
#define glUniform1i64vARB(location, count, value) glatter_glUniform1i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform1ui64ARB(location, x) glatter_glUniform1ui64ARB_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64ARB_debug(GLint location, GLuint64 x, const char* file, int line);
#define glUniform1ui64vARB(location, count, value) glatter_glUniform1ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform2i64ARB(location, x, y) glatter_glUniform2i64ARB_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64ARB_debug(GLint location, GLint64 x, GLint64 y, const char* file, int line);
#define glUniform2i64vARB(location, count, value) glatter_glUniform2i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform2ui64ARB(location, x, y) glatter_glUniform2ui64ARB_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, const char* file, int line);
#define glUniform2ui64vARB(location, count, value) glatter_glUniform2ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform3i64ARB(location, x, y, z) glatter_glUniform3i64ARB_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64ARB_debug(GLint location, GLint64 x, GLint64 y, GLint64 z, const char* file, int line);
#define glUniform3i64vARB(location, count, value) glatter_glUniform3i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform3ui64ARB(location, x, y, z) glatter_glUniform3ui64ARB_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, const char* file, int line);
#define glUniform3ui64vARB(location, count, value) glatter_glUniform3ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform4i64ARB(location, x, y, z, w) glatter_glUniform4i64ARB_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64ARB_debug(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, const char* file, int line);
#define glUniform4i64vARB(location, count, value) glatter_glUniform4i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform4ui64ARB(location, x, y, z, w) glatter_glUniform4ui64ARB_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, const char* file, int line);
#define glUniform4ui64vARB(location, count, value) glatter_glUniform4ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_ARB_gpu_shader_int64)
#if defined(GL_ARB_imaging)
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable_debug((target), (start), (count), (format), (type), (data), __FILE__, __LINE__)
void glatter_glColorSubTable_debug(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable_debug((target), (internalformat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTable_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table, const char* file, int line);
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D_debug((target), (internalformat), (width), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterf_debug(GLenum target, GLenum pname, GLfloat params, const char* file, int line);
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteri_debug(GLenum target, GLenum pname, GLint params, const char* file, int line);
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable_debug((target), (start), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorSubTable_debug(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorTable_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D_debug((target), (internalformat), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable_debug((target), (format), (type), (table), __FILE__, __LINE__)
void glatter_glGetColorTable_debug(GLenum target, GLenum format, GLenum type, void *table, const char* file, int line);
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter_debug((target), (format), (type), (image), __FILE__, __LINE__)
void glatter_glGetConvolutionFilter_debug(GLenum target, GLenum format, GLenum type, void *image, const char* file, int line);
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetHistogram_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMinmax(target, reset, format, type, values) glatter_glGetMinmax_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetMinmax_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter_debug((target), (format), (type), (row), (column), (span), __FILE__, __LINE__)
void glatter_glGetSeparableFilter_debug(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span, const char* file, int line);
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram_debug((target), (width), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glHistogram_debug(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glMinmax(target, internalformat, sink) glatter_glMinmax_debug((target), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glMinmax_debug(GLenum target, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glResetHistogram(target) glatter_glResetHistogram_debug((target), __FILE__, __LINE__)
void glatter_glResetHistogram_debug(GLenum target, const char* file, int line);
#define glResetMinmax(target) glatter_glResetMinmax_debug((target), __FILE__, __LINE__)
void glatter_glResetMinmax_debug(GLenum target, const char* file, int line);
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (row), (column), __FILE__, __LINE__)
void glatter_glSeparableFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column, const char* file, int line);
#endif // defined(GL_ARB_imaging)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB_debug((mode), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectCountARB_debug(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB_debug((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectCountARB_debug(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_instanced_arrays)
#define glVertexAttribDivisorARB(index, divisor) glatter_glVertexAttribDivisorARB_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorARB_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_ARB_instanced_arrays)
#if defined(GL_ARB_matrix_palette)
#define glCurrentPaletteMatrixARB(index) glatter_glCurrentPaletteMatrixARB_debug((index), __FILE__, __LINE__)
void glatter_glCurrentPaletteMatrixARB_debug(GLint index, const char* file, int line);
#define glMatrixIndexPointerARB(size, type, stride, pointer) glatter_glMatrixIndexPointerARB_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glMatrixIndexPointerARB_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glMatrixIndexubvARB(size, indices) glatter_glMatrixIndexubvARB_debug((size), (indices), __FILE__, __LINE__)
void glatter_glMatrixIndexubvARB_debug(GLint size, const GLubyte *indices, const char* file, int line);
#define glMatrixIndexuivARB(size, indices) glatter_glMatrixIndexuivARB_debug((size), (indices), __FILE__, __LINE__)
void glatter_glMatrixIndexuivARB_debug(GLint size, const GLuint *indices, const char* file, int line);
#define glMatrixIndexusvARB(size, indices) glatter_glMatrixIndexusvARB_debug((size), (indices), __FILE__, __LINE__)
void glatter_glMatrixIndexusvARB_debug(GLint size, const GLushort *indices, const char* file, int line);
#endif // defined(GL_ARB_matrix_palette)
#if defined(GL_ARB_multisample)
#define glSampleCoverageARB(value, invert) glatter_glSampleCoverageARB_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverageARB_debug(GLfloat value, GLboolean invert, const char* file, int line);
#endif // defined(GL_ARB_multisample)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dARB_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fARB_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iARB_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sARB_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dARB_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fARB_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iARB_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sARB_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iARB_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iARB_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ARB_occlusion_query)
#define glBeginQueryARB(target, id) glatter_glBeginQueryARB_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQueryARB_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteQueriesARB(n, ids) glatter_glDeleteQueriesARB_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueriesARB_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQueryARB(target) glatter_glEndQueryARB_debug((target), __FILE__, __LINE__)
void glatter_glEndQueryARB_debug(GLenum target, const char* file, int line);
#define glGenQueriesARB(n, ids) glatter_glGenQueriesARB_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueriesARB_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetQueryObjectivARB(id, pname, params) glatter_glGetQueryObjectivARB_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectivARB_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectuivARB(id, pname, params) glatter_glGetQueryObjectuivARB_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuivARB_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryivARB(target, pname, params) glatter_glGetQueryivARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryivARB_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsQueryARB(id) glatter_glIsQueryARB_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQueryARB_debug(GLuint id, const char* file, int line);
#endif // defined(GL_ARB_occlusion_query)
#if defined(GL_ARB_parallel_shader_compile)
#define glMaxShaderCompilerThreadsARB(count) glatter_glMaxShaderCompilerThreadsARB_debug((count), __FILE__, __LINE__)
void glatter_glMaxShaderCompilerThreadsARB_debug(GLuint count, const char* file, int line);
#endif // defined(GL_ARB_parallel_shader_compile)
#if defined(GL_ARB_point_parameters)
#define glPointParameterfARB(pname, param) glatter_glPointParameterfARB_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterfARB_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfvARB(pname, params) glatter_glPointParameterfvARB_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfvARB_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#endif // defined(GL_ARB_point_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusARB_debug(const char* file, int line);
#define glGetnColorTableARB(target, format, type, bufSize, table) glatter_glGetnColorTableARB_debug((target), (format), (type), (bufSize), (table), __FILE__, __LINE__)
void glatter_glGetnColorTableARB_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table, const char* file, int line);
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB_debug((target), (lod), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImageARB_debug(GLenum target, GLint lod, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnConvolutionFilterARB(target, format, type, bufSize, image) glatter_glGetnConvolutionFilterARB_debug((target), (format), (type), (bufSize), (image), __FILE__, __LINE__)
void glatter_glGetnConvolutionFilterARB_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image, const char* file, int line);
#define glGetnHistogramARB(target, reset, format, type, bufSize, values) glatter_glGetnHistogramARB_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnHistogramARB_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnMapdvARB(target, query, bufSize, v) glatter_glGetnMapdvARB_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapdvARB_debug(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v, const char* file, int line);
#define glGetnMapfvARB(target, query, bufSize, v) glatter_glGetnMapfvARB_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapfvARB_debug(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v, const char* file, int line);
#define glGetnMapivARB(target, query, bufSize, v) glatter_glGetnMapivARB_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapivARB_debug(GLenum target, GLenum query, GLsizei bufSize, GLint *v, const char* file, int line);
#define glGetnMinmaxARB(target, reset, format, type, bufSize, values) glatter_glGetnMinmaxARB_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnMinmaxARB_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnPixelMapfvARB(map, bufSize, values) glatter_glGetnPixelMapfvARB_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapfvARB_debug(GLenum map, GLsizei bufSize, GLfloat *values, const char* file, int line);
#define glGetnPixelMapuivARB(map, bufSize, values) glatter_glGetnPixelMapuivARB_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapuivARB_debug(GLenum map, GLsizei bufSize, GLuint *values, const char* file, int line);
#define glGetnPixelMapusvARB(map, bufSize, values) glatter_glGetnPixelMapusvARB_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapusvARB_debug(GLenum map, GLsizei bufSize, GLushort *values, const char* file, int line);
#define glGetnPolygonStippleARB(bufSize, pattern) glatter_glGetnPolygonStippleARB_debug((bufSize), (pattern), __FILE__, __LINE__)
void glatter_glGetnPolygonStippleARB_debug(GLsizei bufSize, GLubyte *pattern, const char* file, int line);
#define glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilterARB_debug((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span), __FILE__, __LINE__)
void glatter_glGetnSeparableFilterARB_debug(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span, const char* file, int line);
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB_debug((target), (level), (format), (type), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnTexImageARB_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsARB_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_locations)
#define glEvaluateDepthValuesARB() glatter_glEvaluateDepthValuesARB_debug(__FILE__, __LINE__)
void glatter_glEvaluateDepthValuesARB_debug(const char* file, int line);
#define glFramebufferSampleLocationsfvARB(target, start, count, v) glatter_glFramebufferSampleLocationsfvARB_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvARB_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvARB_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvARB_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#endif // defined(GL_ARB_sample_locations)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShadingARB_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shader_objects)
#define glAttachObjectARB(containerObj, obj) glatter_glAttachObjectARB_debug((containerObj), (obj), __FILE__, __LINE__)
void glatter_glAttachObjectARB_debug(GLhandleARB containerObj, GLhandleARB obj, const char* file, int line);
#define glCompileShaderARB(shaderObj) glatter_glCompileShaderARB_debug((shaderObj), __FILE__, __LINE__)
void glatter_glCompileShaderARB_debug(GLhandleARB shaderObj, const char* file, int line);
#define glCreateProgramObjectARB() glatter_glCreateProgramObjectARB_debug(__FILE__, __LINE__)
GLhandleARB glatter_glCreateProgramObjectARB_debug(const char* file, int line);
#define glCreateShaderObjectARB(shaderType) glatter_glCreateShaderObjectARB_debug((shaderType), __FILE__, __LINE__)
GLhandleARB glatter_glCreateShaderObjectARB_debug(GLenum shaderType, const char* file, int line);
#define glDeleteObjectARB(obj) glatter_glDeleteObjectARB_debug((obj), __FILE__, __LINE__)
void glatter_glDeleteObjectARB_debug(GLhandleARB obj, const char* file, int line);
#define glDetachObjectARB(containerObj, attachedObj) glatter_glDetachObjectARB_debug((containerObj), (attachedObj), __FILE__, __LINE__)
void glatter_glDetachObjectARB_debug(GLhandleARB containerObj, GLhandleARB attachedObj, const char* file, int line);
#define glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveUniformARB_debug((programObj), (index), (maxLength), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniformARB_debug(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name, const char* file, int line);
#define glGetAttachedObjectsARB(containerObj, maxCount, count, obj) glatter_glGetAttachedObjectsARB_debug((containerObj), (maxCount), (count), (obj), __FILE__, __LINE__)
void glatter_glGetAttachedObjectsARB_debug(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj, const char* file, int line);
#define glGetHandleARB(pname) glatter_glGetHandleARB_debug((pname), __FILE__, __LINE__)
GLhandleARB glatter_glGetHandleARB_debug(GLenum pname, const char* file, int line);
#define glGetInfoLogARB(obj, maxLength, length, infoLog) glatter_glGetInfoLogARB_debug((obj), (maxLength), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetInfoLogARB_debug(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog, const char* file, int line);
#define glGetObjectParameterfvARB(obj, pname, params) glatter_glGetObjectParameterfvARB_debug((obj), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectParameterfvARB_debug(GLhandleARB obj, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetObjectParameterivARB(obj, pname, params) glatter_glGetObjectParameterivARB_debug((obj), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectParameterivARB_debug(GLhandleARB obj, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderSourceARB(obj, maxLength, length, source) glatter_glGetShaderSourceARB_debug((obj), (maxLength), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSourceARB_debug(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source, const char* file, int line);
#define glGetUniformLocationARB(programObj, name) glatter_glGetUniformLocationARB_debug((programObj), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocationARB_debug(GLhandleARB programObj, const GLcharARB *name, const char* file, int line);
#define glGetUniformfvARB(programObj, location, params) glatter_glGetUniformfvARB_debug((programObj), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfvARB_debug(GLhandleARB programObj, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformivARB(programObj, location, params) glatter_glGetUniformivARB_debug((programObj), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformivARB_debug(GLhandleARB programObj, GLint location, GLint *params, const char* file, int line);
#define glLinkProgramARB(programObj) glatter_glLinkProgramARB_debug((programObj), __FILE__, __LINE__)
void glatter_glLinkProgramARB_debug(GLhandleARB programObj, const char* file, int line);
#define glShaderSourceARB(shaderObj, count, string, length) glatter_glShaderSourceARB_debug((shaderObj), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSourceARB_debug(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length, const char* file, int line);
#define glUniform1fARB(location, v0) glatter_glUniform1fARB_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1fARB_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fvARB(location, count, value) glatter_glUniform1fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1iARB(location, v0) glatter_glUniform1iARB_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1iARB_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1ivARB(location, count, value) glatter_glUniform1ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2fARB(location, v0, v1) glatter_glUniform2fARB_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2fARB_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fvARB(location, count, value) glatter_glUniform2fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2iARB(location, v0, v1) glatter_glUniform2iARB_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2iARB_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2ivARB(location, count, value) glatter_glUniform2ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3fARB(location, v0, v1, v2) glatter_glUniform3fARB_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3fARB_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fvARB(location, count, value) glatter_glUniform3fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3iARB(location, v0, v1, v2) glatter_glUniform3iARB_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3iARB_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3ivARB(location, count, value) glatter_glUniform3ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4fARB(location, v0, v1, v2, v3) glatter_glUniform4fARB_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4fARB_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fvARB(location, count, value) glatter_glUniform4fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4iARB(location, v0, v1, v2, v3) glatter_glUniform4iARB_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4iARB_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4ivARB(location, count, value) glatter_glUniform4ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fvARB(location, count, transpose, value) glatter_glUniformMatrix2fvARB_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fvARB_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fvARB(location, count, transpose, value) glatter_glUniformMatrix3fvARB_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fvARB_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fvARB(location, count, transpose, value) glatter_glUniformMatrix4fvARB_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fvARB_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgramObjectARB(programObj) glatter_glUseProgramObjectARB_debug((programObj), __FILE__, __LINE__)
void glatter_glUseProgramObjectARB_debug(GLhandleARB programObj, const char* file, int line);
#define glValidateProgramARB(programObj) glatter_glValidateProgramARB_debug((programObj), __FILE__, __LINE__)
void glatter_glValidateProgramARB_debug(GLhandleARB programObj, const char* file, int line);
#endif // defined(GL_ARB_shader_objects)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB_debug((shader), (count), (path), (length), __FILE__, __LINE__)
void glatter_glCompileShaderIncludeARB_debug(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length, const char* file, int line);
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
void glatter_glDeleteNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB_debug((namelen), (name), (bufSize), (stringlen), (string), __FILE__, __LINE__)
void glatter_glGetNamedStringARB_debug(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string, const char* file, int line);
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB_debug((namelen), (name), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedStringivARB_debug(GLint namelen, const GLchar *name, GLenum pname, GLint *params, const char* file, int line);
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
GLboolean glatter_glIsNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB_debug((type), (namelen), (name), (stringlen), (string), __FILE__, __LINE__)
void glatter_glNamedStringARB_debug(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string, const char* file, int line);
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB_debug((target), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glBufferPageCommitmentARB_debug(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentARB_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentARB_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexPageCommitmentARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_ARB_texture_buffer_object)
#define glTexBufferARB(target, internalformat, buffer) glatter_glTexBufferARB_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferARB_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#endif // defined(GL_ARB_texture_buffer_object)
#if defined(GL_ARB_texture_compression)
#define glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1DARB_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1DARB_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2DARB_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2DARB_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DARB_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3DARB_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1DARB_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1DARB_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2DARB_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2DARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DARB_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3DARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glGetCompressedTexImageARB(target, level, img) glatter_glGetCompressedTexImageARB_debug((target), (level), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImageARB_debug(GLenum target, GLint level, void *img, const char* file, int line);
#endif // defined(GL_ARB_texture_compression)
#if defined(GL_ARB_transpose_matrix)
#define glLoadTransposeMatrixdARB(m) glatter_glLoadTransposeMatrixdARB_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixdARB_debug(const GLdouble *m, const char* file, int line);
#define glLoadTransposeMatrixfARB(m) glatter_glLoadTransposeMatrixfARB_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixfARB_debug(const GLfloat *m, const char* file, int line);
#define glMultTransposeMatrixdARB(m) glatter_glMultTransposeMatrixdARB_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixdARB_debug(const GLdouble *m, const char* file, int line);
#define glMultTransposeMatrixfARB(m) glatter_glMultTransposeMatrixfARB_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixfARB_debug(const GLfloat *m, const char* file, int line);
#endif // defined(GL_ARB_transpose_matrix)
#if defined(GL_ARB_vertex_blend)
#define glVertexBlendARB(count) glatter_glVertexBlendARB_debug((count), __FILE__, __LINE__)
void glatter_glVertexBlendARB_debug(GLint count, const char* file, int line);
#define glWeightPointerARB(size, type, stride, pointer) glatter_glWeightPointerARB_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glWeightPointerARB_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWeightbvARB(size, weights) glatter_glWeightbvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightbvARB_debug(GLint size, const GLbyte *weights, const char* file, int line);
#define glWeightdvARB(size, weights) glatter_glWeightdvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightdvARB_debug(GLint size, const GLdouble *weights, const char* file, int line);
#define glWeightfvARB(size, weights) glatter_glWeightfvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightfvARB_debug(GLint size, const GLfloat *weights, const char* file, int line);
#define glWeightivARB(size, weights) glatter_glWeightivARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightivARB_debug(GLint size, const GLint *weights, const char* file, int line);
#define glWeightsvARB(size, weights) glatter_glWeightsvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightsvARB_debug(GLint size, const GLshort *weights, const char* file, int line);
#define glWeightubvARB(size, weights) glatter_glWeightubvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightubvARB_debug(GLint size, const GLubyte *weights, const char* file, int line);
#define glWeightuivARB(size, weights) glatter_glWeightuivARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightuivARB_debug(GLint size, const GLuint *weights, const char* file, int line);
#define glWeightusvARB(size, weights) glatter_glWeightusvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightusvARB_debug(GLint size, const GLushort *weights, const char* file, int line);
#endif // defined(GL_ARB_vertex_blend)
#if defined(GL_ARB_vertex_buffer_object)
#define glBindBufferARB(target, buffer) glatter_glBindBufferARB_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferARB_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBufferDataARB(target, size, data, usage) glatter_glBufferDataARB_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferDataARB_debug(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubDataARB(target, offset, size, data) glatter_glBufferSubDataARB_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubDataARB_debug(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data, const char* file, int line);
#define glDeleteBuffersARB(n, buffers) glatter_glDeleteBuffersARB_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffersARB_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glGenBuffersARB(n, buffers) glatter_glGenBuffersARB_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffersARB_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGetBufferParameterivARB(target, pname, params) glatter_glGetBufferParameterivARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameterivARB_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferPointervARB(target, pname, params) glatter_glGetBufferPointervARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointervARB_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetBufferSubDataARB(target, offset, size, data) glatter_glGetBufferSubDataARB_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetBufferSubDataARB_debug(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data, const char* file, int line);
#define glIsBufferARB(buffer) glatter_glIsBufferARB_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBufferARB_debug(GLuint buffer, const char* file, int line);
#define glMapBufferARB(target, access) glatter_glMapBufferARB_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBufferARB_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBufferARB(target) glatter_glUnmapBufferARB_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBufferARB_debug(GLenum target, const char* file, int line);
#endif // defined(GL_ARB_vertex_buffer_object)
#if defined(GL_ARB_vertex_program)
#define glDisableVertexAttribArrayARB(index) glatter_glDisableVertexAttribArrayARB_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArrayARB_debug(GLuint index, const char* file, int line);
#define glEnableVertexAttribArrayARB(index) glatter_glEnableVertexAttribArrayARB_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArrayARB_debug(GLuint index, const char* file, int line);
#define glGetVertexAttribPointervARB(index, pname, pointer) glatter_glGetVertexAttribPointervARB_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointervARB_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdvARB(index, pname, params) glatter_glGetVertexAttribdvARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdvARB_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfvARB(index, pname, params) glatter_glGetVertexAttribfvARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfvARB_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribivARB(index, pname, params) glatter_glGetVertexAttribivARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribivARB_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glVertexAttrib1dARB(index, x) glatter_glVertexAttrib1dARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1dARB_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dvARB(index, v) glatter_glVertexAttrib1dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1fARB(index, x) glatter_glVertexAttrib1fARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1fARB_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fvARB(index, v) glatter_glVertexAttrib1fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1sARB(index, x) glatter_glVertexAttrib1sARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1sARB_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1svARB(index, v) glatter_glVertexAttrib1svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2dARB(index, x, y) glatter_glVertexAttrib2dARB_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2dARB_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dvARB(index, v) glatter_glVertexAttrib2dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2fARB(index, x, y) glatter_glVertexAttrib2fARB_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2fARB_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fvARB(index, v) glatter_glVertexAttrib2fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2sARB(index, x, y) glatter_glVertexAttrib2sARB_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2sARB_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2svARB(index, v) glatter_glVertexAttrib2svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3dARB(index, x, y, z) glatter_glVertexAttrib3dARB_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3dARB_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dvARB(index, v) glatter_glVertexAttrib3dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3fARB(index, x, y, z) glatter_glVertexAttrib3fARB_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3fARB_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fvARB(index, v) glatter_glVertexAttrib3fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3sARB(index, x, y, z) glatter_glVertexAttrib3sARB_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3sARB_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3svARB(index, v) glatter_glVertexAttrib3svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4NbvARB(index, v) glatter_glVertexAttrib4NbvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NbvARB_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4NivARB(index, v) glatter_glVertexAttrib4NivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NivARB_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4NsvARB(index, v) glatter_glVertexAttrib4NsvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NsvARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4NubARB(index, x, y, z, w) glatter_glVertexAttrib4NubARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4NubARB_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4NubvARB(index, v) glatter_glVertexAttrib4NubvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NubvARB_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4NuivARB(index, v) glatter_glVertexAttrib4NuivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NuivARB_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4NusvARB(index, v) glatter_glVertexAttrib4NusvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NusvARB_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttrib4bvARB(index, v) glatter_glVertexAttrib4bvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4bvARB_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4dARB(index, x, y, z, w) glatter_glVertexAttrib4dARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4dARB_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dvARB(index, v) glatter_glVertexAttrib4dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4fARB(index, x, y, z, w) glatter_glVertexAttrib4fARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4fARB_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fvARB(index, v) glatter_glVertexAttrib4fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4ivARB(index, v) glatter_glVertexAttrib4ivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ivARB_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4sARB(index, x, y, z, w) glatter_glVertexAttrib4sARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4sARB_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4svARB(index, v) glatter_glVertexAttrib4svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubvARB(index, v) glatter_glVertexAttrib4ubvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubvARB_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4uivARB(index, v) glatter_glVertexAttrib4uivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4uivARB_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4usvARB(index, v) glatter_glVertexAttrib4usvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4usvARB_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribPointerARB(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointerARB_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointerARB_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_ARB_vertex_program)
#if defined(GL_ARB_vertex_shader)
#define glBindAttribLocationARB(programObj, index, name) glatter_glBindAttribLocationARB_debug((programObj), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocationARB_debug(GLhandleARB programObj, GLuint index, const GLcharARB *name, const char* file, int line);
#define glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveAttribARB_debug((programObj), (index), (maxLength), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttribARB_debug(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name, const char* file, int line);
#define glGetAttribLocationARB(programObj, name) glatter_glGetAttribLocationARB_debug((programObj), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocationARB_debug(GLhandleARB programObj, const GLcharARB *name, const char* file, int line);
#endif // defined(GL_ARB_vertex_shader)
#if defined(GL_ARB_window_pos)
#define glWindowPos2dARB(x, y) glatter_glWindowPos2dARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2dARB_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glWindowPos2dvARB(v) glatter_glWindowPos2dvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2dvARB_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos2fARB(x, y) glatter_glWindowPos2fARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2fARB_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glWindowPos2fvARB(v) glatter_glWindowPos2fvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2fvARB_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos2iARB(x, y) glatter_glWindowPos2iARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2iARB_debug(GLint x, GLint y, const char* file, int line);
#define glWindowPos2ivARB(v) glatter_glWindowPos2ivARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2ivARB_debug(const GLint *v, const char* file, int line);
#define glWindowPos2sARB(x, y) glatter_glWindowPos2sARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2sARB_debug(GLshort x, GLshort y, const char* file, int line);
#define glWindowPos2svARB(v) glatter_glWindowPos2svARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2svARB_debug(const GLshort *v, const char* file, int line);
#define glWindowPos3dARB(x, y, z) glatter_glWindowPos3dARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3dARB_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glWindowPos3dvARB(v) glatter_glWindowPos3dvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3dvARB_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos3fARB(x, y, z) glatter_glWindowPos3fARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3fARB_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glWindowPos3fvARB(v) glatter_glWindowPos3fvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3fvARB_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos3iARB(x, y, z) glatter_glWindowPos3iARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3iARB_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glWindowPos3ivARB(v) glatter_glWindowPos3ivARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3ivARB_debug(const GLint *v, const char* file, int line);
#define glWindowPos3sARB(x, y, z) glatter_glWindowPos3sARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3sARB_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glWindowPos3svARB(v) glatter_glWindowPos3svARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3svARB_debug(const GLshort *v, const char* file, int line);
#endif // defined(GL_ARB_window_pos)
#if defined(GL_ATI_draw_buffers)
#define glDrawBuffersATI(n, bufs) glatter_glDrawBuffersATI_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersATI_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_ATI_draw_buffers)
#if defined(GL_ATI_element_array)
#define glDrawElementArrayATI(mode, count) glatter_glDrawElementArrayATI_debug((mode), (count), __FILE__, __LINE__)
void glatter_glDrawElementArrayATI_debug(GLenum mode, GLsizei count, const char* file, int line);
#define glDrawRangeElementArrayATI(mode, start, end, count) glatter_glDrawRangeElementArrayATI_debug((mode), (start), (end), (count), __FILE__, __LINE__)
void glatter_glDrawRangeElementArrayATI_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, const char* file, int line);
#define glElementPointerATI(type, pointer) glatter_glElementPointerATI_debug((type), (pointer), __FILE__, __LINE__)
void glatter_glElementPointerATI_debug(GLenum type, const void *pointer, const char* file, int line);
#endif // defined(GL_ATI_element_array)
#if defined(GL_ATI_envmap_bumpmap)
#define glGetTexBumpParameterfvATI(pname, param) glatter_glGetTexBumpParameterfvATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glGetTexBumpParameterfvATI_debug(GLenum pname, GLfloat *param, const char* file, int line);
#define glGetTexBumpParameterivATI(pname, param) glatter_glGetTexBumpParameterivATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glGetTexBumpParameterivATI_debug(GLenum pname, GLint *param, const char* file, int line);
#define glTexBumpParameterfvATI(pname, param) glatter_glTexBumpParameterfvATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glTexBumpParameterfvATI_debug(GLenum pname, const GLfloat *param, const char* file, int line);
#define glTexBumpParameterivATI(pname, param) glatter_glTexBumpParameterivATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glTexBumpParameterivATI_debug(GLenum pname, const GLint *param, const char* file, int line);
#endif // defined(GL_ATI_envmap_bumpmap)
#if defined(GL_ATI_fragment_shader)
#define glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) glatter_glAlphaFragmentOp1ATI_debug((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), __FILE__, __LINE__)
void glatter_glAlphaFragmentOp1ATI_debug(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, const char* file, int line);
#define glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glAlphaFragmentOp2ATI_debug((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), __FILE__, __LINE__)
void glatter_glAlphaFragmentOp2ATI_debug(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, const char* file, int line);
#define glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glAlphaFragmentOp3ATI_debug((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod), __FILE__, __LINE__)
void glatter_glAlphaFragmentOp3ATI_debug(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod, const char* file, int line);
#define glBeginFragmentShaderATI() glatter_glBeginFragmentShaderATI_debug(__FILE__, __LINE__)
void glatter_glBeginFragmentShaderATI_debug(const char* file, int line);
#define glBindFragmentShaderATI(id) glatter_glBindFragmentShaderATI_debug((id), __FILE__, __LINE__)
void glatter_glBindFragmentShaderATI_debug(GLuint id, const char* file, int line);
#define glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) glatter_glColorFragmentOp1ATI_debug((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), __FILE__, __LINE__)
void glatter_glColorFragmentOp1ATI_debug(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, const char* file, int line);
#define glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glColorFragmentOp2ATI_debug((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), __FILE__, __LINE__)
void glatter_glColorFragmentOp2ATI_debug(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, const char* file, int line);
#define glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glColorFragmentOp3ATI_debug((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod), __FILE__, __LINE__)
void glatter_glColorFragmentOp3ATI_debug(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod, const char* file, int line);
#define glDeleteFragmentShaderATI(id) glatter_glDeleteFragmentShaderATI_debug((id), __FILE__, __LINE__)
void glatter_glDeleteFragmentShaderATI_debug(GLuint id, const char* file, int line);
#define glEndFragmentShaderATI() glatter_glEndFragmentShaderATI_debug(__FILE__, __LINE__)
void glatter_glEndFragmentShaderATI_debug(const char* file, int line);
#define glGenFragmentShadersATI(range) glatter_glGenFragmentShadersATI_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenFragmentShadersATI_debug(GLuint range, const char* file, int line);
#define glPassTexCoordATI(dst, coord, swizzle) glatter_glPassTexCoordATI_debug((dst), (coord), (swizzle), __FILE__, __LINE__)
void glatter_glPassTexCoordATI_debug(GLuint dst, GLuint coord, GLenum swizzle, const char* file, int line);
#define glSampleMapATI(dst, interp, swizzle) glatter_glSampleMapATI_debug((dst), (interp), (swizzle), __FILE__, __LINE__)
void glatter_glSampleMapATI_debug(GLuint dst, GLuint interp, GLenum swizzle, const char* file, int line);
#define glSetFragmentShaderConstantATI(dst, value) glatter_glSetFragmentShaderConstantATI_debug((dst), (value), __FILE__, __LINE__)
void glatter_glSetFragmentShaderConstantATI_debug(GLuint dst, const GLfloat *value, const char* file, int line);
#endif // defined(GL_ATI_fragment_shader)
#if defined(GL_ATI_map_object_buffer)
#define glMapObjectBufferATI(buffer) glatter_glMapObjectBufferATI_debug((buffer), __FILE__, __LINE__)
void * glatter_glMapObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#define glUnmapObjectBufferATI(buffer) glatter_glUnmapObjectBufferATI_debug((buffer), __FILE__, __LINE__)
void glatter_glUnmapObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#endif // defined(GL_ATI_map_object_buffer)
#if defined(GL_ATI_pn_triangles)
#define glPNTrianglesfATI(pname, param) glatter_glPNTrianglesfATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPNTrianglesfATI_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPNTrianglesiATI(pname, param) glatter_glPNTrianglesiATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPNTrianglesiATI_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_ATI_pn_triangles)
#if defined(GL_ATI_separate_stencil)
#define glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask) glatter_glStencilFuncSeparateATI_debug((frontfunc), (backfunc), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparateATI_debug(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask, const char* file, int line);
#define glStencilOpSeparateATI(face, sfail, dpfail, dppass) glatter_glStencilOpSeparateATI_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparateATI_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#endif // defined(GL_ATI_separate_stencil)
#if defined(GL_ATI_vertex_array_object)
#define glArrayObjectATI(array, size, type, stride, buffer, offset) glatter_glArrayObjectATI_debug((array), (size), (type), (stride), (buffer), (offset), __FILE__, __LINE__)
void glatter_glArrayObjectATI_debug(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset, const char* file, int line);
#define glFreeObjectBufferATI(buffer) glatter_glFreeObjectBufferATI_debug((buffer), __FILE__, __LINE__)
void glatter_glFreeObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#define glGetArrayObjectfvATI(array, pname, params) glatter_glGetArrayObjectfvATI_debug((array), (pname), (params), __FILE__, __LINE__)
void glatter_glGetArrayObjectfvATI_debug(GLenum array, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetArrayObjectivATI(array, pname, params) glatter_glGetArrayObjectivATI_debug((array), (pname), (params), __FILE__, __LINE__)
void glatter_glGetArrayObjectivATI_debug(GLenum array, GLenum pname, GLint *params, const char* file, int line);
#define glGetObjectBufferfvATI(buffer, pname, params) glatter_glGetObjectBufferfvATI_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectBufferfvATI_debug(GLuint buffer, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetObjectBufferivATI(buffer, pname, params) glatter_glGetObjectBufferivATI_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectBufferivATI_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetVariantArrayObjectfvATI(id, pname, params) glatter_glGetVariantArrayObjectfvATI_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVariantArrayObjectfvATI_debug(GLuint id, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVariantArrayObjectivATI(id, pname, params) glatter_glGetVariantArrayObjectivATI_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVariantArrayObjectivATI_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glIsObjectBufferATI(buffer) glatter_glIsObjectBufferATI_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#define glNewObjectBufferATI(size, pointer, usage) glatter_glNewObjectBufferATI_debug((size), (pointer), (usage), __FILE__, __LINE__)
GLuint glatter_glNewObjectBufferATI_debug(GLsizei size, const void *pointer, GLenum usage, const char* file, int line);
#define glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve) glatter_glUpdateObjectBufferATI_debug((buffer), (offset), (size), (pointer), (preserve), __FILE__, __LINE__)
void glatter_glUpdateObjectBufferATI_debug(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve, const char* file, int line);
#define glVariantArrayObjectATI(id, type, stride, buffer, offset) glatter_glVariantArrayObjectATI_debug((id), (type), (stride), (buffer), (offset), __FILE__, __LINE__)
void glatter_glVariantArrayObjectATI_debug(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset, const char* file, int line);
#endif // defined(GL_ATI_vertex_array_object)
#if defined(GL_ATI_vertex_attrib_array_object)
#define glGetVertexAttribArrayObjectfvATI(index, pname, params) glatter_glGetVertexAttribArrayObjectfvATI_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribArrayObjectfvATI_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribArrayObjectivATI(index, pname, params) glatter_glGetVertexAttribArrayObjectivATI_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribArrayObjectivATI_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset) glatter_glVertexAttribArrayObjectATI_debug((index), (size), (type), (normalized), (stride), (buffer), (offset), __FILE__, __LINE__)
void glatter_glVertexAttribArrayObjectATI_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset, const char* file, int line);
#endif // defined(GL_ATI_vertex_attrib_array_object)
#if defined(GL_ATI_vertex_streams)
#define glClientActiveVertexStreamATI(stream) glatter_glClientActiveVertexStreamATI_debug((stream), __FILE__, __LINE__)
void glatter_glClientActiveVertexStreamATI_debug(GLenum stream, const char* file, int line);
#define glNormalStream3bATI(stream, nx, ny, nz) glatter_glNormalStream3bATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3bATI_debug(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz, const char* file, int line);
#define glNormalStream3bvATI(stream, coords) glatter_glNormalStream3bvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3bvATI_debug(GLenum stream, const GLbyte *coords, const char* file, int line);
#define glNormalStream3dATI(stream, nx, ny, nz) glatter_glNormalStream3dATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3dATI_debug(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz, const char* file, int line);
#define glNormalStream3dvATI(stream, coords) glatter_glNormalStream3dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glNormalStream3fATI(stream, nx, ny, nz) glatter_glNormalStream3fATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3fATI_debug(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormalStream3fvATI(stream, coords) glatter_glNormalStream3fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glNormalStream3iATI(stream, nx, ny, nz) glatter_glNormalStream3iATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3iATI_debug(GLenum stream, GLint nx, GLint ny, GLint nz, const char* file, int line);
#define glNormalStream3ivATI(stream, coords) glatter_glNormalStream3ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glNormalStream3sATI(stream, nx, ny, nz) glatter_glNormalStream3sATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3sATI_debug(GLenum stream, GLshort nx, GLshort ny, GLshort nz, const char* file, int line);
#define glNormalStream3svATI(stream, coords) glatter_glNormalStream3svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexBlendEnvfATI(pname, param) glatter_glVertexBlendEnvfATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glVertexBlendEnvfATI_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glVertexBlendEnviATI(pname, param) glatter_glVertexBlendEnviATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glVertexBlendEnviATI_debug(GLenum pname, GLint param, const char* file, int line);
#define glVertexStream1dATI(stream, x) glatter_glVertexStream1dATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1dATI_debug(GLenum stream, GLdouble x, const char* file, int line);
#define glVertexStream1dvATI(stream, coords) glatter_glVertexStream1dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream1fATI(stream, x) glatter_glVertexStream1fATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1fATI_debug(GLenum stream, GLfloat x, const char* file, int line);
#define glVertexStream1fvATI(stream, coords) glatter_glVertexStream1fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream1iATI(stream, x) glatter_glVertexStream1iATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1iATI_debug(GLenum stream, GLint x, const char* file, int line);
#define glVertexStream1ivATI(stream, coords) glatter_glVertexStream1ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream1sATI(stream, x) glatter_glVertexStream1sATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1sATI_debug(GLenum stream, GLshort x, const char* file, int line);
#define glVertexStream1svATI(stream, coords) glatter_glVertexStream1svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexStream2dATI(stream, x, y) glatter_glVertexStream2dATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2dATI_debug(GLenum stream, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexStream2dvATI(stream, coords) glatter_glVertexStream2dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream2fATI(stream, x, y) glatter_glVertexStream2fATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2fATI_debug(GLenum stream, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexStream2fvATI(stream, coords) glatter_glVertexStream2fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream2iATI(stream, x, y) glatter_glVertexStream2iATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2iATI_debug(GLenum stream, GLint x, GLint y, const char* file, int line);
#define glVertexStream2ivATI(stream, coords) glatter_glVertexStream2ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream2sATI(stream, x, y) glatter_glVertexStream2sATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2sATI_debug(GLenum stream, GLshort x, GLshort y, const char* file, int line);
#define glVertexStream2svATI(stream, coords) glatter_glVertexStream2svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexStream3dATI(stream, x, y, z) glatter_glVertexStream3dATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3dATI_debug(GLenum stream, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexStream3dvATI(stream, coords) glatter_glVertexStream3dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream3fATI(stream, x, y, z) glatter_glVertexStream3fATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3fATI_debug(GLenum stream, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexStream3fvATI(stream, coords) glatter_glVertexStream3fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream3iATI(stream, x, y, z) glatter_glVertexStream3iATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3iATI_debug(GLenum stream, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexStream3ivATI(stream, coords) glatter_glVertexStream3ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream3sATI(stream, x, y, z) glatter_glVertexStream3sATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3sATI_debug(GLenum stream, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexStream3svATI(stream, coords) glatter_glVertexStream3svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexStream4dATI(stream, x, y, z, w) glatter_glVertexStream4dATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4dATI_debug(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexStream4dvATI(stream, coords) glatter_glVertexStream4dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream4fATI(stream, x, y, z, w) glatter_glVertexStream4fATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4fATI_debug(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexStream4fvATI(stream, coords) glatter_glVertexStream4fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream4iATI(stream, x, y, z, w) glatter_glVertexStream4iATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4iATI_debug(GLenum stream, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexStream4ivATI(stream, coords) glatter_glVertexStream4ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream4sATI(stream, x, y, z, w) glatter_glVertexStream4sATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4sATI_debug(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexStream4svATI(stream, coords) glatter_glVertexStream4svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#endif // defined(GL_ATI_vertex_streams)
#if defined(GL_EXT_EGL_image_storage)
#define glEGLImageTargetTexStorageEXT(target, image, attrib_list) glatter_glEGLImageTargetTexStorageEXT_debug((target), (image), (attrib_list), __FILE__, __LINE__)
void glatter_glEGLImageTargetTexStorageEXT_debug(GLenum target, GLeglImageOES image, const GLint* attrib_list, const char* file, int line);
#define glEGLImageTargetTextureStorageEXT(texture, image, attrib_list) glatter_glEGLImageTargetTextureStorageEXT_debug((texture), (image), (attrib_list), __FILE__, __LINE__)
void glatter_glEGLImageTargetTextureStorageEXT_debug(GLuint texture, GLeglImageOES image, const GLint* attrib_list, const char* file, int line);
#endif // defined(GL_EXT_EGL_image_storage)
#if defined(GL_EXT_bindable_uniform)
#define glGetUniformBufferSizeEXT(program, location) glatter_glGetUniformBufferSizeEXT_debug((program), (location), __FILE__, __LINE__)
GLint glatter_glGetUniformBufferSizeEXT_debug(GLuint program, GLint location, const char* file, int line);
#define glGetUniformOffsetEXT(program, location) glatter_glGetUniformOffsetEXT_debug((program), (location), __FILE__, __LINE__)
GLintptr glatter_glGetUniformOffsetEXT_debug(GLuint program, GLint location, const char* file, int line);
#define glUniformBufferEXT(program, location, buffer) glatter_glUniformBufferEXT_debug((program), (location), (buffer), __FILE__, __LINE__)
void glatter_glUniformBufferEXT_debug(GLuint program, GLint location, GLuint buffer, const char* file, int line);
#endif // defined(GL_EXT_bindable_uniform)
#if defined(GL_EXT_blend_color)
#define glBlendColorEXT(red, green, blue, alpha) glatter_glBlendColorEXT_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColorEXT_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#endif // defined(GL_EXT_blend_color)
#if defined(GL_EXT_blend_equation_separate)
#define glBlendEquationSeparateEXT(modeRGB, modeAlpha) glatter_glBlendEquationSeparateEXT_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateEXT_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#endif // defined(GL_EXT_blend_equation_separate)
#if defined(GL_EXT_blend_func_separate)
#define glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateEXT_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateEXT_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#endif // defined(GL_EXT_blend_func_separate)
#if defined(GL_EXT_blend_minmax)
#define glBlendEquationEXT(mode) glatter_glBlendEquationEXT_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquationEXT_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_blend_minmax)
#if defined(GL_EXT_color_subtable)
#define glColorSubTableEXT(target, start, count, format, type, data) glatter_glColorSubTableEXT_debug((target), (start), (count), (format), (type), (data), __FILE__, __LINE__)
void glatter_glColorSubTableEXT_debug(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glCopyColorSubTableEXT(target, start, x, y, width) glatter_glCopyColorSubTableEXT_debug((target), (start), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorSubTableEXT_debug(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width, const char* file, int line);
#endif // defined(GL_EXT_color_subtable)
#if defined(GL_EXT_compiled_vertex_array)
#define glLockArraysEXT(first, count) glatter_glLockArraysEXT_debug((first), (count), __FILE__, __LINE__)
void glatter_glLockArraysEXT_debug(GLint first, GLsizei count, const char* file, int line);
#define glUnlockArraysEXT() glatter_glUnlockArraysEXT_debug(__FILE__, __LINE__)
void glatter_glUnlockArraysEXT_debug(const char* file, int line);
#endif // defined(GL_EXT_compiled_vertex_array)
#if defined(GL_EXT_convolution)
#define glConvolutionFilter1DEXT(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1DEXT_debug((target), (internalformat), (width), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter1DEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2DEXT_debug((target), (internalformat), (width), (height), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter2DEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionParameterfEXT(target, pname, params) glatter_glConvolutionParameterfEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfEXT_debug(GLenum target, GLenum pname, GLfloat params, const char* file, int line);
#define glConvolutionParameterfvEXT(target, pname, params) glatter_glConvolutionParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfvEXT_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glConvolutionParameteriEXT(target, pname, params) glatter_glConvolutionParameteriEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteriEXT_debug(GLenum target, GLenum pname, GLint params, const char* file, int line);
#define glConvolutionParameterivEXT(target, pname, params) glatter_glConvolutionParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1DEXT_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter1DEXT_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2DEXT_debug((target), (internalformat), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter2DEXT_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glGetConvolutionFilterEXT(target, format, type, image) glatter_glGetConvolutionFilterEXT_debug((target), (format), (type), (image), __FILE__, __LINE__)
void glatter_glGetConvolutionFilterEXT_debug(GLenum target, GLenum format, GLenum type, void *image, const char* file, int line);
#define glGetConvolutionParameterfvEXT(target, pname, params) glatter_glGetConvolutionParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetConvolutionParameterivEXT(target, pname, params) glatter_glGetConvolutionParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSeparableFilterEXT(target, format, type, row, column, span) glatter_glGetSeparableFilterEXT_debug((target), (format), (type), (row), (column), (span), __FILE__, __LINE__)
void glatter_glGetSeparableFilterEXT_debug(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span, const char* file, int line);
#define glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2DEXT_debug((target), (internalformat), (width), (height), (format), (type), (row), (column), __FILE__, __LINE__)
void glatter_glSeparableFilter2DEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column, const char* file, int line);
#endif // defined(GL_EXT_convolution)
#if defined(GL_EXT_coordinate_frame)
#define glBinormal3bEXT(bx, by, bz) glatter_glBinormal3bEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3bEXT_debug(GLbyte bx, GLbyte by, GLbyte bz, const char* file, int line);
#define glBinormal3bvEXT(v) glatter_glBinormal3bvEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3bvEXT_debug(const GLbyte *v, const char* file, int line);
#define glBinormal3dEXT(bx, by, bz) glatter_glBinormal3dEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3dEXT_debug(GLdouble bx, GLdouble by, GLdouble bz, const char* file, int line);
#define glBinormal3dvEXT(v) glatter_glBinormal3dvEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3dvEXT_debug(const GLdouble *v, const char* file, int line);
#define glBinormal3fEXT(bx, by, bz) glatter_glBinormal3fEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3fEXT_debug(GLfloat bx, GLfloat by, GLfloat bz, const char* file, int line);
#define glBinormal3fvEXT(v) glatter_glBinormal3fvEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3fvEXT_debug(const GLfloat *v, const char* file, int line);
#define glBinormal3iEXT(bx, by, bz) glatter_glBinormal3iEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3iEXT_debug(GLint bx, GLint by, GLint bz, const char* file, int line);
#define glBinormal3ivEXT(v) glatter_glBinormal3ivEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3ivEXT_debug(const GLint *v, const char* file, int line);
#define glBinormal3sEXT(bx, by, bz) glatter_glBinormal3sEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3sEXT_debug(GLshort bx, GLshort by, GLshort bz, const char* file, int line);
#define glBinormal3svEXT(v) glatter_glBinormal3svEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3svEXT_debug(const GLshort *v, const char* file, int line);
#define glBinormalPointerEXT(type, stride, pointer) glatter_glBinormalPointerEXT_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glBinormalPointerEXT_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glTangent3bEXT(tx, ty, tz) glatter_glTangent3bEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3bEXT_debug(GLbyte tx, GLbyte ty, GLbyte tz, const char* file, int line);
#define glTangent3bvEXT(v) glatter_glTangent3bvEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3bvEXT_debug(const GLbyte *v, const char* file, int line);
#define glTangent3dEXT(tx, ty, tz) glatter_glTangent3dEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3dEXT_debug(GLdouble tx, GLdouble ty, GLdouble tz, const char* file, int line);
#define glTangent3dvEXT(v) glatter_glTangent3dvEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3dvEXT_debug(const GLdouble *v, const char* file, int line);
#define glTangent3fEXT(tx, ty, tz) glatter_glTangent3fEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3fEXT_debug(GLfloat tx, GLfloat ty, GLfloat tz, const char* file, int line);
#define glTangent3fvEXT(v) glatter_glTangent3fvEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3fvEXT_debug(const GLfloat *v, const char* file, int line);
#define glTangent3iEXT(tx, ty, tz) glatter_glTangent3iEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3iEXT_debug(GLint tx, GLint ty, GLint tz, const char* file, int line);
#define glTangent3ivEXT(v) glatter_glTangent3ivEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3ivEXT_debug(const GLint *v, const char* file, int line);
#define glTangent3sEXT(tx, ty, tz) glatter_glTangent3sEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3sEXT_debug(GLshort tx, GLshort ty, GLshort tz, const char* file, int line);
#define glTangent3svEXT(v) glatter_glTangent3svEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3svEXT_debug(const GLshort *v, const char* file, int line);
#define glTangentPointerEXT(type, stride, pointer) glatter_glTangentPointerEXT_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glTangentPointerEXT_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_coordinate_frame)
#if defined(GL_EXT_copy_texture)
#define glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1DEXT_debug((target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1DEXT_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2DEXT_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2DEXT_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1DEXT_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2DEXT_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DEXT_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_copy_texture)
#if defined(GL_EXT_cull_vertex)
#define glCullParameterdvEXT(pname, params) glatter_glCullParameterdvEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCullParameterdvEXT_debug(GLenum pname, GLdouble *params, const char* file, int line);
#define glCullParameterfvEXT(pname, params) glatter_glCullParameterfvEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCullParameterfvEXT_debug(GLenum pname, GLfloat *params, const char* file, int line);
#endif // defined(GL_EXT_cull_vertex)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_debug((type), (object), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelEXT_debug(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_debug((type), (object), (length), (label), __FILE__, __LINE__)
void glatter_glLabelObjectEXT_debug(GLenum type, GLuint object, GLsizei length, const GLchar *label, const char* file, int line);
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_depth_bounds_test)
#define glDepthBoundsEXT(zmin, zmax) glatter_glDepthBoundsEXT_debug((zmin), (zmax), __FILE__, __LINE__)
void glatter_glDepthBoundsEXT_debug(GLclampd zmin, GLclampd zmax, const char* file, int line);
#endif // defined(GL_EXT_depth_bounds_test)
#if defined(GL_EXT_direct_state_access)
#define glBindMultiTextureEXT(texunit, target, texture) glatter_glBindMultiTextureEXT_debug((texunit), (target), (texture), __FILE__, __LINE__)
void glatter_glBindMultiTextureEXT_debug(GLenum texunit, GLenum target, GLuint texture, const char* file, int line);
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) glatter_glCheckNamedFramebufferStatusEXT_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatusEXT_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) glatter_glClearNamedBufferDataEXT_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferDataEXT_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubDataEXT_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubDataEXT_debug(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClientAttribDefaultEXT(mask) glatter_glClientAttribDefaultEXT_debug((mask), __FILE__, __LINE__)
void glatter_glClientAttribDefaultEXT_debug(GLbitfield mask, const char* file, int line);
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (width), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedMultiTexImage3DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (width), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (width), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedTextureImage3DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (width), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) glatter_glCopyMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) glatter_glCopyMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) glatter_glCopyMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) glatter_glCopyTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) glatter_glCopyTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDisableClientStateIndexedEXT(array, index) glatter_glDisableClientStateIndexedEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glDisableClientStateIndexedEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glDisableClientStateiEXT(array, index) glatter_glDisableClientStateiEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glDisableClientStateiEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glDisableIndexedEXT(target, index) glatter_glDisableIndexedEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glDisableVertexArrayAttribEXT(vaobj, index) glatter_glDisableVertexArrayAttribEXT_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttribEXT_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glDisableVertexArrayEXT(vaobj, array) glatter_glDisableVertexArrayEXT_debug((vaobj), (array), __FILE__, __LINE__)
void glatter_glDisableVertexArrayEXT_debug(GLuint vaobj, GLenum array, const char* file, int line);
#define glEnableClientStateIndexedEXT(array, index) glatter_glEnableClientStateIndexedEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glEnableClientStateIndexedEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glEnableClientStateiEXT(array, index) glatter_glEnableClientStateiEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glEnableClientStateiEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glEnableIndexedEXT(target, index) glatter_glEnableIndexedEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttribEXT(vaobj, index) glatter_glEnableVertexArrayAttribEXT_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttribEXT_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayEXT(vaobj, array) glatter_glEnableVertexArrayEXT_debug((vaobj), (array), __FILE__, __LINE__)
void glatter_glEnableVertexArrayEXT_debug(GLuint vaobj, GLenum array, const char* file, int line);
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) glatter_glFlushMappedNamedBufferRangeEXT_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRangeEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferDrawBufferEXT(framebuffer, mode) glatter_glFramebufferDrawBufferEXT_debug((framebuffer), (mode), __FILE__, __LINE__)
void glatter_glFramebufferDrawBufferEXT_debug(GLuint framebuffer, GLenum mode, const char* file, int line);
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) glatter_glFramebufferDrawBuffersEXT_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glFramebufferDrawBuffersEXT_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glFramebufferReadBufferEXT(framebuffer, mode) glatter_glFramebufferReadBufferEXT_debug((framebuffer), (mode), __FILE__, __LINE__)
void glatter_glFramebufferReadBufferEXT_debug(GLuint framebuffer, GLenum mode, const char* file, int line);
#define glGenerateMultiTexMipmapEXT(texunit, target) glatter_glGenerateMultiTexMipmapEXT_debug((texunit), (target), __FILE__, __LINE__)
void glatter_glGenerateMultiTexMipmapEXT_debug(GLenum texunit, GLenum target, const char* file, int line);
#define glGenerateTextureMipmapEXT(texture, target) glatter_glGenerateTextureMipmapEXT_debug((texture), (target), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmapEXT_debug(GLuint texture, GLenum target, const char* file, int line);
#define glGetBooleanIndexedvEXT(target, index, data) glatter_glGetBooleanIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleanIndexedvEXT_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) glatter_glGetCompressedMultiTexImageEXT_debug((texunit), (target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedMultiTexImageEXT_debug(GLenum texunit, GLenum target, GLint lod, void *img, const char* file, int line);
#define glGetCompressedTextureImageEXT(texture, target, lod, img) glatter_glGetCompressedTextureImageEXT_debug((texture), (target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImageEXT_debug(GLuint texture, GLenum target, GLint lod, void *img, const char* file, int line);
#define glGetDoubleIndexedvEXT(target, index, data) glatter_glGetDoubleIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoubleIndexedvEXT_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetDoublei_vEXT(pname, index, params) glatter_glGetDoublei_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetDoublei_vEXT_debug(GLenum pname, GLuint index, GLdouble *params, const char* file, int line);
#define glGetFloatIndexedvEXT(target, index, data) glatter_glGetFloatIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloatIndexedvEXT_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetFloati_vEXT(pname, index, params) glatter_glGetFloati_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetFloati_vEXT_debug(GLenum pname, GLuint index, GLfloat *params, const char* file, int line);
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetFramebufferParameterivEXT_debug((framebuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameterivEXT_debug(GLuint framebuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerIndexedvEXT(target, index, data) glatter_glGetIntegerIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegerIndexedvEXT_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexEnvfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexEnvivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGendvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGendvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenfvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGenfvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenivEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGenivEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) glatter_glGetMultiTexImageEXT_debug((texunit), (target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetMultiTexImageEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterfvEXT_debug((texunit), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexLevelParameterfvEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterivEXT_debug((texunit), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexLevelParameterivEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterIivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIuivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterIuivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferParameterivEXT(buffer, pname, params) glatter_glGetNamedBufferParameterivEXT_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameterivEXT_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointervEXT(buffer, pname, params) glatter_glGetNamedBufferPointervEXT_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointervEXT_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glGetNamedBufferSubDataEXT_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubDataEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameterivEXT_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameterivEXT_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetNamedFramebufferParameterivEXT_debug((framebuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameterivEXT_debug(GLuint framebuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterIivEXT_debug(GLuint program, GLenum target, GLuint index, GLint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIuivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterIuivEXT_debug(GLuint program, GLenum target, GLuint index, GLuint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterdvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterdvEXT_debug(GLuint program, GLenum target, GLuint index, GLdouble *params, const char* file, int line);
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterfvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterfvEXT_debug(GLuint program, GLenum target, GLuint index, GLfloat *params, const char* file, int line);
#define glGetNamedProgramStringEXT(program, target, pname, string) glatter_glGetNamedProgramStringEXT_debug((program), (target), (pname), (string), __FILE__, __LINE__)
void glatter_glGetNamedProgramStringEXT_debug(GLuint program, GLenum target, GLenum pname, void *string, const char* file, int line);
#define glGetNamedProgramivEXT(program, target, pname, params) glatter_glGetNamedProgramivEXT_debug((program), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramivEXT_debug(GLuint program, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameterivEXT_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameterivEXT_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetPointerIndexedvEXT(target, index, data) glatter_glGetPointerIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetPointerIndexedvEXT_debug(GLenum target, GLuint index, void **data, const char* file, int line);
#define glGetPointeri_vEXT(pname, index, params) glatter_glGetPointeri_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetPointeri_vEXT_debug(GLenum pname, GLuint index, void **params, const char* file, int line);
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) glatter_glGetTextureImageEXT_debug((texture), (target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImageEXT_debug(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterfvEXT_debug((texture), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfvEXT_debug(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterivEXT_debug((texture), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterivEXT_debug(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIivEXT(texture, target, pname, params) glatter_glGetTextureParameterIivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuivEXT(texture, target, pname, params) glatter_glGetTextureParameterIuivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfvEXT(texture, target, pname, params) glatter_glGetTextureParameterfvEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfvEXT_debug(GLuint texture, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameterivEXT(texture, target, pname, params) glatter_glGetTextureParameterivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayIntegeri_vEXT_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIntegeri_vEXT_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) glatter_glGetVertexArrayIntegervEXT_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIntegervEXT_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayPointeri_vEXT_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayPointeri_vEXT_debug(GLuint vaobj, GLuint index, GLenum pname, void **param, const char* file, int line);
#define glGetVertexArrayPointervEXT(vaobj, pname, param) glatter_glGetVertexArrayPointervEXT_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayPointervEXT_debug(GLuint vaobj, GLenum pname, void **param, const char* file, int line);
#define glIsEnabledIndexedEXT(target, index) glatter_glIsEnabledIndexedEXT_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glMapNamedBufferEXT(buffer, access) glatter_glMapNamedBufferEXT_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferEXT_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) glatter_glMapNamedBufferRangeEXT_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRangeEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glMatrixFrustumEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixLoadIdentityEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoaddEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultdEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glMatrixOrthoEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixPopEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixPushEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixRotatedEXT_debug(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixRotatefEXT_debug(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixScaledEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixScalefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixTranslatedEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixTranslatefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) glatter_glMultiTexBufferEXT_debug((texunit), (target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glMultiTexBufferEXT_debug(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) glatter_glMultiTexCoordPointerEXT_debug((texunit), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glMultiTexCoordPointerEXT_debug(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glMultiTexEnvfEXT(texunit, target, pname, param) glatter_glMultiTexEnvfEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexEnvfEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glMultiTexEnvfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexEnvfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexEnviEXT(texunit, target, pname, param) glatter_glMultiTexEnviEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexEnviEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexEnvivEXT(texunit, target, pname, params) glatter_glMultiTexEnvivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexEnvivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexGendEXT(texunit, coord, pname, param) glatter_glMultiTexGendEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGendEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLdouble param, const char* file, int line);
#define glMultiTexGendvEXT(texunit, coord, pname, params) glatter_glMultiTexGendvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGendvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params, const char* file, int line);
#define glMultiTexGenfEXT(texunit, coord, pname, param) glatter_glMultiTexGenfEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGenfEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glMultiTexGenfvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGenfvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexGeniEXT(texunit, coord, pname, param) glatter_glMultiTexGeniEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGeniEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexGenivEXT(texunit, coord, pname, params) glatter_glMultiTexGenivEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGenivEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) glatter_glMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) glatter_glMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glMultiTexImage3DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterIivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIuivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterIuivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glMultiTexParameterfEXT(texunit, target, pname, param) glatter_glMultiTexParameterfEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexParameterfEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glMultiTexParameterfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexParameteriEXT(texunit, target, pname, param) glatter_glMultiTexParameteriEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexParameteriEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexParameterivEXT(texunit, target, pname, params) glatter_glMultiTexParameterivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) glatter_glMultiTexRenderbufferEXT_debug((texunit), (target), (renderbuffer), __FILE__, __LINE__)
void glatter_glMultiTexRenderbufferEXT_debug(GLenum texunit, GLenum target, GLuint renderbuffer, const char* file, int line);
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) glatter_glMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glNamedBufferDataEXT(buffer, size, data, usage) glatter_glNamedBufferDataEXT_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferDataEXT_debug(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorageEXT(buffer, size, data, flags) glatter_glNamedBufferStorageEXT_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorageEXT_debug(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glNamedBufferSubDataEXT_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubDataEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glNamedCopyBufferSubDataEXT_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glNamedCopyBufferSubDataEXT_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) glatter_glNamedFramebufferParameteriEXT_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteriEXT_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbufferEXT_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbufferEXT_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture1DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture1DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture2DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture2DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) glatter_glNamedFramebufferTexture3DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture3DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTextureEXT_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) glatter_glNamedFramebufferTextureFaceEXT_debug((framebuffer), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureFaceEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayerEXT_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayerEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4dEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4dEXT_debug(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4dvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4dvEXT_debug(GLuint program, GLenum target, GLuint index, const GLdouble *params, const char* file, int line);
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4fEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4fEXT_debug(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4fvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4fvEXT_debug(GLuint program, GLenum target, GLuint index, const GLfloat *params, const char* file, int line);
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4iEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4iEXT_debug(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4ivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4ivEXT_debug(GLuint program, GLenum target, GLuint index, const GLint *params, const char* file, int line);
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4uiEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4uiEXT_debug(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4uivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4uivEXT_debug(GLuint program, GLenum target, GLuint index, const GLuint *params, const char* file, int line);
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) glatter_glNamedProgramLocalParameters4fvEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameters4fvEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params, const char* file, int line);
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4ivEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParametersI4ivEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params, const char* file, int line);
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4uivEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParametersI4uivEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params, const char* file, int line);
#define glNamedProgramStringEXT(program, target, format, len, string) glatter_glNamedProgramStringEXT_debug((program), (target), (format), (len), (string), __FILE__, __LINE__)
void glatter_glNamedProgramStringEXT_debug(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string, const char* file, int line);
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorageEXT_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageEXT_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleCoverageEXT_debug((renderbuffer), (coverageSamples), (colorSamples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisampleCoverageEXT_debug(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleEXT_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisampleEXT_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glProgramUniform1dEXT(program, location, x) glatter_glProgramUniform1dEXT_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1dEXT_debug(GLuint program, GLint location, GLdouble x, const char* file, int line);
#define glProgramUniform1dvEXT(program, location, count, value) glatter_glProgramUniform1dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1fEXT_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1iEXT_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1uiEXT_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2dEXT(program, location, x, y) glatter_glProgramUniform2dEXT_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glProgramUniform2dvEXT(program, location, count, value) glatter_glProgramUniform2dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3dEXT(program, location, x, y, z) glatter_glProgramUniform3dEXT_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glProgramUniform3dvEXT(program, location, count, value) glatter_glProgramUniform3dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4dEXT(program, location, x, y, z, w) glatter_glProgramUniform4dEXT_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramUniform4dvEXT(program, location, count, value) glatter_glProgramUniform4dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glPushClientAttribDefaultEXT(mask) glatter_glPushClientAttribDefaultEXT_debug((mask), __FILE__, __LINE__)
void glatter_glPushClientAttribDefaultEXT_debug(GLbitfield mask, const char* file, int line);
#define glTextureBufferEXT(texture, target, internalformat, buffer) glatter_glTextureBufferEXT_debug((texture), (target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBufferEXT_debug(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) glatter_glTextureBufferRangeEXT_debug((texture), (target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRangeEXT_debug(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) glatter_glTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) glatter_glTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTextureImage3DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexturePageCommitmentEXT_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexturePageCommitmentEXT_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#define glTextureParameterIivEXT(texture, target, pname, params) glatter_glTextureParameterIivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuivEXT(texture, target, pname, params) glatter_glTextureParameterIuivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterfEXT(texture, target, pname, param) glatter_glTextureParameterfEXT_debug((texture), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfEXT_debug(GLuint texture, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfvEXT(texture, target, pname, params) glatter_glTextureParameterfvEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterfvEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTextureParameteriEXT(texture, target, pname, param) glatter_glTextureParameteriEXT_debug((texture), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameterivEXT(texture, target, pname, params) glatter_glTextureParameterivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureRenderbufferEXT(texture, target, renderbuffer) glatter_glTextureRenderbufferEXT_debug((texture), (target), (renderbuffer), __FILE__, __LINE__)
void glatter_glTextureRenderbufferEXT_debug(GLuint texture, GLenum target, GLuint renderbuffer, const char* file, int line);
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_debug((texture), (target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisampleEXT_debug((texture), (target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisampleEXT_debug(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisampleEXT_debug((texture), (target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisampleEXT_debug(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUnmapNamedBufferEXT(buffer) glatter_glUnmapNamedBufferEXT_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBufferEXT_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayBindVertexBufferEXT_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayBindVertexBufferEXT_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayColorOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayColorOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) glatter_glVertexArrayEdgeFlagOffsetEXT_debug((vaobj), (buffer), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayEdgeFlagOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayFogCoordOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayFogCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayIndexOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayIndexOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) glatter_glVertexArrayMultiTexCoordOffsetEXT_debug((vaobj), (buffer), (texunit), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayMultiTexCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayNormalOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayNormalOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArraySecondaryColorOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArraySecondaryColorOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayTexCoordOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayTexCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) glatter_glVertexArrayVertexAttribBindingEXT_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribBindingEXT_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) glatter_glVertexArrayVertexAttribDivisorEXT_debug((vaobj), (index), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribDivisorEXT_debug(GLuint vaobj, GLuint index, GLuint divisor, const char* file, int line);
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayVertexAttribFormatEXT_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribIFormatEXT_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribIFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribIOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribIOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribLFormatEXT_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribLFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribLOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribLOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) glatter_glVertexArrayVertexAttribOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (normalized), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) glatter_glVertexArrayVertexBindingDivisorEXT_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBindingDivisorEXT_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayVertexOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#endif // defined(GL_EXT_direct_state_access)
#if defined(GL_EXT_draw_buffers2)
#define glColorMaskIndexedEXT(index, r, g, b, a) glatter_glColorMaskIndexedEXT_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaskIndexedEXT_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers2)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_debug((mode), (start), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedEXT_debug(GLenum mode, GLint start, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_range_elements)
#define glDrawRangeElementsEXT(mode, start, end, count, type, indices) glatter_glDrawRangeElementsEXT_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElementsEXT_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#endif // defined(GL_EXT_draw_range_elements)
#if defined(GL_EXT_external_buffer)
#define glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags) glatter_glBufferStorageExternalEXT_debug((target), (offset), (size), (clientBuffer), (flags), __FILE__, __LINE__)
void glatter_glBufferStorageExternalEXT_debug(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags, const char* file, int line);
#define glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags) glatter_glNamedBufferStorageExternalEXT_debug((buffer), (offset), (size), (clientBuffer), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorageExternalEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags, const char* file, int line);
#endif // defined(GL_EXT_external_buffer)
#if defined(GL_EXT_fog_coord)
#define glFogCoordPointerEXT(type, stride, pointer) glatter_glFogCoordPointerEXT_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glFogCoordPointerEXT_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glFogCoorddEXT(coord) glatter_glFogCoorddEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoorddEXT_debug(GLdouble coord, const char* file, int line);
#define glFogCoorddvEXT(coord) glatter_glFogCoorddvEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoorddvEXT_debug(const GLdouble *coord, const char* file, int line);
#define glFogCoordfEXT(coord) glatter_glFogCoordfEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordfEXT_debug(GLfloat coord, const char* file, int line);
#define glFogCoordfvEXT(coord) glatter_glFogCoordfvEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordfvEXT_debug(const GLfloat *coord, const char* file, int line);
#endif // defined(GL_EXT_fog_coord)
#if defined(GL_EXT_framebuffer_blit)
#define glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferEXT_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebufferEXT_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_EXT_framebuffer_blit)
#if defined(GL_EXT_framebuffer_multisample)
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_framebuffer_multisample)
#if defined(GL_EXT_framebuffer_object)
#define glBindFramebufferEXT(target, framebuffer) glatter_glBindFramebufferEXT_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebufferEXT_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbufferEXT(target, renderbuffer) glatter_glBindRenderbufferEXT_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbufferEXT_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glCheckFramebufferStatusEXT(target) glatter_glCheckFramebufferStatusEXT_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatusEXT_debug(GLenum target, const char* file, int line);
#define glDeleteFramebuffersEXT(n, framebuffers) glatter_glDeleteFramebuffersEXT_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffersEXT_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteRenderbuffersEXT(n, renderbuffers) glatter_glDeleteRenderbuffersEXT_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffersEXT_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbufferEXT_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbufferEXT_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture1DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1DEXT_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture1DEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture2DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2DEXT_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DEXT_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3DEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glGenFramebuffersEXT(n, framebuffers) glatter_glGenFramebuffersEXT_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffersEXT_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffersEXT(n, renderbuffers) glatter_glGenRenderbuffersEXT_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffersEXT_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenerateMipmapEXT(target) glatter_glGenerateMipmapEXT_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmapEXT_debug(GLenum target, const char* file, int line);
#define glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameterivEXT_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameterivEXT_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameterivEXT(target, pname, params) glatter_glGetRenderbufferParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsFramebufferEXT(framebuffer) glatter_glIsFramebufferEXT_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebufferEXT_debug(GLuint framebuffer, const char* file, int line);
#define glIsRenderbufferEXT(renderbuffer) glatter_glIsRenderbufferEXT_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbufferEXT_debug(GLuint renderbuffer, const char* file, int line);
#define glRenderbufferStorageEXT(target, internalformat, width, height) glatter_glRenderbufferStorageEXT_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_framebuffer_object)
#if defined(GL_EXT_geometry_shader4)
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteriEXT_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_EXT_geometry_shader4)
#if defined(GL_EXT_gpu_program_parameters)
#define glProgramEnvParameters4fvEXT(target, index, count, params) glatter_glProgramEnvParameters4fvEXT_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameters4fvEXT_debug(GLenum target, GLuint index, GLsizei count, const GLfloat *params, const char* file, int line);
#define glProgramLocalParameters4fvEXT(target, index, count, params) glatter_glProgramLocalParameters4fvEXT_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameters4fvEXT_debug(GLenum target, GLuint index, GLsizei count, const GLfloat *params, const char* file, int line);
#endif // defined(GL_EXT_gpu_program_parameters)
#if defined(GL_EXT_gpu_shader4)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationEXT_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glGetFragDataLocationEXT(program, name) glatter_glGetFragDataLocationEXT_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocationEXT_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformuivEXT(program, location, params) glatter_glGetUniformuivEXT_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuivEXT_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glUniform1uiEXT(location, v0) glatter_glUniform1uiEXT_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1uiEXT_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uivEXT(location, count, value) glatter_glUniform1uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2uiEXT(location, v0, v1) glatter_glUniform2uiEXT_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2uiEXT_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uivEXT(location, count, value) glatter_glUniform2uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3uiEXT(location, v0, v1, v2) glatter_glUniform3uiEXT_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3uiEXT_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uivEXT(location, count, value) glatter_glUniform3uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4uiEXT(location, v0, v1, v2, v3) glatter_glUniform4uiEXT_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4uiEXT_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uivEXT(location, count, value) glatter_glUniform4uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#endif // defined(GL_EXT_gpu_shader4)
#if defined(GL_EXT_histogram)
#define glGetHistogramEXT(target, reset, format, type, values) glatter_glGetHistogramEXT_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetHistogramEXT_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetHistogramParameterfvEXT(target, pname, params) glatter_glGetHistogramParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogramParameterivEXT(target, pname, params) glatter_glGetHistogramParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMinmaxEXT(target, reset, format, type, values) glatter_glGetMinmaxEXT_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetMinmaxEXT_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetMinmaxParameterfvEXT(target, pname, params) glatter_glGetMinmaxParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMinmaxParameterivEXT(target, pname, params) glatter_glGetMinmaxParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHistogramEXT(target, width, internalformat, sink) glatter_glHistogramEXT_debug((target), (width), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glHistogramEXT_debug(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glMinmaxEXT(target, internalformat, sink) glatter_glMinmaxEXT_debug((target), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glMinmaxEXT_debug(GLenum target, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glResetHistogramEXT(target) glatter_glResetHistogramEXT_debug((target), __FILE__, __LINE__)
void glatter_glResetHistogramEXT_debug(GLenum target, const char* file, int line);
#define glResetMinmaxEXT(target) glatter_glResetMinmaxEXT_debug((target), __FILE__, __LINE__)
void glatter_glResetMinmaxEXT_debug(GLenum target, const char* file, int line);
#endif // defined(GL_EXT_histogram)
#if defined(GL_EXT_index_func)
#define glIndexFuncEXT(func, ref) glatter_glIndexFuncEXT_debug((func), (ref), __FILE__, __LINE__)
void glatter_glIndexFuncEXT_debug(GLenum func, GLclampf ref, const char* file, int line);
#endif // defined(GL_EXT_index_func)
#if defined(GL_EXT_index_material)
#define glIndexMaterialEXT(face, mode) glatter_glIndexMaterialEXT_debug((face), (mode), __FILE__, __LINE__)
void glatter_glIndexMaterialEXT_debug(GLenum face, GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_index_material)
#if defined(GL_EXT_light_texture)
#define glApplyTextureEXT(mode) glatter_glApplyTextureEXT_debug((mode), __FILE__, __LINE__)
void glatter_glApplyTextureEXT_debug(GLenum mode, const char* file, int line);
#define glTextureLightEXT(pname) glatter_glTextureLightEXT_debug((pname), __FILE__, __LINE__)
void glatter_glTextureLightEXT_debug(GLenum pname, const char* file, int line);
#define glTextureMaterialEXT(face, mode) glatter_glTextureMaterialEXT_debug((face), (mode), __FILE__, __LINE__)
void glatter_glTextureMaterialEXT_debug(GLenum face, GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_light_texture)
#if defined(GL_EXT_memory_object)
#define glBufferStorageMemEXT(target, size, memory, offset) glatter_glBufferStorageMemEXT_debug((target), (size), (memory), (offset), __FILE__, __LINE__)
void glatter_glBufferStorageMemEXT_debug(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset, const char* file, int line);
#define glCreateMemoryObjectsEXT(n, memoryObjects) glatter_glCreateMemoryObjectsEXT_debug((n), (memoryObjects), __FILE__, __LINE__)
void glatter_glCreateMemoryObjectsEXT_debug(GLsizei n, GLuint *memoryObjects, const char* file, int line);
#define glDeleteMemoryObjectsEXT(n, memoryObjects) glatter_glDeleteMemoryObjectsEXT_debug((n), (memoryObjects), __FILE__, __LINE__)
void glatter_glDeleteMemoryObjectsEXT_debug(GLsizei n, const GLuint *memoryObjects, const char* file, int line);
#define glGetMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glGetMemoryObjectParameterivEXT_debug((memoryObject), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMemoryObjectParameterivEXT_debug(GLuint memoryObject, GLenum pname, GLint *params, const char* file, int line);
#define glGetUnsignedBytei_vEXT(target, index, data) glatter_glGetUnsignedBytei_vEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetUnsignedBytei_vEXT_debug(GLenum target, GLuint index, GLubyte *data, const char* file, int line);
#define glGetUnsignedBytevEXT(pname, data) glatter_glGetUnsignedBytevEXT_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetUnsignedBytevEXT_debug(GLenum pname, GLubyte *data, const char* file, int line);
#define glIsMemoryObjectEXT(memoryObject) glatter_glIsMemoryObjectEXT_debug((memoryObject), __FILE__, __LINE__)
GLboolean glatter_glIsMemoryObjectEXT_debug(GLuint memoryObject, const char* file, int line);
#define glMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glMemoryObjectParameterivEXT_debug((memoryObject), (pname), (params), __FILE__, __LINE__)
void glatter_glMemoryObjectParameterivEXT_debug(GLuint memoryObject, GLenum pname, const GLint *params, const char* file, int line);
#define glNamedBufferStorageMemEXT(buffer, size, memory, offset) glatter_glNamedBufferStorageMemEXT_debug((buffer), (size), (memory), (offset), __FILE__, __LINE__)
void glatter_glNamedBufferStorageMemEXT_debug(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset) glatter_glTexStorageMem1DEXT_debug((target), (levels), (internalFormat), (width), (memory), (offset), __FILE__, __LINE__)
void glatter_glTexStorageMem1DEXT_debug(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset) glatter_glTexStorageMem2DEXT_debug((target), (levels), (internalFormat), (width), (height), (memory), (offset), __FILE__, __LINE__)
void glatter_glTexStorageMem2DEXT_debug(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTexStorageMem2DMultisampleEXT_debug((target), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
void glatter_glTexStorageMem2DMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset) glatter_glTexStorageMem3DEXT_debug((target), (levels), (internalFormat), (width), (height), (depth), (memory), (offset), __FILE__, __LINE__)
void glatter_glTexStorageMem3DEXT_debug(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTexStorageMem3DMultisampleEXT_debug((target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
void glatter_glTexStorageMem3DMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset) glatter_glTextureStorageMem1DEXT_debug((texture), (levels), (internalFormat), (width), (memory), (offset), __FILE__, __LINE__)
void glatter_glTextureStorageMem1DEXT_debug(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset) glatter_glTextureStorageMem2DEXT_debug((texture), (levels), (internalFormat), (width), (height), (memory), (offset), __FILE__, __LINE__)
void glatter_glTextureStorageMem2DEXT_debug(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem2DMultisampleEXT_debug((texture), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
void glatter_glTextureStorageMem2DMultisampleEXT_debug(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset) glatter_glTextureStorageMem3DEXT_debug((texture), (levels), (internalFormat), (width), (height), (depth), (memory), (offset), __FILE__, __LINE__)
void glatter_glTextureStorageMem3DEXT_debug(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, const char* file, int line);
#define glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem3DMultisampleEXT_debug((texture), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset), __FILE__, __LINE__)
void glatter_glTextureStorageMem3DMultisampleEXT_debug(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset, const char* file, int line);
#endif // defined(GL_EXT_memory_object)
#if defined(GL_EXT_memory_object_fd)
#define glImportMemoryFdEXT(memory, size, handleType, fd) glatter_glImportMemoryFdEXT_debug((memory), (size), (handleType), (fd), __FILE__, __LINE__)
void glatter_glImportMemoryFdEXT_debug(GLuint memory, GLuint64 size, GLenum handleType, GLint fd, const char* file, int line);
#endif // defined(GL_EXT_memory_object_fd)
#if defined(GL_EXT_memory_object_win32)
#define glImportMemoryWin32HandleEXT(memory, size, handleType, handle) glatter_glImportMemoryWin32HandleEXT_debug((memory), (size), (handleType), (handle), __FILE__, __LINE__)
void glatter_glImportMemoryWin32HandleEXT_debug(GLuint memory, GLuint64 size, GLenum handleType, void *handle, const char* file, int line);
#define glImportMemoryWin32NameEXT(memory, size, handleType, name) glatter_glImportMemoryWin32NameEXT_debug((memory), (size), (handleType), (name), __FILE__, __LINE__)
void glatter_glImportMemoryWin32NameEXT_debug(GLuint memory, GLuint64 size, GLenum handleType, const void *name, const char* file, int line);
#endif // defined(GL_EXT_memory_object_win32)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysEXT_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisample)
#define glSampleMaskEXT(value, invert) glatter_glSampleMaskEXT_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleMaskEXT_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glSamplePatternEXT(pattern) glatter_glSamplePatternEXT_debug((pattern), __FILE__, __LINE__)
void glatter_glSamplePatternEXT_debug(GLenum pattern, const char* file, int line);
#endif // defined(GL_EXT_multisample)
#if defined(GL_EXT_paletted_texture)
#define glColorTableEXT(target, internalFormat, width, format, type, table) glatter_glColorTableEXT_debug((target), (internalFormat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTableEXT_debug(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table, const char* file, int line);
#define glGetColorTableEXT(target, format, type, data) glatter_glGetColorTableEXT_debug((target), (format), (type), (data), __FILE__, __LINE__)
void glatter_glGetColorTableEXT_debug(GLenum target, GLenum format, GLenum type, void *data, const char* file, int line);
#define glGetColorTableParameterfvEXT(target, pname, params) glatter_glGetColorTableParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameterivEXT(target, pname, params) glatter_glGetColorTableParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#endif // defined(GL_EXT_paletted_texture)
#if defined(GL_EXT_pixel_transform)
#define glGetPixelTransformParameterfvEXT(target, pname, params) glatter_glGetPixelTransformParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTransformParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetPixelTransformParameterivEXT(target, pname, params) glatter_glGetPixelTransformParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTransformParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glPixelTransformParameterfEXT(target, pname, param) glatter_glPixelTransformParameterfEXT_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransformParameterfEXT_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTransformParameterfvEXT(target, pname, params) glatter_glPixelTransformParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glPixelTransformParameterfvEXT_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glPixelTransformParameteriEXT(target, pname, param) glatter_glPixelTransformParameteriEXT_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransformParameteriEXT_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glPixelTransformParameterivEXT(target, pname, params) glatter_glPixelTransformParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glPixelTransformParameterivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_EXT_pixel_transform)
#if defined(GL_EXT_point_parameters)
#define glPointParameterfEXT(pname, param) glatter_glPointParameterfEXT_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterfEXT_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfvEXT(pname, params) glatter_glPointParameterfvEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfvEXT_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#endif // defined(GL_EXT_point_parameters)
#if defined(GL_EXT_polygon_offset)
#define glPolygonOffsetEXT(factor, bias) glatter_glPolygonOffsetEXT_debug((factor), (bias), __FILE__, __LINE__)
void glatter_glPolygonOffsetEXT_debug(GLfloat factor, GLfloat bias, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClampEXT_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_provoking_vertex)
#define glProvokingVertexEXT(mode) glatter_glProvokingVertexEXT_debug((mode), __FILE__, __LINE__)
void glatter_glProvokingVertexEXT_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_provoking_vertex)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_debug((samples), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glRasterSamplesEXT_debug(GLuint samples, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_secondary_color)
#define glSecondaryColor3bEXT(red, green, blue) glatter_glSecondaryColor3bEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3bEXT_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glSecondaryColor3bvEXT(v) glatter_glSecondaryColor3bvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3bvEXT_debug(const GLbyte *v, const char* file, int line);
#define glSecondaryColor3dEXT(red, green, blue) glatter_glSecondaryColor3dEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3dEXT_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glSecondaryColor3dvEXT(v) glatter_glSecondaryColor3dvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3dvEXT_debug(const GLdouble *v, const char* file, int line);
#define glSecondaryColor3fEXT(red, green, blue) glatter_glSecondaryColor3fEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3fEXT_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glSecondaryColor3fvEXT(v) glatter_glSecondaryColor3fvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3fvEXT_debug(const GLfloat *v, const char* file, int line);
#define glSecondaryColor3iEXT(red, green, blue) glatter_glSecondaryColor3iEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3iEXT_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glSecondaryColor3ivEXT(v) glatter_glSecondaryColor3ivEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3ivEXT_debug(const GLint *v, const char* file, int line);
#define glSecondaryColor3sEXT(red, green, blue) glatter_glSecondaryColor3sEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3sEXT_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glSecondaryColor3svEXT(v) glatter_glSecondaryColor3svEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3svEXT_debug(const GLshort *v, const char* file, int line);
#define glSecondaryColor3ubEXT(red, green, blue) glatter_glSecondaryColor3ubEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3ubEXT_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glSecondaryColor3ubvEXT(v) glatter_glSecondaryColor3ubvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3ubvEXT_debug(const GLubyte *v, const char* file, int line);
#define glSecondaryColor3uiEXT(red, green, blue) glatter_glSecondaryColor3uiEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3uiEXT_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glSecondaryColor3uivEXT(v) glatter_glSecondaryColor3uivEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3uivEXT_debug(const GLuint *v, const char* file, int line);
#define glSecondaryColor3usEXT(red, green, blue) glatter_glSecondaryColor3usEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3usEXT_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glSecondaryColor3usvEXT(v) glatter_glSecondaryColor3usvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3usvEXT_debug(const GLushort *v, const char* file, int line);
#define glSecondaryColorPointerEXT(size, type, stride, pointer) glatter_glSecondaryColorPointerEXT_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glSecondaryColorPointerEXT_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_secondary_color)
#if defined(GL_EXT_semaphore)
#define glDeleteSemaphoresEXT(n, semaphores) glatter_glDeleteSemaphoresEXT_debug((n), (semaphores), __FILE__, __LINE__)
void glatter_glDeleteSemaphoresEXT_debug(GLsizei n, const GLuint *semaphores, const char* file, int line);
#define glGenSemaphoresEXT(n, semaphores) glatter_glGenSemaphoresEXT_debug((n), (semaphores), __FILE__, __LINE__)
void glatter_glGenSemaphoresEXT_debug(GLsizei n, GLuint *semaphores, const char* file, int line);
#define glGetSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glGetSemaphoreParameterui64vEXT_debug((semaphore), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSemaphoreParameterui64vEXT_debug(GLuint semaphore, GLenum pname, GLuint64 *params, const char* file, int line);
#define glIsSemaphoreEXT(semaphore) glatter_glIsSemaphoreEXT_debug((semaphore), __FILE__, __LINE__)
GLboolean glatter_glIsSemaphoreEXT_debug(GLuint semaphore, const char* file, int line);
#define glSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glSemaphoreParameterui64vEXT_debug((semaphore), (pname), (params), __FILE__, __LINE__)
void glatter_glSemaphoreParameterui64vEXT_debug(GLuint semaphore, GLenum pname, const GLuint64 *params, const char* file, int line);
#define glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts) glatter_glSignalSemaphoreEXT_debug((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (dstLayouts), __FILE__, __LINE__)
void glatter_glSignalSemaphoreEXT_debug(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts, const char* file, int line);
#define glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts) glatter_glWaitSemaphoreEXT_debug((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (srcLayouts), __FILE__, __LINE__)
void glatter_glWaitSemaphoreEXT_debug(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts, const char* file, int line);
#endif // defined(GL_EXT_semaphore)
#if defined(GL_EXT_semaphore_fd)
#define glImportSemaphoreFdEXT(semaphore, handleType, fd) glatter_glImportSemaphoreFdEXT_debug((semaphore), (handleType), (fd), __FILE__, __LINE__)
void glatter_glImportSemaphoreFdEXT_debug(GLuint semaphore, GLenum handleType, GLint fd, const char* file, int line);
#endif // defined(GL_EXT_semaphore_fd)
#if defined(GL_EXT_semaphore_win32)
#define glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle) glatter_glImportSemaphoreWin32HandleEXT_debug((semaphore), (handleType), (handle), __FILE__, __LINE__)
void glatter_glImportSemaphoreWin32HandleEXT_debug(GLuint semaphore, GLenum handleType, void *handle, const char* file, int line);
#define glImportSemaphoreWin32NameEXT(semaphore, handleType, name) glatter_glImportSemaphoreWin32NameEXT_debug((semaphore), (handleType), (name), __FILE__, __LINE__)
void glatter_glImportSemaphoreWin32NameEXT_debug(GLuint semaphore, GLenum handleType, const void *name, const char* file, int line);
#endif // defined(GL_EXT_semaphore_win32)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT_debug((program), __FILE__, __LINE__)
void glatter_glActiveProgramEXT_debug(GLuint program, const char* file, int line);
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT_debug((type), (string), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramEXT_debug(GLenum type, const GLchar *string, const char* file, int line);
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT_debug((type), (program), __FILE__, __LINE__)
void glatter_glUseShaderProgramEXT_debug(GLenum type, GLuint program, const char* file, int line);
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#define glFramebufferFetchBarrierEXT() glatter_glFramebufferFetchBarrierEXT_debug(__FILE__, __LINE__)
void glatter_glFramebufferFetchBarrierEXT_debug(const char* file, int line);
#endif // defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#if defined(GL_EXT_shader_image_load_store)
#define glBindImageTextureEXT(index, texture, level, layered, layer, access, format) glatter_glBindImageTextureEXT_debug((index), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTextureEXT_debug(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format, const char* file, int line);
#define glMemoryBarrierEXT(barriers) glatter_glMemoryBarrierEXT_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierEXT_debug(GLbitfield barriers, const char* file, int line);
#endif // defined(GL_EXT_shader_image_load_store)
#if defined(GL_EXT_stencil_clear_tag)
#define glStencilClearTagEXT(stencilTagBits, stencilClearTag) glatter_glStencilClearTagEXT_debug((stencilTagBits), (stencilClearTag), __FILE__, __LINE__)
void glatter_glStencilClearTagEXT_debug(GLsizei stencilTagBits, GLuint stencilClearTag, const char* file, int line);
#endif // defined(GL_EXT_stencil_clear_tag)
#if defined(GL_EXT_stencil_two_side)
#define glActiveStencilFaceEXT(face) glatter_glActiveStencilFaceEXT_debug((face), __FILE__, __LINE__)
void glatter_glActiveStencilFaceEXT_debug(GLenum face, const char* file, int line);
#endif // defined(GL_EXT_stencil_two_side)
#if defined(GL_EXT_subtexture)
#define glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1DEXT_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1DEXT_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2DEXT_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_EXT_subtexture)
#if defined(GL_EXT_texture3D)
#define glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DEXT_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3DEXT_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DEXT_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_EXT_texture3D)
#if defined(GL_EXT_texture_array)
#define glFramebufferTextureLayerEXT(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerEXT_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayerEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#endif // defined(GL_EXT_texture_array)
#if defined(GL_EXT_texture_buffer_object)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#endif // defined(GL_EXT_texture_buffer_object)
#if defined(GL_EXT_texture_integer)
#define glClearColorIiEXT(red, green, blue, alpha) glatter_glClearColorIiEXT_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorIiEXT_debug(GLint red, GLint green, GLint blue, GLint alpha, const char* file, int line);
#define glClearColorIuiEXT(red, green, blue, alpha) glatter_glClearColorIuiEXT_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorIuiEXT_debug(GLuint red, GLuint green, GLuint blue, GLuint alpha, const char* file, int line);
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuivEXT_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuivEXT_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_EXT_texture_integer)
#if defined(GL_EXT_texture_object)
#define glAreTexturesResidentEXT(n, textures, residences) glatter_glAreTexturesResidentEXT_debug((n), (textures), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreTexturesResidentEXT_debug(GLsizei n, const GLuint *textures, GLboolean *residences, const char* file, int line);
#define glBindTextureEXT(target, texture) glatter_glBindTextureEXT_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTextureEXT_debug(GLenum target, GLuint texture, const char* file, int line);
#define glDeleteTexturesEXT(n, textures) glatter_glDeleteTexturesEXT_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTexturesEXT_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glGenTexturesEXT(n, textures) glatter_glGenTexturesEXT_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTexturesEXT_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glIsTextureEXT(texture) glatter_glIsTextureEXT_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTextureEXT_debug(GLuint texture, const char* file, int line);
#define glPrioritizeTexturesEXT(n, textures, priorities) glatter_glPrioritizeTexturesEXT_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTexturesEXT_debug(GLsizei n, const GLuint *textures, const GLclampf *priorities, const char* file, int line);
#endif // defined(GL_EXT_texture_object)
#if defined(GL_EXT_texture_perturb_normal)
#define glTextureNormalEXT(mode) glatter_glTextureNormalEXT_debug((mode), __FILE__, __LINE__)
void glatter_glTextureNormalEXT_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_texture_perturb_normal)
#if defined(GL_EXT_timer_query)
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64vEXT_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64vEXT_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#endif // defined(GL_EXT_timer_query)
#if defined(GL_EXT_transform_feedback)
#define glBeginTransformFeedbackEXT(primitiveMode) glatter_glBeginTransformFeedbackEXT_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedbackEXT_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBaseEXT(target, index, buffer) glatter_glBindBufferBaseEXT_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBaseEXT_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferOffsetEXT(target, index, buffer, offset) glatter_glBindBufferOffsetEXT_debug((target), (index), (buffer), (offset), __FILE__, __LINE__)
void glatter_glBindBufferOffsetEXT_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, const char* file, int line);
#define glBindBufferRangeEXT(target, index, buffer, offset, size) glatter_glBindBufferRangeEXT_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRangeEXT_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glEndTransformFeedbackEXT() glatter_glEndTransformFeedbackEXT_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedbackEXT_debug(const char* file, int line);
#define glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVaryingEXT_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVaryingEXT_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryingsEXT_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryingsEXT_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#endif // defined(GL_EXT_transform_feedback)
#if defined(GL_EXT_vertex_array)
#define glArrayElementEXT(i) glatter_glArrayElementEXT_debug((i), __FILE__, __LINE__)
void glatter_glArrayElementEXT_debug(GLint i, const char* file, int line);
#define glColorPointerEXT(size, type, stride, count, pointer) glatter_glColorPointerEXT_debug((size), (type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glColorPointerEXT_debug(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glDrawArraysEXT(mode, first, count) glatter_glDrawArraysEXT_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArraysEXT_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glEdgeFlagPointerEXT(stride, count, pointer) glatter_glEdgeFlagPointerEXT_debug((stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glEdgeFlagPointerEXT_debug(GLsizei stride, GLsizei count, const GLboolean *pointer, const char* file, int line);
#define glGetPointervEXT(pname, params) glatter_glGetPointervEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointervEXT_debug(GLenum pname, void **params, const char* file, int line);
#define glIndexPointerEXT(type, stride, count, pointer) glatter_glIndexPointerEXT_debug((type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glIndexPointerEXT_debug(GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glNormalPointerEXT(type, stride, count, pointer) glatter_glNormalPointerEXT_debug((type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointerEXT_debug(GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glTexCoordPointerEXT(size, type, stride, count, pointer) glatter_glTexCoordPointerEXT_debug((size), (type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointerEXT_debug(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glVertexPointerEXT(size, type, stride, count, pointer) glatter_glVertexPointerEXT_debug((size), (type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointerEXT_debug(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_vertex_array)
#if defined(GL_EXT_vertex_attrib_64bit)
#define glGetVertexAttribLdvEXT(index, pname, params) glatter_glGetVertexAttribLdvEXT_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLdvEXT_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glVertexAttribL1dEXT(index, x) glatter_glVertexAttribL1dEXT_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1dEXT_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttribL1dvEXT(index, v) glatter_glVertexAttribL1dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL2dEXT(index, x, y) glatter_glVertexAttribL2dEXT_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2dEXT_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttribL2dvEXT(index, v) glatter_glVertexAttribL2dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL3dEXT(index, x, y, z) glatter_glVertexAttribL3dEXT_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3dEXT_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttribL3dvEXT(index, v) glatter_glVertexAttribL3dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL4dEXT(index, x, y, z, w) glatter_glVertexAttribL4dEXT_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4dEXT_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttribL4dvEXT(index, v) glatter_glVertexAttribL4dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribLPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribLPointerEXT_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribLPointerEXT_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_vertex_attrib_64bit)
#if defined(GL_EXT_vertex_shader)
#define glBeginVertexShaderEXT() glatter_glBeginVertexShaderEXT_debug(__FILE__, __LINE__)
void glatter_glBeginVertexShaderEXT_debug(const char* file, int line);
#define glBindLightParameterEXT(light, value) glatter_glBindLightParameterEXT_debug((light), (value), __FILE__, __LINE__)
GLuint glatter_glBindLightParameterEXT_debug(GLenum light, GLenum value, const char* file, int line);
#define glBindMaterialParameterEXT(face, value) glatter_glBindMaterialParameterEXT_debug((face), (value), __FILE__, __LINE__)
GLuint glatter_glBindMaterialParameterEXT_debug(GLenum face, GLenum value, const char* file, int line);
#define glBindParameterEXT(value) glatter_glBindParameterEXT_debug((value), __FILE__, __LINE__)
GLuint glatter_glBindParameterEXT_debug(GLenum value, const char* file, int line);
#define glBindTexGenParameterEXT(unit, coord, value) glatter_glBindTexGenParameterEXT_debug((unit), (coord), (value), __FILE__, __LINE__)
GLuint glatter_glBindTexGenParameterEXT_debug(GLenum unit, GLenum coord, GLenum value, const char* file, int line);
#define glBindTextureUnitParameterEXT(unit, value) glatter_glBindTextureUnitParameterEXT_debug((unit), (value), __FILE__, __LINE__)
GLuint glatter_glBindTextureUnitParameterEXT_debug(GLenum unit, GLenum value, const char* file, int line);
#define glBindVertexShaderEXT(id) glatter_glBindVertexShaderEXT_debug((id), __FILE__, __LINE__)
void glatter_glBindVertexShaderEXT_debug(GLuint id, const char* file, int line);
#define glDeleteVertexShaderEXT(id) glatter_glDeleteVertexShaderEXT_debug((id), __FILE__, __LINE__)
void glatter_glDeleteVertexShaderEXT_debug(GLuint id, const char* file, int line);
#define glDisableVariantClientStateEXT(id) glatter_glDisableVariantClientStateEXT_debug((id), __FILE__, __LINE__)
void glatter_glDisableVariantClientStateEXT_debug(GLuint id, const char* file, int line);
#define glEnableVariantClientStateEXT(id) glatter_glEnableVariantClientStateEXT_debug((id), __FILE__, __LINE__)
void glatter_glEnableVariantClientStateEXT_debug(GLuint id, const char* file, int line);
#define glEndVertexShaderEXT() glatter_glEndVertexShaderEXT_debug(__FILE__, __LINE__)
void glatter_glEndVertexShaderEXT_debug(const char* file, int line);
#define glExtractComponentEXT(res, src, num) glatter_glExtractComponentEXT_debug((res), (src), (num), __FILE__, __LINE__)
void glatter_glExtractComponentEXT_debug(GLuint res, GLuint src, GLuint num, const char* file, int line);
#define glGenSymbolsEXT(datatype, storagetype, range, components) glatter_glGenSymbolsEXT_debug((datatype), (storagetype), (range), (components), __FILE__, __LINE__)
GLuint glatter_glGenSymbolsEXT_debug(GLenum datatype, GLenum storagetype, GLenum range, GLuint components, const char* file, int line);
#define glGenVertexShadersEXT(range) glatter_glGenVertexShadersEXT_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenVertexShadersEXT_debug(GLuint range, const char* file, int line);
#define glGetInvariantBooleanvEXT(id, value, data) glatter_glGetInvariantBooleanvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetInvariantBooleanvEXT_debug(GLuint id, GLenum value, GLboolean *data, const char* file, int line);
#define glGetInvariantFloatvEXT(id, value, data) glatter_glGetInvariantFloatvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetInvariantFloatvEXT_debug(GLuint id, GLenum value, GLfloat *data, const char* file, int line);
#define glGetInvariantIntegervEXT(id, value, data) glatter_glGetInvariantIntegervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetInvariantIntegervEXT_debug(GLuint id, GLenum value, GLint *data, const char* file, int line);
#define glGetLocalConstantBooleanvEXT(id, value, data) glatter_glGetLocalConstantBooleanvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetLocalConstantBooleanvEXT_debug(GLuint id, GLenum value, GLboolean *data, const char* file, int line);
#define glGetLocalConstantFloatvEXT(id, value, data) glatter_glGetLocalConstantFloatvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetLocalConstantFloatvEXT_debug(GLuint id, GLenum value, GLfloat *data, const char* file, int line);
#define glGetLocalConstantIntegervEXT(id, value, data) glatter_glGetLocalConstantIntegervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetLocalConstantIntegervEXT_debug(GLuint id, GLenum value, GLint *data, const char* file, int line);
#define glGetVariantBooleanvEXT(id, value, data) glatter_glGetVariantBooleanvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantBooleanvEXT_debug(GLuint id, GLenum value, GLboolean *data, const char* file, int line);
#define glGetVariantFloatvEXT(id, value, data) glatter_glGetVariantFloatvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantFloatvEXT_debug(GLuint id, GLenum value, GLfloat *data, const char* file, int line);
#define glGetVariantIntegervEXT(id, value, data) glatter_glGetVariantIntegervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantIntegervEXT_debug(GLuint id, GLenum value, GLint *data, const char* file, int line);
#define glGetVariantPointervEXT(id, value, data) glatter_glGetVariantPointervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantPointervEXT_debug(GLuint id, GLenum value, void **data, const char* file, int line);
#define glInsertComponentEXT(res, src, num) glatter_glInsertComponentEXT_debug((res), (src), (num), __FILE__, __LINE__)
void glatter_glInsertComponentEXT_debug(GLuint res, GLuint src, GLuint num, const char* file, int line);
#define glIsVariantEnabledEXT(id, cap) glatter_glIsVariantEnabledEXT_debug((id), (cap), __FILE__, __LINE__)
GLboolean glatter_glIsVariantEnabledEXT_debug(GLuint id, GLenum cap, const char* file, int line);
#define glSetInvariantEXT(id, type, addr) glatter_glSetInvariantEXT_debug((id), (type), (addr), __FILE__, __LINE__)
void glatter_glSetInvariantEXT_debug(GLuint id, GLenum type, const void *addr, const char* file, int line);
#define glSetLocalConstantEXT(id, type, addr) glatter_glSetLocalConstantEXT_debug((id), (type), (addr), __FILE__, __LINE__)
void glatter_glSetLocalConstantEXT_debug(GLuint id, GLenum type, const void *addr, const char* file, int line);
#define glShaderOp1EXT(op, res, arg1) glatter_glShaderOp1EXT_debug((op), (res), (arg1), __FILE__, __LINE__)
void glatter_glShaderOp1EXT_debug(GLenum op, GLuint res, GLuint arg1, const char* file, int line);
#define glShaderOp2EXT(op, res, arg1, arg2) glatter_glShaderOp2EXT_debug((op), (res), (arg1), (arg2), __FILE__, __LINE__)
void glatter_glShaderOp2EXT_debug(GLenum op, GLuint res, GLuint arg1, GLuint arg2, const char* file, int line);
#define glShaderOp3EXT(op, res, arg1, arg2, arg3) glatter_glShaderOp3EXT_debug((op), (res), (arg1), (arg2), (arg3), __FILE__, __LINE__)
void glatter_glShaderOp3EXT_debug(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3, const char* file, int line);
#define glSwizzleEXT(res, in, outX, outY, outZ, outW) glatter_glSwizzleEXT_debug((res), (in), (outX), (outY), (outZ), (outW), __FILE__, __LINE__)
void glatter_glSwizzleEXT_debug(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW, const char* file, int line);
#define glVariantPointerEXT(id, type, stride, addr) glatter_glVariantPointerEXT_debug((id), (type), (stride), (addr), __FILE__, __LINE__)
void glatter_glVariantPointerEXT_debug(GLuint id, GLenum type, GLuint stride, const void *addr, const char* file, int line);
#define glVariantbvEXT(id, addr) glatter_glVariantbvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantbvEXT_debug(GLuint id, const GLbyte *addr, const char* file, int line);
#define glVariantdvEXT(id, addr) glatter_glVariantdvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantdvEXT_debug(GLuint id, const GLdouble *addr, const char* file, int line);
#define glVariantfvEXT(id, addr) glatter_glVariantfvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantfvEXT_debug(GLuint id, const GLfloat *addr, const char* file, int line);
#define glVariantivEXT(id, addr) glatter_glVariantivEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantivEXT_debug(GLuint id, const GLint *addr, const char* file, int line);
#define glVariantsvEXT(id, addr) glatter_glVariantsvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantsvEXT_debug(GLuint id, const GLshort *addr, const char* file, int line);
#define glVariantubvEXT(id, addr) glatter_glVariantubvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantubvEXT_debug(GLuint id, const GLubyte *addr, const char* file, int line);
#define glVariantuivEXT(id, addr) glatter_glVariantuivEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantuivEXT_debug(GLuint id, const GLuint *addr, const char* file, int line);
#define glVariantusvEXT(id, addr) glatter_glVariantusvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantusvEXT_debug(GLuint id, const GLushort *addr, const char* file, int line);
#define glWriteMaskEXT(res, in, outX, outY, outZ, outW) glatter_glWriteMaskEXT_debug((res), (in), (outX), (outY), (outZ), (outW), __FILE__, __LINE__)
void glatter_glWriteMaskEXT_debug(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW, const char* file, int line);
#endif // defined(GL_EXT_vertex_shader)
#if defined(GL_EXT_vertex_weighting)
#define glVertexWeightPointerEXT(size, type, stride, pointer) glatter_glVertexWeightPointerEXT_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexWeightPointerEXT_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glVertexWeightfEXT(weight) glatter_glVertexWeightfEXT_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeightfEXT_debug(GLfloat weight, const char* file, int line);
#define glVertexWeightfvEXT(weight) glatter_glVertexWeightfvEXT_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeightfvEXT_debug(const GLfloat *weight, const char* file, int line);
#endif // defined(GL_EXT_vertex_weighting)
#if defined(GL_EXT_win32_keyed_mutex)
#define glAcquireKeyedMutexWin32EXT(memory, key, timeout) glatter_glAcquireKeyedMutexWin32EXT_debug((memory), (key), (timeout), __FILE__, __LINE__)
GLboolean glatter_glAcquireKeyedMutexWin32EXT_debug(GLuint memory, GLuint64 key, GLuint timeout, const char* file, int line);
#define glReleaseKeyedMutexWin32EXT(memory, key) glatter_glReleaseKeyedMutexWin32EXT_debug((memory), (key), __FILE__, __LINE__)
GLboolean glatter_glReleaseKeyedMutexWin32EXT_debug(GLuint memory, GLuint64 key, const char* file, int line);
#endif // defined(GL_EXT_win32_keyed_mutex)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_debug((mode), (count), (box), __FILE__, __LINE__)
void glatter_glWindowRectanglesEXT_debug(GLenum mode, GLsizei count, const GLint *box, const char* file, int line);
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_EXT_x11_sync_object)
#define glImportSyncEXT(external_sync_type, external_sync, flags) glatter_glImportSyncEXT_debug((external_sync_type), (external_sync), (flags), __FILE__, __LINE__)
GLsync glatter_glImportSyncEXT_debug(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags, const char* file, int line);
#endif // defined(GL_EXT_x11_sync_object)
#if defined(GL_GREMEDY_frame_terminator)
#define glFrameTerminatorGREMEDY() glatter_glFrameTerminatorGREMEDY_debug(__FILE__, __LINE__)
void glatter_glFrameTerminatorGREMEDY_debug(const char* file, int line);
#endif // defined(GL_GREMEDY_frame_terminator)
#if defined(GL_GREMEDY_string_marker)
#define glStringMarkerGREMEDY(len, string) glatter_glStringMarkerGREMEDY_debug((len), (string), __FILE__, __LINE__)
void glatter_glStringMarkerGREMEDY_debug(GLsizei len, const void *string, const char* file, int line);
#endif // defined(GL_GREMEDY_string_marker)
#if defined(GL_HP_image_transform)
#define glGetImageTransformParameterfvHP(target, pname, params) glatter_glGetImageTransformParameterfvHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetImageTransformParameterfvHP_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetImageTransformParameterivHP(target, pname, params) glatter_glGetImageTransformParameterivHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetImageTransformParameterivHP_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glImageTransformParameterfHP(target, pname, param) glatter_glImageTransformParameterfHP_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glImageTransformParameterfHP_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glImageTransformParameterfvHP(target, pname, params) glatter_glImageTransformParameterfvHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glImageTransformParameterfvHP_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glImageTransformParameteriHP(target, pname, param) glatter_glImageTransformParameteriHP_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glImageTransformParameteriHP_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glImageTransformParameterivHP(target, pname, params) glatter_glImageTransformParameterivHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glImageTransformParameterivHP_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_HP_image_transform)
#if defined(GL_IBM_multimode_draw_arrays)
#define glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride) glatter_glMultiModeDrawArraysIBM_debug((mode), (first), (count), (primcount), (modestride), __FILE__, __LINE__)
void glatter_glMultiModeDrawArraysIBM_debug(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride, const char* file, int line);
#define glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride) glatter_glMultiModeDrawElementsIBM_debug((mode), (count), (type), (indices), (primcount), (modestride), __FILE__, __LINE__)
void glatter_glMultiModeDrawElementsIBM_debug(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride, const char* file, int line);
#endif // defined(GL_IBM_multimode_draw_arrays)
#if defined(GL_IBM_static_data)
#define glFlushStaticDataIBM(target) glatter_glFlushStaticDataIBM_debug((target), __FILE__, __LINE__)
void glatter_glFlushStaticDataIBM_debug(GLenum target, const char* file, int line);
#endif // defined(GL_IBM_static_data)
#if defined(GL_IBM_vertex_array_lists)
#define glColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glColorPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glColorPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glEdgeFlagPointerListIBM(stride, pointer, ptrstride) glatter_glEdgeFlagPointerListIBM_debug((stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glEdgeFlagPointerListIBM_debug(GLint stride, const GLboolean **pointer, GLint ptrstride, const char* file, int line);
#define glFogCoordPointerListIBM(type, stride, pointer, ptrstride) glatter_glFogCoordPointerListIBM_debug((type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glFogCoordPointerListIBM_debug(GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glIndexPointerListIBM(type, stride, pointer, ptrstride) glatter_glIndexPointerListIBM_debug((type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glIndexPointerListIBM_debug(GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glNormalPointerListIBM(type, stride, pointer, ptrstride) glatter_glNormalPointerListIBM_debug((type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glNormalPointerListIBM_debug(GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glSecondaryColorPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glSecondaryColorPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glTexCoordPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glTexCoordPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glVertexPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glVertexPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glVertexPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#endif // defined(GL_IBM_vertex_array_lists)
#if defined(GL_INGR_blend_func_separate)
#define glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateINGR_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateINGR_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#endif // defined(GL_INGR_blend_func_separate)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(__FILE__, __LINE__)
void glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(const char* file, int line);
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_map_texture)
#define glMapTexture2DINTEL(texture, level, access, stride, layout) glatter_glMapTexture2DINTEL_debug((texture), (level), (access), (stride), (layout), __FILE__, __LINE__)
void * glatter_glMapTexture2DINTEL_debug(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout, const char* file, int line);
#define glSyncTextureINTEL(texture) glatter_glSyncTextureINTEL_debug((texture), __FILE__, __LINE__)
void glatter_glSyncTextureINTEL_debug(GLuint texture, const char* file, int line);
#define glUnmapTexture2DINTEL(texture, level) glatter_glUnmapTexture2DINTEL_debug((texture), (level), __FILE__, __LINE__)
void glatter_glUnmapTexture2DINTEL_debug(GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_INTEL_map_texture)
#if defined(GL_INTEL_parallel_arrays)
#define glColorPointervINTEL(size, type, pointer) glatter_glColorPointervINTEL_debug((size), (type), (pointer), __FILE__, __LINE__)
void glatter_glColorPointervINTEL_debug(GLint size, GLenum type, const void **pointer, const char* file, int line);
#define glNormalPointervINTEL(type, pointer) glatter_glNormalPointervINTEL_debug((type), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointervINTEL_debug(GLenum type, const void **pointer, const char* file, int line);
#define glTexCoordPointervINTEL(size, type, pointer) glatter_glTexCoordPointervINTEL_debug((size), (type), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointervINTEL_debug(GLint size, GLenum type, const void **pointer, const char* file, int line);
#define glVertexPointervINTEL(size, type, pointer) glatter_glVertexPointervINTEL_debug((size), (type), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointervINTEL_debug(GLint size, GLenum type, const void **pointer, const char* file, int line);
#endif // defined(GL_INTEL_parallel_arrays)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glBeginPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_debug((queryId), (queryHandle), __FILE__, __LINE__)
void glatter_glCreatePerfQueryINTEL_debug(GLuint queryId, GLuint *queryHandle, const char* file, int line);
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glDeletePerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glEndPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_debug((queryId), __FILE__, __LINE__)
void glatter_glGetFirstPerfQueryIdINTEL_debug(GLuint *queryId, const char* file, int line);
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_debug((queryId), (nextQueryId), __FILE__, __LINE__)
void glatter_glGetNextPerfQueryIdINTEL_debug(GLuint queryId, GLuint *nextQueryId, const char* file, int line);
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_debug((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue), __FILE__, __LINE__)
void glatter_glGetPerfCounterInfoINTEL_debug(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, const char* file, int line);
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_debug((queryHandle), (flags), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfQueryDataINTEL_debug(GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten, const char* file, int line);
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_debug((queryName), (queryId), __FILE__, __LINE__)
void glatter_glGetPerfQueryIdByNameINTEL_debug(GLchar *queryName, GLuint *queryId, const char* file, int line);
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_debug((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask), __FILE__, __LINE__)
void glatter_glGetPerfQueryInfoINTEL_debug(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, const char* file, int line);
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierKHR_debug(const char* file, int line);
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_parallel_shader_compile)
#define glMaxShaderCompilerThreadsKHR(count) glatter_glMaxShaderCompilerThreadsKHR_debug((count), __FILE__, __LINE__)
void glatter_glMaxShaderCompilerThreadsKHR_debug(GLuint count, const char* file, int line);
#endif // defined(GL_KHR_parallel_shader_compile)
#if defined(GL_MESA_resize_buffers)
#define glResizeBuffersMESA() glatter_glResizeBuffersMESA_debug(__FILE__, __LINE__)
void glatter_glResizeBuffersMESA_debug(const char* file, int line);
#endif // defined(GL_MESA_resize_buffers)
#if defined(GL_MESA_window_pos)
#define glWindowPos2dMESA(x, y) glatter_glWindowPos2dMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2dMESA_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glWindowPos2dvMESA(v) glatter_glWindowPos2dvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2dvMESA_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos2fMESA(x, y) glatter_glWindowPos2fMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2fMESA_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glWindowPos2fvMESA(v) glatter_glWindowPos2fvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2fvMESA_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos2iMESA(x, y) glatter_glWindowPos2iMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2iMESA_debug(GLint x, GLint y, const char* file, int line);
#define glWindowPos2ivMESA(v) glatter_glWindowPos2ivMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2ivMESA_debug(const GLint *v, const char* file, int line);
#define glWindowPos2sMESA(x, y) glatter_glWindowPos2sMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2sMESA_debug(GLshort x, GLshort y, const char* file, int line);
#define glWindowPos2svMESA(v) glatter_glWindowPos2svMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2svMESA_debug(const GLshort *v, const char* file, int line);
#define glWindowPos3dMESA(x, y, z) glatter_glWindowPos3dMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3dMESA_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glWindowPos3dvMESA(v) glatter_glWindowPos3dvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3dvMESA_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos3fMESA(x, y, z) glatter_glWindowPos3fMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3fMESA_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glWindowPos3fvMESA(v) glatter_glWindowPos3fvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3fvMESA_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos3iMESA(x, y, z) glatter_glWindowPos3iMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3iMESA_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glWindowPos3ivMESA(v) glatter_glWindowPos3ivMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3ivMESA_debug(const GLint *v, const char* file, int line);
#define glWindowPos3sMESA(x, y, z) glatter_glWindowPos3sMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3sMESA_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glWindowPos3svMESA(v) glatter_glWindowPos3svMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3svMESA_debug(const GLshort *v, const char* file, int line);
#define glWindowPos4dMESA(x, y, z, w) glatter_glWindowPos4dMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4dMESA_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glWindowPos4dvMESA(v) glatter_glWindowPos4dvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4dvMESA_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos4fMESA(x, y, z, w) glatter_glWindowPos4fMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4fMESA_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glWindowPos4fvMESA(v) glatter_glWindowPos4fvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4fvMESA_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos4iMESA(x, y, z, w) glatter_glWindowPos4iMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4iMESA_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glWindowPos4ivMESA(v) glatter_glWindowPos4ivMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4ivMESA_debug(const GLint *v, const char* file, int line);
#define glWindowPos4sMESA(x, y, z, w) glatter_glWindowPos4sMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4sMESA_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glWindowPos4svMESA(v) glatter_glWindowPos4svMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4svMESA_debug(const GLshort *v, const char* file, int line);
#endif // defined(GL_MESA_window_pos)
#if defined(GL_NVX_conditional_render)
#define glBeginConditionalRenderNVX(id) glatter_glBeginConditionalRenderNVX_debug((id), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNVX_debug(GLuint id, const char* file, int line);
#define glEndConditionalRenderNVX() glatter_glEndConditionalRenderNVX_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNVX_debug(const char* file, int line);
#endif // defined(GL_NVX_conditional_render)
#if defined(GL_NVX_linked_gpu_multicast)
#define glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glLGPUCopyImageSubDataNVX_debug((sourceGpu), (destinationGpuMask), (srcName), (srcTarget), (srcLevel), (srcX), (srxY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glLGPUCopyImageSubDataNVX_debug(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glLGPUInterlockNVX() glatter_glLGPUInterlockNVX_debug(__FILE__, __LINE__)
void glatter_glLGPUInterlockNVX_debug(const char* file, int line);
#define glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data) glatter_glLGPUNamedBufferSubDataNVX_debug((gpuMask), (buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glLGPUNamedBufferSubDataNVX_debug(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#endif // defined(GL_NVX_linked_gpu_multicast)
#if defined(GL_NV_alpha_to_coverage_dither_control)
#define glAlphaToCoverageDitherControlNV(mode) glatter_glAlphaToCoverageDitherControlNV_debug((mode), __FILE__, __LINE__)
void glatter_glAlphaToCoverageDitherControlNV_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_NV_alpha_to_coverage_dither_control)
#if defined(GL_NV_bindless_multi_draw_indirect)
#define glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessNV_debug((mode), (indirect), (drawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectBindlessNV_debug(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#define glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessNV_debug((mode), (type), (indirect), (drawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectBindlessNV_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#endif // defined(GL_NV_bindless_multi_draw_indirect)
#if defined(GL_NV_bindless_multi_draw_indirect_count)
#define glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessCountNV_debug((mode), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectBindlessCountNV_debug(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#define glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessCountNV_debug((mode), (type), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectBindlessCountNV_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#endif // defined(GL_NV_bindless_multi_draw_indirect_count)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleNV_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleNV_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleNV_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentNV_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64NV_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64NV_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vNV_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierNV_debug(const char* file, int line);
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glBlendParameteriNV_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV_debug((index), (xcoeff), (ycoeff), __FILE__, __LINE__)
void glatter_glViewportPositionWScaleNV_debug(GLuint index, GLfloat xcoeff, GLfloat ycoeff, const char* file, int line);
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_command_list)
#define glCallCommandListNV(list) glatter_glCallCommandListNV_debug((list), __FILE__, __LINE__)
void glatter_glCallCommandListNV_debug(GLuint list, const char* file, int line);
#define glCommandListSegmentsNV(list, segments) glatter_glCommandListSegmentsNV_debug((list), (segments), __FILE__, __LINE__)
void glatter_glCommandListSegmentsNV_debug(GLuint list, GLuint segments, const char* file, int line);
#define glCompileCommandListNV(list) glatter_glCompileCommandListNV_debug((list), __FILE__, __LINE__)
void glatter_glCompileCommandListNV_debug(GLuint list, const char* file, int line);
#define glCreateCommandListsNV(n, lists) glatter_glCreateCommandListsNV_debug((n), (lists), __FILE__, __LINE__)
void glatter_glCreateCommandListsNV_debug(GLsizei n, GLuint *lists, const char* file, int line);
#define glCreateStatesNV(n, states) glatter_glCreateStatesNV_debug((n), (states), __FILE__, __LINE__)
void glatter_glCreateStatesNV_debug(GLsizei n, GLuint *states, const char* file, int line);
#define glDeleteCommandListsNV(n, lists) glatter_glDeleteCommandListsNV_debug((n), (lists), __FILE__, __LINE__)
void glatter_glDeleteCommandListsNV_debug(GLsizei n, const GLuint *lists, const char* file, int line);
#define glDeleteStatesNV(n, states) glatter_glDeleteStatesNV_debug((n), (states), __FILE__, __LINE__)
void glatter_glDeleteStatesNV_debug(GLsizei n, const GLuint *states, const char* file, int line);
#define glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count) glatter_glDrawCommandsAddressNV_debug((primitiveMode), (indirects), (sizes), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsAddressNV_debug(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count, const char* file, int line);
#define glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count) glatter_glDrawCommandsNV_debug((primitiveMode), (buffer), (indirects), (sizes), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsNV_debug(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count, const char* file, int line);
#define glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesAddressNV_debug((indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsStatesAddressNV_debug(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesNV_debug((buffer), (indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsStatesNV_debug(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glGetCommandHeaderNV(tokenID, size) glatter_glGetCommandHeaderNV_debug((tokenID), (size), __FILE__, __LINE__)
GLuint glatter_glGetCommandHeaderNV_debug(GLenum tokenID, GLuint size, const char* file, int line);
#define glGetStageIndexNV(shadertype) glatter_glGetStageIndexNV_debug((shadertype), __FILE__, __LINE__)
GLushort glatter_glGetStageIndexNV_debug(GLenum shadertype, const char* file, int line);
#define glIsCommandListNV(list) glatter_glIsCommandListNV_debug((list), __FILE__, __LINE__)
GLboolean glatter_glIsCommandListNV_debug(GLuint list, const char* file, int line);
#define glIsStateNV(state) glatter_glIsStateNV_debug((state), __FILE__, __LINE__)
GLboolean glatter_glIsStateNV_debug(GLuint state, const char* file, int line);
#define glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count) glatter_glListDrawCommandsStatesClientNV_debug((list), (segment), (indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glListDrawCommandsStatesClientNV_debug(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glStateCaptureNV(state, mode) glatter_glStateCaptureNV_debug((state), (mode), __FILE__, __LINE__)
void glatter_glStateCaptureNV_debug(GLuint state, GLenum mode, const char* file, int line);
#endif // defined(GL_NV_command_list)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNV_debug(GLuint id, GLenum mode, const char* file, int line);
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNV_debug(const char* file, int line);
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_debug((xbits), (ybits), __FILE__, __LINE__)
void glatter_glSubpixelPrecisionBiasNV_debug(GLuint xbits, GLuint ybits, const char* file, int line);
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_dilate)
#define glConservativeRasterParameterfNV(pname, value) glatter_glConservativeRasterParameterfNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glConservativeRasterParameterfNV_debug(GLenum pname, GLfloat value, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_dilate)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glConservativeRasterParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_image)
#define glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glCopyImageSubDataNV_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glCopyImageSubDataNV_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_NV_copy_image)
#if defined(GL_NV_depth_buffer_float)
#define glClearDepthdNV(depth) glatter_glClearDepthdNV_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthdNV_debug(GLdouble depth, const char* file, int line);
#define glDepthBoundsdNV(zmin, zmax) glatter_glDepthBoundsdNV_debug((zmin), (zmax), __FILE__, __LINE__)
void glatter_glDepthBoundsdNV_debug(GLdouble zmin, GLdouble zmax, const char* file, int line);
#define glDepthRangedNV(zNear, zFar) glatter_glDepthRangedNV_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRangedNV_debug(GLdouble zNear, GLdouble zFar, const char* file, int line);
#endif // defined(GL_NV_depth_buffer_float)
#if defined(GL_NV_draw_texture)
#define glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawTextureNV_debug((texture), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1), __FILE__, __LINE__)
void glatter_glDrawTextureNV_debug(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1, const char* file, int line);
#endif // defined(GL_NV_draw_texture)
#if defined(GL_NV_draw_vulkan_image)
#define glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawVkImageNV_debug((vkImage), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1), __FILE__, __LINE__)
void glatter_glDrawVkImageNV_debug(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1, const char* file, int line);
#define glGetVkProcAddrNV(name) glatter_glGetVkProcAddrNV_debug((name), __FILE__, __LINE__)
GLVULKANPROCNV glatter_glGetVkProcAddrNV_debug(const GLchar *name, const char* file, int line);
#define glSignalVkFenceNV(vkFence) glatter_glSignalVkFenceNV_debug((vkFence), __FILE__, __LINE__)
void glatter_glSignalVkFenceNV_debug(GLuint64 vkFence, const char* file, int line);
#define glSignalVkSemaphoreNV(vkSemaphore) glatter_glSignalVkSemaphoreNV_debug((vkSemaphore), __FILE__, __LINE__)
void glatter_glSignalVkSemaphoreNV_debug(GLuint64 vkSemaphore, const char* file, int line);
#define glWaitVkSemaphoreNV(vkSemaphore) glatter_glWaitVkSemaphoreNV_debug((vkSemaphore), __FILE__, __LINE__)
void glatter_glWaitVkSemaphoreNV_debug(GLuint64 vkSemaphore, const char* file, int line);
#endif // defined(GL_NV_draw_vulkan_image)
#if defined(GL_NV_evaluators)
#define glEvalMapsNV(target, mode) glatter_glEvalMapsNV_debug((target), (mode), __FILE__, __LINE__)
void glatter_glEvalMapsNV_debug(GLenum target, GLenum mode, const char* file, int line);
#define glGetMapAttribParameterfvNV(target, index, pname, params) glatter_glGetMapAttribParameterfvNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapAttribParameterfvNV_debug(GLenum target, GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMapAttribParameterivNV(target, index, pname, params) glatter_glGetMapAttribParameterivNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapAttribParameterivNV_debug(GLenum target, GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points) glatter_glGetMapControlPointsNV_debug((target), (index), (type), (ustride), (vstride), (packed), (points), __FILE__, __LINE__)
void glatter_glGetMapControlPointsNV_debug(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points, const char* file, int line);
#define glGetMapParameterfvNV(target, pname, params) glatter_glGetMapParameterfvNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapParameterfvNV_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMapParameterivNV(target, pname, params) glatter_glGetMapParameterivNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapParameterivNV_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points) glatter_glMapControlPointsNV_debug((target), (index), (type), (ustride), (vstride), (uorder), (vorder), (packed), (points), __FILE__, __LINE__)
void glatter_glMapControlPointsNV_debug(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points, const char* file, int line);
#define glMapParameterfvNV(target, pname, params) glatter_glMapParameterfvNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glMapParameterfvNV_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMapParameterivNV(target, pname, params) glatter_glMapParameterivNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glMapParameterivNV_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_NV_evaluators)
#if defined(GL_NV_explicit_multisample)
#define glGetMultisamplefvNV(pname, index, val) glatter_glGetMultisamplefvNV_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefvNV_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glSampleMaskIndexedNV(index, mask) glatter_glSampleMaskIndexedNV_debug((index), (mask), __FILE__, __LINE__)
void glatter_glSampleMaskIndexedNV_debug(GLuint index, GLbitfield mask, const char* file, int line);
#define glTexRenderbufferNV(target, renderbuffer) glatter_glTexRenderbufferNV_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glTexRenderbufferNV_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#endif // defined(GL_NV_explicit_multisample)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glDeleteFencesNV_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_debug((fence), __FILE__, __LINE__)
void glatter_glFinishFenceNV_debug(GLuint fence, const char* file, int line);
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glGenFencesNV_debug(GLsizei n, GLuint *fences, const char* file, int line);
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_debug((fence), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFenceivNV_debug(GLuint fence, GLenum pname, GLint *params, const char* file, int line);
#define glIsFenceNV(fence) glatter_glIsFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glIsFenceNV_debug(GLuint fence, const char* file, int line);
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_debug((fence), (condition), __FILE__, __LINE__)
void glatter_glSetFenceNV_debug(GLuint fence, GLenum condition, const char* file, int line);
#define glTestFenceNV(fence) glatter_glTestFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glTestFenceNV_debug(GLuint fence, const char* file, int line);
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_debug((color), __FILE__, __LINE__)
void glatter_glFragmentCoverageColorNV_debug(GLuint color, const char* file, int line);
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_fragment_program)
#define glGetProgramNamedParameterdvNV(id, len, name, params) glatter_glGetProgramNamedParameterdvNV_debug((id), (len), (name), (params), __FILE__, __LINE__)
void glatter_glGetProgramNamedParameterdvNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params, const char* file, int line);
#define glGetProgramNamedParameterfvNV(id, len, name, params) glatter_glGetProgramNamedParameterfvNV_debug((id), (len), (name), (params), __FILE__, __LINE__)
void glatter_glGetProgramNamedParameterfvNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params, const char* file, int line);
#define glProgramNamedParameter4dNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4dNV_debug((id), (len), (name), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4dNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramNamedParameter4dvNV(id, len, name, v) glatter_glProgramNamedParameter4dvNV_debug((id), (len), (name), (v), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4dvNV_debug(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v, const char* file, int line);
#define glProgramNamedParameter4fNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4fNV_debug((id), (len), (name), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4fNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramNamedParameter4fvNV(id, len, name, v) glatter_glProgramNamedParameter4fvNV_debug((id), (len), (name), (v), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4fvNV_debug(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_fragment_program)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_debug((components), __FILE__, __LINE__)
void glatter_glCoverageModulationNV_debug(GLenum components, const char* file, int line);
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_debug((n), (v), __FILE__, __LINE__)
void glatter_glCoverageModulationTableNV_debug(GLsizei n, const GLfloat *v, const char* file, int line);
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_debug((bufsize), (v), __FILE__, __LINE__)
void glatter_glGetCoverageModulationTableNV_debug(GLsizei bufsize, GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample_coverage)
#define glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleCoverageNV_debug((target), (coverageSamples), (colorSamples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleCoverageNV_debug(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_NV_framebuffer_multisample_coverage)
#if defined(GL_NV_geometry_program4)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTextureFaceEXT(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceEXT_debug((target), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glFramebufferTextureFaceEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glProgramVertexLimitNV(target, limit) glatter_glProgramVertexLimitNV_debug((target), (limit), __FILE__, __LINE__)
void glatter_glProgramVertexLimitNV_debug(GLenum target, GLint limit, const char* file, int line);
#endif // defined(GL_NV_geometry_program4)
#if defined(GL_NV_gpu_multicast)
#define glMulticastBarrierNV() glatter_glMulticastBarrierNV_debug(__FILE__, __LINE__)
void glatter_glMulticastBarrierNV_debug(const char* file, int line);
#define glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glMulticastBlitFramebufferNV_debug((srcGpu), (dstGpu), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glMulticastBlitFramebufferNV_debug(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data) glatter_glMulticastBufferSubDataNV_debug((gpuMask), (buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glMulticastBufferSubDataNV_debug(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glMulticastCopyBufferSubDataNV_debug((readGpu), (writeGpuMask), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glMulticastCopyBufferSubDataNV_debug(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glMulticastCopyImageSubDataNV_debug((srcGpu), (dstGpuMask), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glMulticastCopyImageSubDataNV_debug(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v) glatter_glMulticastFramebufferSampleLocationsfvNV_debug((gpu), (framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glMulticastFramebufferSampleLocationsfvNV_debug(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glMulticastGetQueryObjecti64vNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjecti64vNV_debug((gpu), (id), (pname), (params), __FILE__, __LINE__)
void glatter_glMulticastGetQueryObjecti64vNV_debug(GLuint gpu, GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glMulticastGetQueryObjectivNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectivNV_debug((gpu), (id), (pname), (params), __FILE__, __LINE__)
void glatter_glMulticastGetQueryObjectivNV_debug(GLuint gpu, GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glMulticastGetQueryObjectui64vNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectui64vNV_debug((gpu), (id), (pname), (params), __FILE__, __LINE__)
void glatter_glMulticastGetQueryObjectui64vNV_debug(GLuint gpu, GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glMulticastGetQueryObjectuivNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectuivNV_debug((gpu), (id), (pname), (params), __FILE__, __LINE__)
void glatter_glMulticastGetQueryObjectuivNV_debug(GLuint gpu, GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glMulticastWaitSyncNV(signalGpu, waitGpuMask) glatter_glMulticastWaitSyncNV_debug((signalGpu), (waitGpuMask), __FILE__, __LINE__)
void glatter_glMulticastWaitSyncNV_debug(GLuint signalGpu, GLbitfield waitGpuMask, const char* file, int line);
#define glRenderGpuMaskNV(mask) glatter_glRenderGpuMaskNV_debug((mask), __FILE__, __LINE__)
void glatter_glRenderGpuMaskNV_debug(GLbitfield mask, const char* file, int line);
#endif // defined(GL_NV_gpu_multicast)
#if defined(GL_NV_gpu_program4)
#define glGetProgramEnvParameterIivNV(target, index, params) glatter_glGetProgramEnvParameterIivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterIivNV_debug(GLenum target, GLuint index, GLint *params, const char* file, int line);
#define glGetProgramEnvParameterIuivNV(target, index, params) glatter_glGetProgramEnvParameterIuivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterIuivNV_debug(GLenum target, GLuint index, GLuint *params, const char* file, int line);
#define glGetProgramLocalParameterIivNV(target, index, params) glatter_glGetProgramLocalParameterIivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterIivNV_debug(GLenum target, GLuint index, GLint *params, const char* file, int line);
#define glGetProgramLocalParameterIuivNV(target, index, params) glatter_glGetProgramLocalParameterIuivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterIuivNV_debug(GLenum target, GLuint index, GLuint *params, const char* file, int line);
#define glProgramEnvParameterI4iNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4iNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4iNV_debug(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glProgramEnvParameterI4ivNV(target, index, params) glatter_glProgramEnvParameterI4ivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4ivNV_debug(GLenum target, GLuint index, const GLint *params, const char* file, int line);
#define glProgramEnvParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4uiNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4uiNV_debug(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glProgramEnvParameterI4uivNV(target, index, params) glatter_glProgramEnvParameterI4uivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4uivNV_debug(GLenum target, GLuint index, const GLuint *params, const char* file, int line);
#define glProgramEnvParametersI4ivNV(target, index, count, params) glatter_glProgramEnvParametersI4ivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParametersI4ivNV_debug(GLenum target, GLuint index, GLsizei count, const GLint *params, const char* file, int line);
#define glProgramEnvParametersI4uivNV(target, index, count, params) glatter_glProgramEnvParametersI4uivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParametersI4uivNV_debug(GLenum target, GLuint index, GLsizei count, const GLuint *params, const char* file, int line);
#define glProgramLocalParameterI4iNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4iNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4iNV_debug(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glProgramLocalParameterI4ivNV(target, index, params) glatter_glProgramLocalParameterI4ivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4ivNV_debug(GLenum target, GLuint index, const GLint *params, const char* file, int line);
#define glProgramLocalParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4uiNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4uiNV_debug(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glProgramLocalParameterI4uivNV(target, index, params) glatter_glProgramLocalParameterI4uivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4uivNV_debug(GLenum target, GLuint index, const GLuint *params, const char* file, int line);
#define glProgramLocalParametersI4ivNV(target, index, count, params) glatter_glProgramLocalParametersI4ivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParametersI4ivNV_debug(GLenum target, GLuint index, GLsizei count, const GLint *params, const char* file, int line);
#define glProgramLocalParametersI4uivNV(target, index, count, params) glatter_glProgramLocalParametersI4uivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParametersI4uivNV_debug(GLenum target, GLuint index, GLsizei count, const GLuint *params, const char* file, int line);
#endif // defined(GL_NV_gpu_program4)
#if defined(GL_NV_gpu_program5)
#define glGetProgramSubroutineParameteruivNV(target, index, param) glatter_glGetProgramSubroutineParameteruivNV_debug((target), (index), (param), __FILE__, __LINE__)
void glatter_glGetProgramSubroutineParameteruivNV_debug(GLenum target, GLuint index, GLuint *param, const char* file, int line);
#define glProgramSubroutineParametersuivNV(target, count, params) glatter_glProgramSubroutineParametersuivNV_debug((target), (count), (params), __FILE__, __LINE__)
void glatter_glProgramSubroutineParametersuivNV_debug(GLenum target, GLsizei count, const GLuint *params, const char* file, int line);
#endif // defined(GL_NV_gpu_program5)
#if defined(GL_NV_half_float)
#define glColor3hNV(red, green, blue) glatter_glColor3hNV_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3hNV_debug(GLhalfNV red, GLhalfNV green, GLhalfNV blue, const char* file, int line);
#define glColor3hvNV(v) glatter_glColor3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glColor3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glColor4hNV(red, green, blue, alpha) glatter_glColor4hNV_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4hNV_debug(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha, const char* file, int line);
#define glColor4hvNV(v) glatter_glColor4hvNV_debug((v), __FILE__, __LINE__)
void glatter_glColor4hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glFogCoordhNV(fog) glatter_glFogCoordhNV_debug((fog), __FILE__, __LINE__)
void glatter_glFogCoordhNV_debug(GLhalfNV fog, const char* file, int line);
#define glFogCoordhvNV(fog) glatter_glFogCoordhvNV_debug((fog), __FILE__, __LINE__)
void glatter_glFogCoordhvNV_debug(const GLhalfNV *fog, const char* file, int line);
#define glMultiTexCoord1hNV(target, s) glatter_glMultiTexCoord1hNV_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1hNV_debug(GLenum target, GLhalfNV s, const char* file, int line);
#define glMultiTexCoord1hvNV(target, v) glatter_glMultiTexCoord1hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glMultiTexCoord2hNV(target, s, t) glatter_glMultiTexCoord2hNV_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2hNV_debug(GLenum target, GLhalfNV s, GLhalfNV t, const char* file, int line);
#define glMultiTexCoord2hvNV(target, v) glatter_glMultiTexCoord2hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glMultiTexCoord3hNV(target, s, t, r) glatter_glMultiTexCoord3hNV_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3hNV_debug(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, const char* file, int line);
#define glMultiTexCoord3hvNV(target, v) glatter_glMultiTexCoord3hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glMultiTexCoord4hNV(target, s, t, r, q) glatter_glMultiTexCoord4hNV_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4hNV_debug(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q, const char* file, int line);
#define glMultiTexCoord4hvNV(target, v) glatter_glMultiTexCoord4hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glNormal3hNV(nx, ny, nz) glatter_glNormal3hNV_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3hNV_debug(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz, const char* file, int line);
#define glNormal3hvNV(v) glatter_glNormal3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glNormal3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glSecondaryColor3hNV(red, green, blue) glatter_glSecondaryColor3hNV_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3hNV_debug(GLhalfNV red, GLhalfNV green, GLhalfNV blue, const char* file, int line);
#define glSecondaryColor3hvNV(v) glatter_glSecondaryColor3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord1hNV(s) glatter_glTexCoord1hNV_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1hNV_debug(GLhalfNV s, const char* file, int line);
#define glTexCoord1hvNV(v) glatter_glTexCoord1hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord2hNV(s, t) glatter_glTexCoord2hNV_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2hNV_debug(GLhalfNV s, GLhalfNV t, const char* file, int line);
#define glTexCoord2hvNV(v) glatter_glTexCoord2hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord3hNV(s, t, r) glatter_glTexCoord3hNV_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3hNV_debug(GLhalfNV s, GLhalfNV t, GLhalfNV r, const char* file, int line);
#define glTexCoord3hvNV(v) glatter_glTexCoord3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord4hNV(s, t, r, q) glatter_glTexCoord4hNV_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4hNV_debug(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q, const char* file, int line);
#define glTexCoord4hvNV(v) glatter_glTexCoord4hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertex2hNV(x, y) glatter_glVertex2hNV_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2hNV_debug(GLhalfNV x, GLhalfNV y, const char* file, int line);
#define glVertex2hvNV(v) glatter_glVertex2hvNV_debug((v), __FILE__, __LINE__)
void glatter_glVertex2hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertex3hNV(x, y, z) glatter_glVertex3hNV_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3hNV_debug(GLhalfNV x, GLhalfNV y, GLhalfNV z, const char* file, int line);
#define glVertex3hvNV(v) glatter_glVertex3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glVertex3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertex4hNV(x, y, z, w) glatter_glVertex4hNV_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4hNV_debug(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w, const char* file, int line);
#define glVertex4hvNV(v) glatter_glVertex4hvNV_debug((v), __FILE__, __LINE__)
void glatter_glVertex4hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib1hNV(index, x) glatter_glVertexAttrib1hNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1hNV_debug(GLuint index, GLhalfNV x, const char* file, int line);
#define glVertexAttrib1hvNV(index, v) glatter_glVertexAttrib1hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib2hNV(index, x, y) glatter_glVertexAttrib2hNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2hNV_debug(GLuint index, GLhalfNV x, GLhalfNV y, const char* file, int line);
#define glVertexAttrib2hvNV(index, v) glatter_glVertexAttrib2hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib3hNV(index, x, y, z) glatter_glVertexAttrib3hNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3hNV_debug(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, const char* file, int line);
#define glVertexAttrib3hvNV(index, v) glatter_glVertexAttrib3hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib4hNV(index, x, y, z, w) glatter_glVertexAttrib4hNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4hNV_debug(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w, const char* file, int line);
#define glVertexAttrib4hvNV(index, v) glatter_glVertexAttrib4hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs1hvNV(index, n, v) glatter_glVertexAttribs1hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs2hvNV(index, n, v) glatter_glVertexAttribs2hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs3hvNV(index, n, v) glatter_glVertexAttribs3hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs4hvNV(index, n, v) glatter_glVertexAttribs4hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexWeighthNV(weight) glatter_glVertexWeighthNV_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeighthNV_debug(GLhalfNV weight, const char* file, int line);
#define glVertexWeighthvNV(weight) glatter_glVertexWeighthvNV_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeighthvNV_debug(const GLhalfNV *weight, const char* file, int line);
#endif // defined(GL_NV_half_float)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_debug((target), (internalformat), (samples), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformatSampleivNV_debug(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_occlusion_query)
#define glBeginOcclusionQueryNV(id) glatter_glBeginOcclusionQueryNV_debug((id), __FILE__, __LINE__)
void glatter_glBeginOcclusionQueryNV_debug(GLuint id, const char* file, int line);
#define glDeleteOcclusionQueriesNV(n, ids) glatter_glDeleteOcclusionQueriesNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteOcclusionQueriesNV_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndOcclusionQueryNV() glatter_glEndOcclusionQueryNV_debug(__FILE__, __LINE__)
void glatter_glEndOcclusionQueryNV_debug(const char* file, int line);
#define glGenOcclusionQueriesNV(n, ids) glatter_glGenOcclusionQueriesNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenOcclusionQueriesNV_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetOcclusionQueryivNV(id, pname, params) glatter_glGetOcclusionQueryivNV_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetOcclusionQueryivNV_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetOcclusionQueryuivNV(id, pname, params) glatter_glGetOcclusionQueryuivNV_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetOcclusionQueryuivNV_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glIsOcclusionQueryNV(id) glatter_glIsOcclusionQueryNV_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsOcclusionQueryNV_debug(GLuint id, const char* file, int line);
#endif // defined(GL_NV_occlusion_query)
#if defined(GL_NV_parameter_buffer_object)
#define glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIivNV_debug((target), (bindingIndex), (wordIndex), (count), (params), __FILE__, __LINE__)
void glatter_glProgramBufferParametersIivNV_debug(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params, const char* file, int line);
#define glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIuivNV_debug((target), (bindingIndex), (wordIndex), (count), (params), __FILE__, __LINE__)
void glatter_glProgramBufferParametersIuivNV_debug(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params, const char* file, int line);
#define glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersfvNV_debug((target), (bindingIndex), (wordIndex), (count), (params), __FILE__, __LINE__)
void glatter_glProgramBufferParametersfvNV_debug(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params, const char* file, int line);
#endif // defined(GL_NV_parameter_buffer_object)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_debug((resultPath), (srcPath), __FILE__, __LINE__)
void glatter_glCopyPathNV_debug(GLuint resultPath, GLuint srcPath, const char* file, int line);
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverFillPathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverStrokePathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_debug((path), (range), __FILE__, __LINE__)
void glatter_glDeletePathsNV_debug(GLuint path, GLsizei range, const char* file, int line);
#define glGenPathsNV(range) glatter_glGenPathsNV_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenPathsNV_debug(GLsizei range, const char* file, int line);
#define glGetPathColorGenfvNV(color, pname, value) glatter_glGetPathColorGenfvNV_debug((color), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathColorGenfvNV_debug(GLenum color, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathColorGenivNV(color, pname, value) glatter_glGetPathColorGenivNV_debug((color), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathColorGenivNV_debug(GLenum color, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_debug((path), (commands), __FILE__, __LINE__)
void glatter_glGetPathCommandsNV_debug(GLuint path, GLubyte *commands, const char* file, int line);
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_debug((path), (coords), __FILE__, __LINE__)
void glatter_glGetPathCoordsNV_debug(GLuint path, GLfloat *coords, const char* file, int line);
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_debug((path), (dashArray), __FILE__, __LINE__)
void glatter_glGetPathDashArrayNV_debug(GLuint path, GLfloat *dashArray, const char* file, int line);
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_debug((path), (startSegment), (numSegments), __FILE__, __LINE__)
GLfloat glatter_glGetPathLengthNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, const char* file, int line);
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_debug((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricRangeNV_debug(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_debug((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricsNV_debug(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterfvNV_debug(GLuint path, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterivNV_debug(GLuint path, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_debug((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing), __FILE__, __LINE__)
void glatter_glGetPathSpacingNV_debug(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing, const char* file, int line);
#define glGetPathTexGenfvNV(texCoordSet, pname, value) glatter_glGetPathTexGenfvNV_debug((texCoordSet), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathTexGenfvNV_debug(GLenum texCoordSet, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathTexGenivNV(texCoordSet, pname, value) glatter_glGetPathTexGenivNV_debug((texCoordSet), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathTexGenivNV_debug(GLenum texCoordSet, GLenum pname, GLint *value, const char* file, int line);
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourcefvNV_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params, const char* file, int line);
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_debug((resultPath), (pathA), (pathB), (weight), __FILE__, __LINE__)
void glatter_glInterpolatePathsNV_debug(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, const char* file, int line);
#define glIsPathNV(path) glatter_glIsPathNV_debug((path), __FILE__, __LINE__)
GLboolean glatter_glIsPathNV_debug(GLuint path, const char* file, int line);
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_debug((path), (mask), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInFillPathNV_debug(GLuint path, GLuint mask, GLfloat x, GLfloat y, const char* file, int line);
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_debug((path), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInStrokePathNV_debug(GLuint path, GLfloat x, GLfloat y, const char* file, int line);
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glPathColorGenNV(color, genMode, colorFormat, coeffs) glatter_glPathColorGenNV_debug((color), (genMode), (colorFormat), (coeffs), __FILE__, __LINE__)
void glatter_glPathColorGenNV_debug(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs, const char* file, int line);
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_debug((path), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCommandsNV_debug(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_debug((path), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCoordsNV_debug(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_debug((func), __FILE__, __LINE__)
void glatter_glPathCoverDepthFuncNV_debug(GLenum func, const char* file, int line);
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_debug((path), (dashCount), (dashArray), __FILE__, __LINE__)
void glatter_glPathDashArrayNV_debug(GLuint path, GLsizei dashCount, const GLfloat *dashArray, const char* file, int line);
#define glPathFogGenNV(genMode) glatter_glPathFogGenNV_debug((genMode), __FILE__, __LINE__)
void glatter_glPathFogGenNV_debug(GLenum genMode, const char* file, int line);
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_debug((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexRangeNV_debug(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2], const char* file, int line);
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphRangeNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphsNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathMemoryGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfNV_debug(GLuint path, GLenum pname, GLfloat value, const char* file, int line);
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfvNV_debug(GLuint path, GLenum pname, const GLfloat *value, const char* file, int line);
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameteriNV_debug(GLuint path, GLenum pname, GLint value, const char* file, int line);
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterivNV_debug(GLuint path, GLenum pname, const GLint *value, const char* file, int line);
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPathStencilDepthOffsetNV_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glPathStencilFuncNV_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_debug((path), (format), (length), (pathString), __FILE__, __LINE__)
void glatter_glPathStringNV_debug(GLuint path, GLenum format, GLsizei length, const void *pathString, const char* file, int line);
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_debug((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCommandsNV_debug(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_debug((path), (coordStart), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCoordsNV_debug(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathTexGenNV(texCoordSet, genMode, components, coeffs) glatter_glPathTexGenNV_debug((texCoordSet), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glPathTexGenNV_debug(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_debug((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY), __FILE__, __LINE__)
GLboolean glatter_glPointAlongPathNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, const char* file, int line);
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_debug((program), (location), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glProgramPathFragmentInputGenNV_debug(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_debug((path), (fillMode), (mask), __FILE__, __LINE__)
void glatter_glStencilFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, const char* file, int line);
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_debug((path), (reference), (mask), __FILE__, __LINE__)
void glatter_glStencilStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, const char* file, int line);
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_debug((path), (fillMode), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, const char* file, int line);
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_debug((path), (reference), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, GLenum coverMode, const char* file, int line);
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_debug((resultPath), (srcPath), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glTransformPathNV_debug(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_debug((resultPath), (numPaths), (paths), (weights), __FILE__, __LINE__)
void glatter_glWeightPathsNV_debug(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_pixel_data_range)
#define glFlushPixelDataRangeNV(target) glatter_glFlushPixelDataRangeNV_debug((target), __FILE__, __LINE__)
void glatter_glFlushPixelDataRangeNV_debug(GLenum target, const char* file, int line);
#define glPixelDataRangeNV(target, length, pointer) glatter_glPixelDataRangeNV_debug((target), (length), (pointer), __FILE__, __LINE__)
void glatter_glPixelDataRangeNV_debug(GLenum target, GLsizei length, const void *pointer, const char* file, int line);
#endif // defined(GL_NV_pixel_data_range)
#if defined(GL_NV_point_sprite)
#define glPointParameteriNV(pname, param) glatter_glPointParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameterivNV(pname, params) glatter_glPointParameterivNV_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterivNV_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_NV_point_sprite)
#if defined(GL_NV_present_video)
#define glGetVideoi64vNV(video_slot, pname, params) glatter_glGetVideoi64vNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoi64vNV_debug(GLuint video_slot, GLenum pname, GLint64EXT *params, const char* file, int line);
#define glGetVideoivNV(video_slot, pname, params) glatter_glGetVideoivNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoivNV_debug(GLuint video_slot, GLenum pname, GLint *params, const char* file, int line);
#define glGetVideoui64vNV(video_slot, pname, params) glatter_glGetVideoui64vNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoui64vNV_debug(GLuint video_slot, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glGetVideouivNV(video_slot, pname, params) glatter_glGetVideouivNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideouivNV_debug(GLuint video_slot, GLenum pname, GLuint *params, const char* file, int line);
#define glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) glatter_glPresentFrameDualFillNV_debug((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (target1), (fill1), (target2), (fill2), (target3), (fill3), __FILE__, __LINE__)
void glatter_glPresentFrameDualFillNV_debug(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3, const char* file, int line);
#define glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) glatter_glPresentFrameKeyedNV_debug((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (key0), (target1), (fill1), (key1), __FILE__, __LINE__)
void glatter_glPresentFrameKeyedNV_debug(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1, const char* file, int line);
#endif // defined(GL_NV_present_video)
#if defined(GL_NV_primitive_restart)
#define glPrimitiveRestartIndexNV(index) glatter_glPrimitiveRestartIndexNV_debug((index), __FILE__, __LINE__)
void glatter_glPrimitiveRestartIndexNV_debug(GLuint index, const char* file, int line);
#define glPrimitiveRestartNV() glatter_glPrimitiveRestartNV_debug(__FILE__, __LINE__)
void glatter_glPrimitiveRestartNV_debug(const char* file, int line);
#endif // defined(GL_NV_primitive_restart)
#if defined(GL_NV_query_resource)
#define glQueryResourceNV(queryType, tagId, bufSize, buffer) glatter_glQueryResourceNV_debug((queryType), (tagId), (bufSize), (buffer), __FILE__, __LINE__)
GLint glatter_glQueryResourceNV_debug(GLenum queryType, GLint tagId, GLuint bufSize, GLint *buffer, const char* file, int line);
#endif // defined(GL_NV_query_resource)
#if defined(GL_NV_query_resource_tag)
#define glDeleteQueryResourceTagNV(n, tagIds) glatter_glDeleteQueryResourceTagNV_debug((n), (tagIds), __FILE__, __LINE__)
void glatter_glDeleteQueryResourceTagNV_debug(GLsizei n, const GLint *tagIds, const char* file, int line);
#define glGenQueryResourceTagNV(n, tagIds) glatter_glGenQueryResourceTagNV_debug((n), (tagIds), __FILE__, __LINE__)
void glatter_glGenQueryResourceTagNV_debug(GLsizei n, GLint *tagIds, const char* file, int line);
#define glQueryResourceTagNV(tagId, tagString) glatter_glQueryResourceTagNV_debug((tagId), (tagString), __FILE__, __LINE__)
void glatter_glQueryResourceTagNV_debug(GLint tagId, const GLchar *tagString, const char* file, int line);
#endif // defined(GL_NV_query_resource_tag)
#if defined(GL_NV_register_combiners)
#define glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage) glatter_glCombinerInputNV_debug((stage), (portion), (variable), (input), (mapping), (componentUsage), __FILE__, __LINE__)
void glatter_glCombinerInputNV_debug(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage, const char* file, int line);
#define glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) glatter_glCombinerOutputNV_debug((stage), (portion), (abOutput), (cdOutput), (sumOutput), (scale), (bias), (abDotProduct), (cdDotProduct), (muxSum), __FILE__, __LINE__)
void glatter_glCombinerOutputNV_debug(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum, const char* file, int line);
#define glCombinerParameterfNV(pname, param) glatter_glCombinerParameterfNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glCombinerParameterfNV_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glCombinerParameterfvNV(pname, params) glatter_glCombinerParameterfvNV_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCombinerParameterfvNV_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glCombinerParameteriNV(pname, param) glatter_glCombinerParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glCombinerParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#define glCombinerParameterivNV(pname, params) glatter_glCombinerParameterivNV_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCombinerParameterivNV_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFinalCombinerInputNV(variable, input, mapping, componentUsage) glatter_glFinalCombinerInputNV_debug((variable), (input), (mapping), (componentUsage), __FILE__, __LINE__)
void glatter_glFinalCombinerInputNV_debug(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage, const char* file, int line);
#define glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterfvNV_debug((stage), (portion), (variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerInputParameterfvNV_debug(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetCombinerInputParameterivNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterivNV_debug((stage), (portion), (variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerInputParameterivNV_debug(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params, const char* file, int line);
#define glGetCombinerOutputParameterfvNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterfvNV_debug((stage), (portion), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerOutputParameterfvNV_debug(GLenum stage, GLenum portion, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetCombinerOutputParameterivNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterivNV_debug((stage), (portion), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerOutputParameterivNV_debug(GLenum stage, GLenum portion, GLenum pname, GLint *params, const char* file, int line);
#define glGetFinalCombinerInputParameterfvNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterfvNV_debug((variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFinalCombinerInputParameterfvNV_debug(GLenum variable, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetFinalCombinerInputParameterivNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterivNV_debug((variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFinalCombinerInputParameterivNV_debug(GLenum variable, GLenum pname, GLint *params, const char* file, int line);
#endif // defined(GL_NV_register_combiners)
#if defined(GL_NV_register_combiners2)
#define glCombinerStageParameterfvNV(stage, pname, params) glatter_glCombinerStageParameterfvNV_debug((stage), (pname), (params), __FILE__, __LINE__)
void glatter_glCombinerStageParameterfvNV_debug(GLenum stage, GLenum pname, const GLfloat *params, const char* file, int line);
#define glGetCombinerStageParameterfvNV(stage, pname, params) glatter_glGetCombinerStageParameterfvNV_debug((stage), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerStageParameterfvNV_debug(GLenum stage, GLenum pname, GLfloat *params, const char* file, int line);
#endif // defined(GL_NV_register_combiners2)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvNV_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvNV_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_debug(__FILE__, __LINE__)
void glatter_glResolveDepthValuesNV_debug(const char* file, int line);
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_shader_buffer_load)
#define glGetBufferParameterui64vNV(target, pname, params) glatter_glGetBufferParameterui64vNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameterui64vNV_debug(GLenum target, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glGetIntegerui64vNV(value, result) glatter_glGetIntegerui64vNV_debug((value), (result), __FILE__, __LINE__)
void glatter_glGetIntegerui64vNV_debug(GLenum value, GLuint64EXT *result, const char* file, int line);
#define glGetNamedBufferParameterui64vNV(buffer, pname, params) glatter_glGetNamedBufferParameterui64vNV_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameterui64vNV_debug(GLuint buffer, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glIsBufferResidentNV(target) glatter_glIsBufferResidentNV_debug((target), __FILE__, __LINE__)
GLboolean glatter_glIsBufferResidentNV_debug(GLenum target, const char* file, int line);
#define glIsNamedBufferResidentNV(buffer) glatter_glIsNamedBufferResidentNV_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsNamedBufferResidentNV_debug(GLuint buffer, const char* file, int line);
#define glMakeBufferNonResidentNV(target) glatter_glMakeBufferNonResidentNV_debug((target), __FILE__, __LINE__)
void glatter_glMakeBufferNonResidentNV_debug(GLenum target, const char* file, int line);
#define glMakeBufferResidentNV(target, access) glatter_glMakeBufferResidentNV_debug((target), (access), __FILE__, __LINE__)
void glatter_glMakeBufferResidentNV_debug(GLenum target, GLenum access, const char* file, int line);
#define glMakeNamedBufferNonResidentNV(buffer) glatter_glMakeNamedBufferNonResidentNV_debug((buffer), __FILE__, __LINE__)
void glatter_glMakeNamedBufferNonResidentNV_debug(GLuint buffer, const char* file, int line);
#define glMakeNamedBufferResidentNV(buffer, access) glatter_glMakeNamedBufferResidentNV_debug((buffer), (access), __FILE__, __LINE__)
void glatter_glMakeNamedBufferResidentNV_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glProgramUniformui64NV(program, location, value) glatter_glProgramUniformui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformui64NV_debug(GLuint program, GLint location, GLuint64EXT value, const char* file, int line);
#define glProgramUniformui64vNV(program, location, count, value) glatter_glProgramUniformui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniformui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniformui64NV(location, value) glatter_glUniformui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformui64NV_debug(GLint location, GLuint64EXT value, const char* file, int line);
#define glUniformui64vNV(location, count, value) glatter_glUniformui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_shader_buffer_load)
#if defined(GL_NV_texture_barrier)
#define glTextureBarrierNV() glatter_glTextureBarrierNV_debug(__FILE__, __LINE__)
void glatter_glTextureBarrierNV_debug(const char* file, int line);
#endif // defined(GL_NV_texture_barrier)
#if defined(GL_NV_texture_multisample)
#define glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTexImage2DMultisampleCoverageNV_debug((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTexImage2DMultisampleCoverageNV_debug(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, const char* file, int line);
#define glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTexImage3DMultisampleCoverageNV_debug((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTexImage3DMultisampleCoverageNV_debug(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleCoverageNV_debug((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage2DMultisampleCoverageNV_debug(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleNV_debug((texture), (target), (samples), (internalFormat), (width), (height), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage2DMultisampleNV_debug(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleCoverageNV_debug((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage3DMultisampleCoverageNV_debug(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleNV_debug((texture), (target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage3DMultisampleNV_debug(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, const char* file, int line);
#endif // defined(GL_NV_texture_multisample)
#if defined(GL_NV_transform_feedback)
#define glActiveVaryingNV(program, name) glatter_glActiveVaryingNV_debug((program), (name), __FILE__, __LINE__)
void glatter_glActiveVaryingNV_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glBeginTransformFeedbackNV(primitiveMode) glatter_glBeginTransformFeedbackNV_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedbackNV_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBaseNV(target, index, buffer) glatter_glBindBufferBaseNV_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBaseNV_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferOffsetNV(target, index, buffer, offset) glatter_glBindBufferOffsetNV_debug((target), (index), (buffer), (offset), __FILE__, __LINE__)
void glatter_glBindBufferOffsetNV_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, const char* file, int line);
#define glBindBufferRangeNV(target, index, buffer, offset, size) glatter_glBindBufferRangeNV_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRangeNV_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glEndTransformFeedbackNV() glatter_glEndTransformFeedbackNV_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedbackNV_debug(const char* file, int line);
#define glGetActiveVaryingNV(program, index, bufSize, length, size, type, name) glatter_glGetActiveVaryingNV_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveVaryingNV_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetTransformFeedbackVaryingNV(program, index, location) glatter_glGetTransformFeedbackVaryingNV_debug((program), (index), (location), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVaryingNV_debug(GLuint program, GLuint index, GLint *location, const char* file, int line);
#define glGetVaryingLocationNV(program, name) glatter_glGetVaryingLocationNV_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetVaryingLocationNV_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glTransformFeedbackAttribsNV(count, attribs, bufferMode) glatter_glTransformFeedbackAttribsNV_debug((count), (attribs), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackAttribsNV_debug(GLsizei count, const GLint *attribs, GLenum bufferMode, const char* file, int line);
#define glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) glatter_glTransformFeedbackStreamAttribsNV_debug((count), (attribs), (nbuffers), (bufstreams), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackStreamAttribsNV_debug(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode, const char* file, int line);
#define glTransformFeedbackVaryingsNV(program, count, locations, bufferMode) glatter_glTransformFeedbackVaryingsNV_debug((program), (count), (locations), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryingsNV_debug(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode, const char* file, int line);
#endif // defined(GL_NV_transform_feedback)
#if defined(GL_NV_transform_feedback2)
#define glBindTransformFeedbackNV(target, id) glatter_glBindTransformFeedbackNV_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedbackNV_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteTransformFeedbacksNV(n, ids) glatter_glDeleteTransformFeedbacksNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacksNV_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDrawTransformFeedbackNV(mode, id) glatter_glDrawTransformFeedbackNV_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackNV_debug(GLenum mode, GLuint id, const char* file, int line);
#define glGenTransformFeedbacksNV(n, ids) glatter_glGenTransformFeedbacksNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacksNV_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glIsTransformFeedbackNV(id) glatter_glIsTransformFeedbackNV_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedbackNV_debug(GLuint id, const char* file, int line);
#define glPauseTransformFeedbackNV() glatter_glPauseTransformFeedbackNV_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedbackNV_debug(const char* file, int line);
#define glResumeTransformFeedbackNV() glatter_glResumeTransformFeedbackNV_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedbackNV_debug(const char* file, int line);
#endif // defined(GL_NV_transform_feedback2)
#if defined(GL_NV_vdpau_interop)
#define glVDPAUFiniNV() glatter_glVDPAUFiniNV_debug(__FILE__, __LINE__)
void glatter_glVDPAUFiniNV_debug(const char* file, int line);
#define glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values) glatter_glVDPAUGetSurfaceivNV_debug((surface), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glVDPAUGetSurfaceivNV_debug(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glVDPAUInitNV(vdpDevice, getProcAddress) glatter_glVDPAUInitNV_debug((vdpDevice), (getProcAddress), __FILE__, __LINE__)
void glatter_glVDPAUInitNV_debug(const void *vdpDevice, const void *getProcAddress, const char* file, int line);
#define glVDPAUIsSurfaceNV(surface) glatter_glVDPAUIsSurfaceNV_debug((surface), __FILE__, __LINE__)
GLboolean glatter_glVDPAUIsSurfaceNV_debug(GLvdpauSurfaceNV surface, const char* file, int line);
#define glVDPAUMapSurfacesNV(numSurfaces, surfaces) glatter_glVDPAUMapSurfacesNV_debug((numSurfaces), (surfaces), __FILE__, __LINE__)
void glatter_glVDPAUMapSurfacesNV_debug(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces, const char* file, int line);
#define glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterOutputSurfaceNV_debug((vdpSurface), (target), (numTextureNames), (textureNames), __FILE__, __LINE__)
GLvdpauSurfaceNV glatter_glVDPAURegisterOutputSurfaceNV_debug(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, const char* file, int line);
#define glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterVideoSurfaceNV_debug((vdpSurface), (target), (numTextureNames), (textureNames), __FILE__, __LINE__)
GLvdpauSurfaceNV glatter_glVDPAURegisterVideoSurfaceNV_debug(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, const char* file, int line);
#define glVDPAUSurfaceAccessNV(surface, access) glatter_glVDPAUSurfaceAccessNV_debug((surface), (access), __FILE__, __LINE__)
void glatter_glVDPAUSurfaceAccessNV_debug(GLvdpauSurfaceNV surface, GLenum access, const char* file, int line);
#define glVDPAUUnmapSurfacesNV(numSurface, surfaces) glatter_glVDPAUUnmapSurfacesNV_debug((numSurface), (surfaces), __FILE__, __LINE__)
void glatter_glVDPAUUnmapSurfacesNV_debug(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces, const char* file, int line);
#define glVDPAUUnregisterSurfaceNV(surface) glatter_glVDPAUUnregisterSurfaceNV_debug((surface), __FILE__, __LINE__)
void glatter_glVDPAUUnregisterSurfaceNV_debug(GLvdpauSurfaceNV surface, const char* file, int line);
#endif // defined(GL_NV_vdpau_interop)
#if defined(GL_NV_vertex_array_range)
#define glFlushVertexArrayRangeNV() glatter_glFlushVertexArrayRangeNV_debug(__FILE__, __LINE__)
void glatter_glFlushVertexArrayRangeNV_debug(const char* file, int line);
#define glVertexArrayRangeNV(length, pointer) glatter_glVertexArrayRangeNV_debug((length), (pointer), __FILE__, __LINE__)
void glatter_glVertexArrayRangeNV_debug(GLsizei length, const void *pointer, const char* file, int line);
#endif // defined(GL_NV_vertex_array_range)
#if defined(GL_NV_vertex_attrib_integer_64bit)
#define glGetVertexAttribLi64vNV(index, pname, params) glatter_glGetVertexAttribLi64vNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLi64vNV_debug(GLuint index, GLenum pname, GLint64EXT *params, const char* file, int line);
#define glGetVertexAttribLui64vNV(index, pname, params) glatter_glGetVertexAttribLui64vNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vNV_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glVertexAttribL1i64NV(index, x) glatter_glVertexAttribL1i64NV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1i64NV_debug(GLuint index, GLint64EXT x, const char* file, int line);
#define glVertexAttribL1i64vNV(index, v) glatter_glVertexAttribL1i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL1ui64NV(index, x) glatter_glVertexAttribL1ui64NV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64NV_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vNV(index, v) glatter_glVertexAttribL1ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL2i64NV(index, x, y) glatter_glVertexAttribL2i64NV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glVertexAttribL2i64vNV(index, v) glatter_glVertexAttribL2i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL2ui64NV(index, x, y) glatter_glVertexAttribL2ui64NV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glVertexAttribL2ui64vNV(index, v) glatter_glVertexAttribL2ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL3i64NV(index, x, y, z) glatter_glVertexAttribL3i64NV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glVertexAttribL3i64vNV(index, v) glatter_glVertexAttribL3i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL3ui64NV(index, x, y, z) glatter_glVertexAttribL3ui64NV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glVertexAttribL3ui64vNV(index, v) glatter_glVertexAttribL3ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL4i64NV(index, x, y, z, w) glatter_glVertexAttribL4i64NV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glVertexAttribL4i64vNV(index, v) glatter_glVertexAttribL4i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL4ui64NV(index, x, y, z, w) glatter_glVertexAttribL4ui64NV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glVertexAttribL4ui64vNV(index, v) glatter_glVertexAttribL4ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribLFormatNV(index, size, type, stride) glatter_glVertexAttribLFormatNV_debug((index), (size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribLFormatNV_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const char* file, int line);
#endif // defined(GL_NV_vertex_attrib_integer_64bit)
#if defined(GL_NV_vertex_buffer_unified_memory)
#define glBufferAddressRangeNV(pname, index, address, length) glatter_glBufferAddressRangeNV_debug((pname), (index), (address), (length), __FILE__, __LINE__)
void glatter_glBufferAddressRangeNV_debug(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length, const char* file, int line);
#define glColorFormatNV(size, type, stride) glatter_glColorFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glColorFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glEdgeFlagFormatNV(stride) glatter_glEdgeFlagFormatNV_debug((stride), __FILE__, __LINE__)
void glatter_glEdgeFlagFormatNV_debug(GLsizei stride, const char* file, int line);
#define glFogCoordFormatNV(type, stride) glatter_glFogCoordFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glFogCoordFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glGetIntegerui64i_vNV(value, index, result) glatter_glGetIntegerui64i_vNV_debug((value), (index), (result), __FILE__, __LINE__)
void glatter_glGetIntegerui64i_vNV_debug(GLenum value, GLuint index, GLuint64EXT *result, const char* file, int line);
#define glIndexFormatNV(type, stride) glatter_glIndexFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glIndexFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glNormalFormatNV(type, stride) glatter_glNormalFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glNormalFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glSecondaryColorFormatNV(size, type, stride) glatter_glSecondaryColorFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glSecondaryColorFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glTexCoordFormatNV(size, type, stride) glatter_glTexCoordFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glTexCoordFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glVertexAttribFormatNV(index, size, type, normalized, stride) glatter_glVertexAttribFormatNV_debug((index), (size), (type), (normalized), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribFormatNV_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const char* file, int line);
#define glVertexAttribIFormatNV(index, size, type, stride) glatter_glVertexAttribIFormatNV_debug((index), (size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribIFormatNV_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glVertexFormatNV(size, type, stride) glatter_glVertexFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#endif // defined(GL_NV_vertex_buffer_unified_memory)
#if defined(GL_NV_vertex_program)
#define glAreProgramsResidentNV(n, programs, residences) glatter_glAreProgramsResidentNV_debug((n), (programs), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreProgramsResidentNV_debug(GLsizei n, const GLuint *programs, GLboolean *residences, const char* file, int line);
#define glBindProgramNV(target, id) glatter_glBindProgramNV_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindProgramNV_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteProgramsNV(n, programs) glatter_glDeleteProgramsNV_debug((n), (programs), __FILE__, __LINE__)
void glatter_glDeleteProgramsNV_debug(GLsizei n, const GLuint *programs, const char* file, int line);
#define glExecuteProgramNV(target, id, params) glatter_glExecuteProgramNV_debug((target), (id), (params), __FILE__, __LINE__)
void glatter_glExecuteProgramNV_debug(GLenum target, GLuint id, const GLfloat *params, const char* file, int line);
#define glGenProgramsNV(n, programs) glatter_glGenProgramsNV_debug((n), (programs), __FILE__, __LINE__)
void glatter_glGenProgramsNV_debug(GLsizei n, GLuint *programs, const char* file, int line);
#define glGetProgramParameterdvNV(target, index, pname, params) glatter_glGetProgramParameterdvNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramParameterdvNV_debug(GLenum target, GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetProgramParameterfvNV(target, index, pname, params) glatter_glGetProgramParameterfvNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramParameterfvNV_debug(GLenum target, GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetProgramStringNV(id, pname, program) glatter_glGetProgramStringNV_debug((id), (pname), (program), __FILE__, __LINE__)
void glatter_glGetProgramStringNV_debug(GLuint id, GLenum pname, GLubyte *program, const char* file, int line);
#define glGetProgramivNV(id, pname, params) glatter_glGetProgramivNV_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramivNV_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetTrackMatrixivNV(target, address, pname, params) glatter_glGetTrackMatrixivNV_debug((target), (address), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTrackMatrixivNV_debug(GLenum target, GLuint address, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribPointervNV(index, pname, pointer) glatter_glGetVertexAttribPointervNV_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointervNV_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdvNV(index, pname, params) glatter_glGetVertexAttribdvNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdvNV_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfvNV(index, pname, params) glatter_glGetVertexAttribfvNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfvNV_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribivNV(index, pname, params) glatter_glGetVertexAttribivNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribivNV_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramNV(id) glatter_glIsProgramNV_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsProgramNV_debug(GLuint id, const char* file, int line);
#define glLoadProgramNV(target, id, len, program) glatter_glLoadProgramNV_debug((target), (id), (len), (program), __FILE__, __LINE__)
void glatter_glLoadProgramNV_debug(GLenum target, GLuint id, GLsizei len, const GLubyte *program, const char* file, int line);
#define glProgramParameter4dNV(target, index, x, y, z, w) glatter_glProgramParameter4dNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramParameter4dNV_debug(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramParameter4dvNV(target, index, v) glatter_glProgramParameter4dvNV_debug((target), (index), (v), __FILE__, __LINE__)
void glatter_glProgramParameter4dvNV_debug(GLenum target, GLuint index, const GLdouble *v, const char* file, int line);
#define glProgramParameter4fNV(target, index, x, y, z, w) glatter_glProgramParameter4fNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramParameter4fNV_debug(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramParameter4fvNV(target, index, v) glatter_glProgramParameter4fvNV_debug((target), (index), (v), __FILE__, __LINE__)
void glatter_glProgramParameter4fvNV_debug(GLenum target, GLuint index, const GLfloat *v, const char* file, int line);
#define glProgramParameters4dvNV(target, index, count, v) glatter_glProgramParameters4dvNV_debug((target), (index), (count), (v), __FILE__, __LINE__)
void glatter_glProgramParameters4dvNV_debug(GLenum target, GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glProgramParameters4fvNV(target, index, count, v) glatter_glProgramParameters4fvNV_debug((target), (index), (count), (v), __FILE__, __LINE__)
void glatter_glProgramParameters4fvNV_debug(GLenum target, GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glRequestResidentProgramsNV(n, programs) glatter_glRequestResidentProgramsNV_debug((n), (programs), __FILE__, __LINE__)
void glatter_glRequestResidentProgramsNV_debug(GLsizei n, const GLuint *programs, const char* file, int line);
#define glTrackMatrixNV(target, address, matrix, transform) glatter_glTrackMatrixNV_debug((target), (address), (matrix), (transform), __FILE__, __LINE__)
void glatter_glTrackMatrixNV_debug(GLenum target, GLuint address, GLenum matrix, GLenum transform, const char* file, int line);
#define glVertexAttrib1dNV(index, x) glatter_glVertexAttrib1dNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1dNV_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dvNV(index, v) glatter_glVertexAttrib1dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1fNV(index, x) glatter_glVertexAttrib1fNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1fNV_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fvNV(index, v) glatter_glVertexAttrib1fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1sNV(index, x) glatter_glVertexAttrib1sNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1sNV_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1svNV(index, v) glatter_glVertexAttrib1svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2dNV(index, x, y) glatter_glVertexAttrib2dNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2dNV_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dvNV(index, v) glatter_glVertexAttrib2dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2fNV(index, x, y) glatter_glVertexAttrib2fNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2fNV_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fvNV(index, v) glatter_glVertexAttrib2fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2sNV(index, x, y) glatter_glVertexAttrib2sNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2sNV_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2svNV(index, v) glatter_glVertexAttrib2svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3dNV(index, x, y, z) glatter_glVertexAttrib3dNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3dNV_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dvNV(index, v) glatter_glVertexAttrib3dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3fNV(index, x, y, z) glatter_glVertexAttrib3fNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3fNV_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fvNV(index, v) glatter_glVertexAttrib3fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3sNV(index, x, y, z) glatter_glVertexAttrib3sNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3sNV_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3svNV(index, v) glatter_glVertexAttrib3svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4dNV(index, x, y, z, w) glatter_glVertexAttrib4dNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4dNV_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dvNV(index, v) glatter_glVertexAttrib4dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4fNV(index, x, y, z, w) glatter_glVertexAttrib4fNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4fNV_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fvNV(index, v) glatter_glVertexAttrib4fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4sNV(index, x, y, z, w) glatter_glVertexAttrib4sNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4sNV_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4svNV(index, v) glatter_glVertexAttrib4svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubNV(index, x, y, z, w) glatter_glVertexAttrib4ubNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubNV_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4ubvNV(index, v) glatter_glVertexAttrib4ubvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubvNV_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribPointerNV(index, fsize, type, stride, pointer) glatter_glVertexAttribPointerNV_debug((index), (fsize), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointerNV_debug(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glVertexAttribs1dvNV(index, count, v) glatter_glVertexAttribs1dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs1fvNV(index, count, v) glatter_glVertexAttribs1fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs1svNV(index, count, v) glatter_glVertexAttribs1svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs2dvNV(index, count, v) glatter_glVertexAttribs2dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs2fvNV(index, count, v) glatter_glVertexAttribs2fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs2svNV(index, count, v) glatter_glVertexAttribs2svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs3dvNV(index, count, v) glatter_glVertexAttribs3dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs3fvNV(index, count, v) glatter_glVertexAttribs3fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs3svNV(index, count, v) glatter_glVertexAttribs3svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs4dvNV(index, count, v) glatter_glVertexAttribs4dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs4fvNV(index, count, v) glatter_glVertexAttribs4fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs4svNV(index, count, v) glatter_glVertexAttribs4svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs4ubvNV(index, count, v) glatter_glVertexAttribs4ubvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4ubvNV_debug(GLuint index, GLsizei count, const GLubyte *v, const char* file, int line);
#endif // defined(GL_NV_vertex_program)
#if defined(GL_NV_vertex_program4)
#define glGetVertexAttribIivEXT(index, pname, params) glatter_glGetVertexAttribIivEXT_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIivEXT_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuivEXT(index, pname, params) glatter_glGetVertexAttribIuivEXT_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuivEXT_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glVertexAttribI1iEXT(index, x) glatter_glVertexAttribI1iEXT_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1iEXT_debug(GLuint index, GLint x, const char* file, int line);
#define glVertexAttribI1ivEXT(index, v) glatter_glVertexAttribI1ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI1uiEXT(index, x) glatter_glVertexAttribI1uiEXT_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1uiEXT_debug(GLuint index, GLuint x, const char* file, int line);
#define glVertexAttribI1uivEXT(index, v) glatter_glVertexAttribI1uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI2iEXT(index, x, y) glatter_glVertexAttribI2iEXT_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2iEXT_debug(GLuint index, GLint x, GLint y, const char* file, int line);
#define glVertexAttribI2ivEXT(index, v) glatter_glVertexAttribI2ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI2uiEXT(index, x, y) glatter_glVertexAttribI2uiEXT_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2uiEXT_debug(GLuint index, GLuint x, GLuint y, const char* file, int line);
#define glVertexAttribI2uivEXT(index, v) glatter_glVertexAttribI2uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI3iEXT(index, x, y, z) glatter_glVertexAttribI3iEXT_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3iEXT_debug(GLuint index, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexAttribI3ivEXT(index, v) glatter_glVertexAttribI3ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI3uiEXT(index, x, y, z) glatter_glVertexAttribI3uiEXT_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3uiEXT_debug(GLuint index, GLuint x, GLuint y, GLuint z, const char* file, int line);
#define glVertexAttribI3uivEXT(index, v) glatter_glVertexAttribI3uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4bvEXT(index, v) glatter_glVertexAttribI4bvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4bvEXT_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttribI4iEXT(index, x, y, z, w) glatter_glVertexAttribI4iEXT_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4iEXT_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4ivEXT(index, v) glatter_glVertexAttribI4ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4svEXT(index, v) glatter_glVertexAttribI4svEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4svEXT_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttribI4ubvEXT(index, v) glatter_glVertexAttribI4ubvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ubvEXT_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribI4uiEXT(index, x, y, z, w) glatter_glVertexAttribI4uiEXT_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiEXT_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uivEXT(index, v) glatter_glVertexAttribI4uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4usvEXT(index, v) glatter_glVertexAttribI4usvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4usvEXT_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribIPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribIPointerEXT_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointerEXT_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_NV_vertex_program4)
#if defined(GL_NV_video_capture)
#define glBeginVideoCaptureNV(video_capture_slot) glatter_glBeginVideoCaptureNV_debug((video_capture_slot), __FILE__, __LINE__)
void glatter_glBeginVideoCaptureNV_debug(GLuint video_capture_slot, const char* file, int line);
#define glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) glatter_glBindVideoCaptureStreamBufferNV_debug((video_capture_slot), (stream), (frame_region), (offset), __FILE__, __LINE__)
void glatter_glBindVideoCaptureStreamBufferNV_debug(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset, const char* file, int line);
#define glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) glatter_glBindVideoCaptureStreamTextureNV_debug((video_capture_slot), (stream), (frame_region), (target), (texture), __FILE__, __LINE__)
void glatter_glBindVideoCaptureStreamTextureNV_debug(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture, const char* file, int line);
#define glEndVideoCaptureNV(video_capture_slot) glatter_glEndVideoCaptureNV_debug((video_capture_slot), __FILE__, __LINE__)
void glatter_glEndVideoCaptureNV_debug(GLuint video_capture_slot, const char* file, int line);
#define glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamdvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureStreamdvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamfvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureStreamfvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamivNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureStreamivNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params, const char* file, int line);
#define glGetVideoCaptureivNV(video_capture_slot, pname, params) glatter_glGetVideoCaptureivNV_debug((video_capture_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureivNV_debug(GLuint video_capture_slot, GLenum pname, GLint *params, const char* file, int line);
#define glVideoCaptureNV(video_capture_slot, sequence_num, capture_time) glatter_glVideoCaptureNV_debug((video_capture_slot), (sequence_num), (capture_time), __FILE__, __LINE__)
GLenum glatter_glVideoCaptureNV_debug(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time, const char* file, int line);
#define glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterdvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glVideoCaptureStreamParameterdvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params, const char* file, int line);
#define glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterfvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glVideoCaptureStreamParameterfvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params, const char* file, int line);
#define glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterivNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glVideoCaptureStreamParameterivNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_NV_video_capture)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_debug((index), (swizzlex), (swizzley), (swizzlez), (swizzlew), __FILE__, __LINE__)
void glatter_glViewportSwizzleNV_debug(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, const char* file, int line);
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_byte_coordinates)
#define glMultiTexCoord1bOES(texture, s) glatter_glMultiTexCoord1bOES_debug((texture), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1bOES_debug(GLenum texture, GLbyte s, const char* file, int line);
#define glMultiTexCoord1bvOES(texture, coords) glatter_glMultiTexCoord1bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord1bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glMultiTexCoord2bOES(texture, s, t) glatter_glMultiTexCoord2bOES_debug((texture), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2bOES_debug(GLenum texture, GLbyte s, GLbyte t, const char* file, int line);
#define glMultiTexCoord2bvOES(texture, coords) glatter_glMultiTexCoord2bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord2bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glMultiTexCoord3bOES(texture, s, t, r) glatter_glMultiTexCoord3bOES_debug((texture), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3bOES_debug(GLenum texture, GLbyte s, GLbyte t, GLbyte r, const char* file, int line);
#define glMultiTexCoord3bvOES(texture, coords) glatter_glMultiTexCoord3bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord3bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glMultiTexCoord4bOES(texture, s, t, r, q) glatter_glMultiTexCoord4bOES_debug((texture), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4bOES_debug(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q, const char* file, int line);
#define glMultiTexCoord4bvOES(texture, coords) glatter_glMultiTexCoord4bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord4bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glTexCoord1bOES(s) glatter_glTexCoord1bOES_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1bOES_debug(GLbyte s, const char* file, int line);
#define glTexCoord1bvOES(coords) glatter_glTexCoord1bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord1bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glTexCoord2bOES(s, t) glatter_glTexCoord2bOES_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2bOES_debug(GLbyte s, GLbyte t, const char* file, int line);
#define glTexCoord2bvOES(coords) glatter_glTexCoord2bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord2bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glTexCoord3bOES(s, t, r) glatter_glTexCoord3bOES_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3bOES_debug(GLbyte s, GLbyte t, GLbyte r, const char* file, int line);
#define glTexCoord3bvOES(coords) glatter_glTexCoord3bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord3bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glTexCoord4bOES(s, t, r, q) glatter_glTexCoord4bOES_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4bOES_debug(GLbyte s, GLbyte t, GLbyte r, GLbyte q, const char* file, int line);
#define glTexCoord4bvOES(coords) glatter_glTexCoord4bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord4bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glVertex2bOES(x, y) glatter_glVertex2bOES_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2bOES_debug(GLbyte x, GLbyte y, const char* file, int line);
#define glVertex2bvOES(coords) glatter_glVertex2bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex2bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glVertex3bOES(x, y, z) glatter_glVertex3bOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3bOES_debug(GLbyte x, GLbyte y, GLbyte z, const char* file, int line);
#define glVertex3bvOES(coords) glatter_glVertex3bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex3bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glVertex4bOES(x, y, z, w) glatter_glVertex4bOES_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4bOES_debug(GLbyte x, GLbyte y, GLbyte z, GLbyte w, const char* file, int line);
#define glVertex4bvOES(coords) glatter_glVertex4bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex4bvOES_debug(const GLbyte *coords, const char* file, int line);
#endif // defined(GL_OES_byte_coordinates)
#if defined(GL_OES_fixed_point)
#define glAccumxOES(op, value) glatter_glAccumxOES_debug((op), (value), __FILE__, __LINE__)
void glatter_glAccumxOES_debug(GLenum op, GLfixed value, const char* file, int line);
#define glAlphaFuncxOES(func, ref) glatter_glAlphaFuncxOES_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFuncxOES_debug(GLenum func, GLfixed ref, const char* file, int line);
#define glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmapxOES_debug((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap), __FILE__, __LINE__)
void glatter_glBitmapxOES_debug(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap, const char* file, int line);
#define glBlendColorxOES(red, green, blue, alpha) glatter_glBlendColorxOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColorxOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glClearAccumxOES(red, green, blue, alpha) glatter_glClearAccumxOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearAccumxOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glClearColorxOES(red, green, blue, alpha) glatter_glClearColorxOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorxOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glClearDepthxOES(depth) glatter_glClearDepthxOES_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthxOES_debug(GLfixed depth, const char* file, int line);
#define glClipPlanexOES(plane, equation) glatter_glClipPlanexOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanexOES_debug(GLenum plane, const GLfixed *equation, const char* file, int line);
#define glColor3xOES(red, green, blue) glatter_glColor3xOES_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3xOES_debug(GLfixed red, GLfixed green, GLfixed blue, const char* file, int line);
#define glColor3xvOES(components) glatter_glColor3xvOES_debug((components), __FILE__, __LINE__)
void glatter_glColor3xvOES_debug(const GLfixed *components, const char* file, int line);
#define glColor4xOES(red, green, blue, alpha) glatter_glColor4xOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4xOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glColor4xvOES(components) glatter_glColor4xvOES_debug((components), __FILE__, __LINE__)
void glatter_glColor4xvOES_debug(const GLfixed *components, const char* file, int line);
#define glConvolutionParameterxOES(target, pname, param) glatter_glConvolutionParameterxOES_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glConvolutionParameterxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glConvolutionParameterxvOES(target, pname, params) glatter_glConvolutionParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glDepthRangexOES(n, f) glatter_glDepthRangexOES_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangexOES_debug(GLfixed n, GLfixed f, const char* file, int line);
#define glEvalCoord1xOES(u) glatter_glEvalCoord1xOES_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1xOES_debug(GLfixed u, const char* file, int line);
#define glEvalCoord1xvOES(coords) glatter_glEvalCoord1xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glEvalCoord1xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glEvalCoord2xOES(u, v) glatter_glEvalCoord2xOES_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2xOES_debug(GLfixed u, GLfixed v, const char* file, int line);
#define glEvalCoord2xvOES(coords) glatter_glEvalCoord2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glEvalCoord2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glFeedbackBufferxOES(n, type, buffer) glatter_glFeedbackBufferxOES_debug((n), (type), (buffer), __FILE__, __LINE__)
void glatter_glFeedbackBufferxOES_debug(GLsizei n, GLenum type, const GLfixed *buffer, const char* file, int line);
#define glFogxOES(pname, param) glatter_glFogxOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glFogxvOES(pname, param) glatter_glFogxvOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogxvOES_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#define glFrustumxOES(l, r, b, t, n, f) glatter_glFrustumxOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glFrustumxOES_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#define glGetClipPlanexOES(plane, equation) glatter_glGetClipPlanexOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlanexOES_debug(GLenum plane, GLfixed *equation, const char* file, int line);
#define glGetConvolutionParameterxvOES(target, pname, params) glatter_glGetConvolutionParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetFixedvOES(pname, params) glatter_glGetFixedvOES_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFixedvOES_debug(GLenum pname, GLfixed *params, const char* file, int line);
#define glGetHistogramParameterxvOES(target, pname, params) glatter_glGetHistogramParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetLightxOES(light, pname, params) glatter_glGetLightxOES_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightxOES_debug(GLenum light, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetMapxvOES(target, query, v) glatter_glGetMapxvOES_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapxvOES_debug(GLenum target, GLenum query, GLfixed *v, const char* file, int line);
#define glGetMaterialxOES(face, pname, param) glatter_glGetMaterialxOES_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glGetMaterialxOES_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#define glGetPixelMapxv(map, size, values) glatter_glGetPixelMapxv_debug((map), (size), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapxv_debug(GLenum map, GLint size, GLfixed *values, const char* file, int line);
#define glGetTexEnvxvOES(target, pname, params) glatter_glGetTexEnvxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexGenxvOES(coord, pname, params) glatter_glGetTexGenxvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGenxvOES_debug(GLenum coord, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexLevelParameterxvOES(target, level, pname, params) glatter_glGetTexLevelParameterxvOES_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterxvOES_debug(GLenum target, GLint level, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexParameterxvOES(target, pname, params) glatter_glGetTexParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glIndexxOES(component) glatter_glIndexxOES_debug((component), __FILE__, __LINE__)
void glatter_glIndexxOES_debug(GLfixed component, const char* file, int line);
#define glIndexxvOES(component) glatter_glIndexxvOES_debug((component), __FILE__, __LINE__)
void glatter_glIndexxvOES_debug(const GLfixed *component, const char* file, int line);
#define glLightModelxOES(pname, param) glatter_glLightModelxOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glLightModelxvOES(pname, param) glatter_glLightModelxvOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelxvOES_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#define glLightxOES(light, pname, param) glatter_glLightxOES_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightxOES_debug(GLenum light, GLenum pname, GLfixed param, const char* file, int line);
#define glLightxvOES(light, pname, params) glatter_glLightxvOES_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightxvOES_debug(GLenum light, GLenum pname, const GLfixed *params, const char* file, int line);
#define glLineWidthxOES(width) glatter_glLineWidthxOES_debug((width), __FILE__, __LINE__)
void glatter_glLineWidthxOES_debug(GLfixed width, const char* file, int line);
#define glLoadMatrixxOES(m) glatter_glLoadMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glLoadTransposeMatrixxOES(m) glatter_glLoadTransposeMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glMap1xOES(target, u1, u2, stride, order, points) glatter_glMap1xOES_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1xOES_debug(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points, const char* file, int line);
#define glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2xOES_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2xOES_debug(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points, const char* file, int line);
#define glMapGrid1xOES(n, u1, u2) glatter_glMapGrid1xOES_debug((n), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1xOES_debug(GLint n, GLfixed u1, GLfixed u2, const char* file, int line);
#define glMapGrid2xOES(n, u1, u2, v1, v2) glatter_glMapGrid2xOES_debug((n), (u1), (u2), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2xOES_debug(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2, const char* file, int line);
#define glMaterialxOES(face, pname, param) glatter_glMaterialxOES_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialxOES_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#define glMaterialxvOES(face, pname, param) glatter_glMaterialxvOES_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialxvOES_debug(GLenum face, GLenum pname, const GLfixed *param, const char* file, int line);
#define glMultMatrixxOES(m) glatter_glMultMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glMultTransposeMatrixxOES(m) glatter_glMultTransposeMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glMultiTexCoord1xOES(texture, s) glatter_glMultiTexCoord1xOES_debug((texture), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1xOES_debug(GLenum texture, GLfixed s, const char* file, int line);
#define glMultiTexCoord1xvOES(texture, coords) glatter_glMultiTexCoord1xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord1xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glMultiTexCoord2xOES(texture, s, t) glatter_glMultiTexCoord2xOES_debug((texture), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2xOES_debug(GLenum texture, GLfixed s, GLfixed t, const char* file, int line);
#define glMultiTexCoord2xvOES(texture, coords) glatter_glMultiTexCoord2xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord2xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glMultiTexCoord3xOES(texture, s, t, r) glatter_glMultiTexCoord3xOES_debug((texture), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3xOES_debug(GLenum texture, GLfixed s, GLfixed t, GLfixed r, const char* file, int line);
#define glMultiTexCoord3xvOES(texture, coords) glatter_glMultiTexCoord3xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord3xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glMultiTexCoord4xOES(texture, s, t, r, q) glatter_glMultiTexCoord4xOES_debug((texture), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4xOES_debug(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#define glMultiTexCoord4xvOES(texture, coords) glatter_glMultiTexCoord4xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord4xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glNormal3xOES(nx, ny, nz) glatter_glNormal3xOES_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3xOES_debug(GLfixed nx, GLfixed ny, GLfixed nz, const char* file, int line);
#define glNormal3xvOES(coords) glatter_glNormal3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glNormal3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glOrthoxOES(l, r, b, t, n, f) glatter_glOrthoxOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glOrthoxOES_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#define glPassThroughxOES(token) glatter_glPassThroughxOES_debug((token), __FILE__, __LINE__)
void glatter_glPassThroughxOES_debug(GLfixed token, const char* file, int line);
#define glPixelMapx(map, size, values) glatter_glPixelMapx_debug((map), (size), (values), __FILE__, __LINE__)
void glatter_glPixelMapx_debug(GLenum map, GLint size, const GLfixed *values, const char* file, int line);
#define glPixelStorex(pname, param) glatter_glPixelStorex_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorex_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glPixelTransferxOES(pname, param) glatter_glPixelTransferxOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glPixelZoomxOES(xfactor, yfactor) glatter_glPixelZoomxOES_debug((xfactor), (yfactor), __FILE__, __LINE__)
void glatter_glPixelZoomxOES_debug(GLfixed xfactor, GLfixed yfactor, const char* file, int line);
#define glPointParameterxvOES(pname, params) glatter_glPointParameterxvOES_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterxvOES_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glPointSizexOES(size) glatter_glPointSizexOES_debug((size), __FILE__, __LINE__)
void glatter_glPointSizexOES_debug(GLfixed size, const char* file, int line);
#define glPolygonOffsetxOES(factor, units) glatter_glPolygonOffsetxOES_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffsetxOES_debug(GLfixed factor, GLfixed units, const char* file, int line);
#define glPrioritizeTexturesxOES(n, textures, priorities) glatter_glPrioritizeTexturesxOES_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTexturesxOES_debug(GLsizei n, const GLuint *textures, const GLfixed *priorities, const char* file, int line);
#define glRasterPos2xOES(x, y) glatter_glRasterPos2xOES_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2xOES_debug(GLfixed x, GLfixed y, const char* file, int line);
#define glRasterPos2xvOES(coords) glatter_glRasterPos2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glRasterPos2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glRasterPos3xOES(x, y, z) glatter_glRasterPos3xOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3xOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glRasterPos3xvOES(coords) glatter_glRasterPos3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glRasterPos3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glRasterPos4xOES(x, y, z, w) glatter_glRasterPos4xOES_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4xOES_debug(GLfixed x, GLfixed y, GLfixed z, GLfixed w, const char* file, int line);
#define glRasterPos4xvOES(coords) glatter_glRasterPos4xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glRasterPos4xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glRectxOES(x1, y1, x2, y2) glatter_glRectxOES_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectxOES_debug(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2, const char* file, int line);
#define glRectxvOES(v1, v2) glatter_glRectxvOES_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectxvOES_debug(const GLfixed *v1, const GLfixed *v2, const char* file, int line);
#define glRotatexOES(angle, x, y, z) glatter_glRotatexOES_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatexOES_debug(GLfixed angle, GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glScalexOES(x, y, z) glatter_glScalexOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalexOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glTexCoord1xOES(s) glatter_glTexCoord1xOES_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1xOES_debug(GLfixed s, const char* file, int line);
#define glTexCoord1xvOES(coords) glatter_glTexCoord1xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord1xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexCoord2xOES(s, t) glatter_glTexCoord2xOES_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2xOES_debug(GLfixed s, GLfixed t, const char* file, int line);
#define glTexCoord2xvOES(coords) glatter_glTexCoord2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexCoord3xOES(s, t, r) glatter_glTexCoord3xOES_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3xOES_debug(GLfixed s, GLfixed t, GLfixed r, const char* file, int line);
#define glTexCoord3xvOES(coords) glatter_glTexCoord3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexCoord4xOES(s, t, r, q) glatter_glTexCoord4xOES_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4xOES_debug(GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#define glTexCoord4xvOES(coords) glatter_glTexCoord4xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord4xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexEnvxOES(target, pname, param) glatter_glTexEnvxOES_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexEnvxvOES(target, pname, params) glatter_glTexEnvxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexGenxOES(coord, pname, param) glatter_glTexGenxOES_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGenxOES_debug(GLenum coord, GLenum pname, GLfixed param, const char* file, int line);
#define glTexGenxvOES(coord, pname, params) glatter_glTexGenxvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGenxvOES_debug(GLenum coord, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexParameterxOES(target, pname, param) glatter_glTexParameterxOES_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexParameterxvOES(target, pname, params) glatter_glTexParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTranslatexOES(x, y, z) glatter_glTranslatexOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatexOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glVertex2xOES(x) glatter_glVertex2xOES_debug((x), __FILE__, __LINE__)
void glatter_glVertex2xOES_debug(GLfixed x, const char* file, int line);
#define glVertex2xvOES(coords) glatter_glVertex2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glVertex3xOES(x, y) glatter_glVertex3xOES_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex3xOES_debug(GLfixed x, GLfixed y, const char* file, int line);
#define glVertex3xvOES(coords) glatter_glVertex3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glVertex4xOES(x, y, z) glatter_glVertex4xOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex4xOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glVertex4xvOES(coords) glatter_glVertex4xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex4xvOES_debug(const GLfixed *coords, const char* file, int line);
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_query_matrix)
#define glQueryMatrixxOES(mantissa, exponent) glatter_glQueryMatrixxOES_debug((mantissa), (exponent), __FILE__, __LINE__)
GLbitfield glatter_glQueryMatrixxOES_debug(GLfixed *mantissa, GLint *exponent, const char* file, int line);
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#define glClearDepthfOES(depth) glatter_glClearDepthfOES_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthfOES_debug(GLclampf depth, const char* file, int line);
#define glClipPlanefOES(plane, equation) glatter_glClipPlanefOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanefOES_debug(GLenum plane, const GLfloat *equation, const char* file, int line);
#define glDepthRangefOES(n, f) glatter_glDepthRangefOES_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangefOES_debug(GLclampf n, GLclampf f, const char* file, int line);
#define glFrustumfOES(l, r, b, t, n, f) glatter_glFrustumfOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glFrustumfOES_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#define glGetClipPlanefOES(plane, equation) glatter_glGetClipPlanefOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlanefOES_debug(GLenum plane, GLfloat *equation, const char* file, int line);
#define glOrthofOES(l, r, b, t, n, f) glatter_glOrthofOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glOrthofOES_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#endif // defined(GL_OES_single_precision)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_debug((target), (attachment), (texture), (level), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview)
#if defined(GL_PGI_misc_hints)
#define glHintPGI(target, mode) glatter_glHintPGI_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHintPGI_debug(GLenum target, GLint mode, const char* file, int line);
#endif // defined(GL_PGI_misc_hints)
#if defined(GL_SGIS_detail_texture)
#define glDetailTexFuncSGIS(target, n, points) glatter_glDetailTexFuncSGIS_debug((target), (n), (points), __FILE__, __LINE__)
void glatter_glDetailTexFuncSGIS_debug(GLenum target, GLsizei n, const GLfloat *points, const char* file, int line);
#define glGetDetailTexFuncSGIS(target, points) glatter_glGetDetailTexFuncSGIS_debug((target), (points), __FILE__, __LINE__)
void glatter_glGetDetailTexFuncSGIS_debug(GLenum target, GLfloat *points, const char* file, int line);
#endif // defined(GL_SGIS_detail_texture)
#if defined(GL_SGIS_fog_function)
#define glFogFuncSGIS(n, points) glatter_glFogFuncSGIS_debug((n), (points), __FILE__, __LINE__)
void glatter_glFogFuncSGIS_debug(GLsizei n, const GLfloat *points, const char* file, int line);
#define glGetFogFuncSGIS(points) glatter_glGetFogFuncSGIS_debug((points), __FILE__, __LINE__)
void glatter_glGetFogFuncSGIS_debug(GLfloat *points, const char* file, int line);
#endif // defined(GL_SGIS_fog_function)
#if defined(GL_SGIS_multisample)
#define glSampleMaskSGIS(value, invert) glatter_glSampleMaskSGIS_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleMaskSGIS_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glSamplePatternSGIS(pattern) glatter_glSamplePatternSGIS_debug((pattern), __FILE__, __LINE__)
void glatter_glSamplePatternSGIS_debug(GLenum pattern, const char* file, int line);
#endif // defined(GL_SGIS_multisample)
#if defined(GL_SGIS_pixel_texture)
#define glGetPixelTexGenParameterfvSGIS(pname, params) glatter_glGetPixelTexGenParameterfvSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTexGenParameterfvSGIS_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetPixelTexGenParameterivSGIS(pname, params) glatter_glGetPixelTexGenParameterivSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTexGenParameterivSGIS_debug(GLenum pname, GLint *params, const char* file, int line);
#define glPixelTexGenParameterfSGIS(pname, param) glatter_glPixelTexGenParameterfSGIS_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTexGenParameterfSGIS_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTexGenParameterfvSGIS(pname, params) glatter_glPixelTexGenParameterfvSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPixelTexGenParameterfvSGIS_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPixelTexGenParameteriSGIS(pname, param) glatter_glPixelTexGenParameteriSGIS_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTexGenParameteriSGIS_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelTexGenParameterivSGIS(pname, params) glatter_glPixelTexGenParameterivSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPixelTexGenParameterivSGIS_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_SGIS_pixel_texture)
#if defined(GL_SGIS_point_parameters)
#define glPointParameterfSGIS(pname, param) glatter_glPointParameterfSGIS_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterfSGIS_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfvSGIS(pname, params) glatter_glPointParameterfvSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfvSGIS_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#endif // defined(GL_SGIS_point_parameters)
#if defined(GL_SGIS_sharpen_texture)
#define glGetSharpenTexFuncSGIS(target, points) glatter_glGetSharpenTexFuncSGIS_debug((target), (points), __FILE__, __LINE__)
void glatter_glGetSharpenTexFuncSGIS_debug(GLenum target, GLfloat *points, const char* file, int line);
#define glSharpenTexFuncSGIS(target, n, points) glatter_glSharpenTexFuncSGIS_debug((target), (n), (points), __FILE__, __LINE__)
void glatter_glSharpenTexFuncSGIS_debug(GLenum target, GLsizei n, const GLfloat *points, const char* file, int line);
#endif // defined(GL_SGIS_sharpen_texture)
#if defined(GL_SGIS_texture4D)
#define glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) glatter_glTexImage4DSGIS_debug((target), (level), (internalformat), (width), (height), (depth), (size4d), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage4DSGIS_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) glatter_glTexSubImage4DSGIS_debug((target), (level), (xoffset), (yoffset), (zoffset), (woffset), (width), (height), (depth), (size4d), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage4DSGIS_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_SGIS_texture4D)
#if defined(GL_SGIS_texture_color_mask)
#define glTextureColorMaskSGIS(red, green, blue, alpha) glatter_glTextureColorMaskSGIS_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glTextureColorMaskSGIS_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#endif // defined(GL_SGIS_texture_color_mask)
#if defined(GL_SGIS_texture_filter4)
#define glGetTexFilterFuncSGIS(target, filter, weights) glatter_glGetTexFilterFuncSGIS_debug((target), (filter), (weights), __FILE__, __LINE__)
void glatter_glGetTexFilterFuncSGIS_debug(GLenum target, GLenum filter, GLfloat *weights, const char* file, int line);
#define glTexFilterFuncSGIS(target, filter, n, weights) glatter_glTexFilterFuncSGIS_debug((target), (filter), (n), (weights), __FILE__, __LINE__)
void glatter_glTexFilterFuncSGIS_debug(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_SGIS_texture_filter4)
#if defined(GL_SGIX_async)
#define glAsyncMarkerSGIX(marker) glatter_glAsyncMarkerSGIX_debug((marker), __FILE__, __LINE__)
void glatter_glAsyncMarkerSGIX_debug(GLuint marker, const char* file, int line);
#define glDeleteAsyncMarkersSGIX(marker, range) glatter_glDeleteAsyncMarkersSGIX_debug((marker), (range), __FILE__, __LINE__)
void glatter_glDeleteAsyncMarkersSGIX_debug(GLuint marker, GLsizei range, const char* file, int line);
#define glFinishAsyncSGIX(markerp) glatter_glFinishAsyncSGIX_debug((markerp), __FILE__, __LINE__)
GLint glatter_glFinishAsyncSGIX_debug(GLuint *markerp, const char* file, int line);
#define glGenAsyncMarkersSGIX(range) glatter_glGenAsyncMarkersSGIX_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenAsyncMarkersSGIX_debug(GLsizei range, const char* file, int line);
#define glIsAsyncMarkerSGIX(marker) glatter_glIsAsyncMarkerSGIX_debug((marker), __FILE__, __LINE__)
GLboolean glatter_glIsAsyncMarkerSGIX_debug(GLuint marker, const char* file, int line);
#define glPollAsyncSGIX(markerp) glatter_glPollAsyncSGIX_debug((markerp), __FILE__, __LINE__)
GLint glatter_glPollAsyncSGIX_debug(GLuint *markerp, const char* file, int line);
#endif // defined(GL_SGIX_async)
#if defined(GL_SGIX_flush_raster)
#define glFlushRasterSGIX() glatter_glFlushRasterSGIX_debug(__FILE__, __LINE__)
void glatter_glFlushRasterSGIX_debug(const char* file, int line);
#endif // defined(GL_SGIX_flush_raster)
#if defined(GL_SGIX_fragment_lighting)
#define glFragmentColorMaterialSGIX(face, mode) glatter_glFragmentColorMaterialSGIX_debug((face), (mode), __FILE__, __LINE__)
void glatter_glFragmentColorMaterialSGIX_debug(GLenum face, GLenum mode, const char* file, int line);
#define glFragmentLightModelfSGIX(pname, param) glatter_glFragmentLightModelfSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightModelfSGIX_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFragmentLightModelfvSGIX(pname, params) glatter_glFragmentLightModelfvSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightModelfvSGIX_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFragmentLightModeliSGIX(pname, param) glatter_glFragmentLightModeliSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightModeliSGIX_debug(GLenum pname, GLint param, const char* file, int line);
#define glFragmentLightModelivSGIX(pname, params) glatter_glFragmentLightModelivSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightModelivSGIX_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFragmentLightfSGIX(light, pname, param) glatter_glFragmentLightfSGIX_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightfSGIX_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glFragmentLightfvSGIX(light, pname, params) glatter_glFragmentLightfvSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightfvSGIX_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glFragmentLightiSGIX(light, pname, param) glatter_glFragmentLightiSGIX_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightiSGIX_debug(GLenum light, GLenum pname, GLint param, const char* file, int line);
#define glFragmentLightivSGIX(light, pname, params) glatter_glFragmentLightivSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightivSGIX_debug(GLenum light, GLenum pname, const GLint *params, const char* file, int line);
#define glFragmentMaterialfSGIX(face, pname, param) glatter_glFragmentMaterialfSGIX_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentMaterialfSGIX_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glFragmentMaterialfvSGIX(face, pname, params) glatter_glFragmentMaterialfvSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentMaterialfvSGIX_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glFragmentMaterialiSGIX(face, pname, param) glatter_glFragmentMaterialiSGIX_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentMaterialiSGIX_debug(GLenum face, GLenum pname, GLint param, const char* file, int line);
#define glFragmentMaterialivSGIX(face, pname, params) glatter_glFragmentMaterialivSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentMaterialivSGIX_debug(GLenum face, GLenum pname, const GLint *params, const char* file, int line);
#define glGetFragmentLightfvSGIX(light, pname, params) glatter_glGetFragmentLightfvSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentLightfvSGIX_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetFragmentLightivSGIX(light, pname, params) glatter_glGetFragmentLightivSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentLightivSGIX_debug(GLenum light, GLenum pname, GLint *params, const char* file, int line);
#define glGetFragmentMaterialfvSGIX(face, pname, params) glatter_glGetFragmentMaterialfvSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentMaterialfvSGIX_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetFragmentMaterialivSGIX(face, pname, params) glatter_glGetFragmentMaterialivSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentMaterialivSGIX_debug(GLenum face, GLenum pname, GLint *params, const char* file, int line);
#define glLightEnviSGIX(pname, param) glatter_glLightEnviSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightEnviSGIX_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_SGIX_fragment_lighting)
#if defined(GL_SGIX_framezoom)
#define glFrameZoomSGIX(factor) glatter_glFrameZoomSGIX_debug((factor), __FILE__, __LINE__)
void glatter_glFrameZoomSGIX_debug(GLint factor, const char* file, int line);
#endif // defined(GL_SGIX_framezoom)
#if defined(GL_SGIX_igloo_interface)
#define glIglooInterfaceSGIX(pname, params) glatter_glIglooInterfaceSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glIglooInterfaceSGIX_debug(GLenum pname, const void *params, const char* file, int line);
#endif // defined(GL_SGIX_igloo_interface)
#if defined(GL_SGIX_instruments)
#define glGetInstrumentsSGIX() glatter_glGetInstrumentsSGIX_debug(__FILE__, __LINE__)
GLint glatter_glGetInstrumentsSGIX_debug(const char* file, int line);
#define glInstrumentsBufferSGIX(size, buffer) glatter_glInstrumentsBufferSGIX_debug((size), (buffer), __FILE__, __LINE__)
void glatter_glInstrumentsBufferSGIX_debug(GLsizei size, GLint *buffer, const char* file, int line);
#define glPollInstrumentsSGIX(marker_p) glatter_glPollInstrumentsSGIX_debug((marker_p), __FILE__, __LINE__)
GLint glatter_glPollInstrumentsSGIX_debug(GLint *marker_p, const char* file, int line);
#define glReadInstrumentsSGIX(marker) glatter_glReadInstrumentsSGIX_debug((marker), __FILE__, __LINE__)
void glatter_glReadInstrumentsSGIX_debug(GLint marker, const char* file, int line);
#define glStartInstrumentsSGIX() glatter_glStartInstrumentsSGIX_debug(__FILE__, __LINE__)
void glatter_glStartInstrumentsSGIX_debug(const char* file, int line);
#define glStopInstrumentsSGIX(marker) glatter_glStopInstrumentsSGIX_debug((marker), __FILE__, __LINE__)
void glatter_glStopInstrumentsSGIX_debug(GLint marker, const char* file, int line);
#endif // defined(GL_SGIX_instruments)
#if defined(GL_SGIX_list_priority)
#define glGetListParameterfvSGIX(list, pname, params) glatter_glGetListParameterfvSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glGetListParameterfvSGIX_debug(GLuint list, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetListParameterivSGIX(list, pname, params) glatter_glGetListParameterivSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glGetListParameterivSGIX_debug(GLuint list, GLenum pname, GLint *params, const char* file, int line);
#define glListParameterfSGIX(list, pname, param) glatter_glListParameterfSGIX_debug((list), (pname), (param), __FILE__, __LINE__)
void glatter_glListParameterfSGIX_debug(GLuint list, GLenum pname, GLfloat param, const char* file, int line);
#define glListParameterfvSGIX(list, pname, params) glatter_glListParameterfvSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glListParameterfvSGIX_debug(GLuint list, GLenum pname, const GLfloat *params, const char* file, int line);
#define glListParameteriSGIX(list, pname, param) glatter_glListParameteriSGIX_debug((list), (pname), (param), __FILE__, __LINE__)
void glatter_glListParameteriSGIX_debug(GLuint list, GLenum pname, GLint param, const char* file, int line);
#define glListParameterivSGIX(list, pname, params) glatter_glListParameterivSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glListParameterivSGIX_debug(GLuint list, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_SGIX_list_priority)
#if defined(GL_SGIX_pixel_texture)
#define glPixelTexGenSGIX(mode) glatter_glPixelTexGenSGIX_debug((mode), __FILE__, __LINE__)
void glatter_glPixelTexGenSGIX_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_SGIX_pixel_texture)
#if defined(GL_SGIX_polynomial_ffd)
#define glDeformSGIX(mask) glatter_glDeformSGIX_debug((mask), __FILE__, __LINE__)
void glatter_glDeformSGIX_debug(GLbitfield mask, const char* file, int line);
#define glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3dSGIX_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points), __FILE__, __LINE__)
void glatter_glDeformationMap3dSGIX_debug(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points, const char* file, int line);
#define glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3fSGIX_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points), __FILE__, __LINE__)
void glatter_glDeformationMap3fSGIX_debug(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points, const char* file, int line);
#define glLoadIdentityDeformationMapSGIX(mask) glatter_glLoadIdentityDeformationMapSGIX_debug((mask), __FILE__, __LINE__)
void glatter_glLoadIdentityDeformationMapSGIX_debug(GLbitfield mask, const char* file, int line);
#endif // defined(GL_SGIX_polynomial_ffd)
#if defined(GL_SGIX_reference_plane)
#define glReferencePlaneSGIX(equation) glatter_glReferencePlaneSGIX_debug((equation), __FILE__, __LINE__)
void glatter_glReferencePlaneSGIX_debug(const GLdouble *equation, const char* file, int line);
#endif // defined(GL_SGIX_reference_plane)
#if defined(GL_SGIX_sprite)
#define glSpriteParameterfSGIX(pname, param) glatter_glSpriteParameterfSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glSpriteParameterfSGIX_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glSpriteParameterfvSGIX(pname, params) glatter_glSpriteParameterfvSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glSpriteParameterfvSGIX_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glSpriteParameteriSGIX(pname, param) glatter_glSpriteParameteriSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glSpriteParameteriSGIX_debug(GLenum pname, GLint param, const char* file, int line);
#define glSpriteParameterivSGIX(pname, params) glatter_glSpriteParameterivSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glSpriteParameterivSGIX_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_SGIX_sprite)
#if defined(GL_SGIX_tag_sample_buffer)
#define glTagSampleBufferSGIX() glatter_glTagSampleBufferSGIX_debug(__FILE__, __LINE__)
void glatter_glTagSampleBufferSGIX_debug(const char* file, int line);
#endif // defined(GL_SGIX_tag_sample_buffer)
#if defined(GL_SGI_color_table)
#define glColorTableParameterfvSGI(target, pname, params) glatter_glColorTableParameterfvSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterfvSGI_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glColorTableParameterivSGI(target, pname, params) glatter_glColorTableParameterivSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterivSGI_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glColorTableSGI(target, internalformat, width, format, type, table) glatter_glColorTableSGI_debug((target), (internalformat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTableSGI_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table, const char* file, int line);
#define glCopyColorTableSGI(target, internalformat, x, y, width) glatter_glCopyColorTableSGI_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorTableSGI_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glGetColorTableParameterfvSGI(target, pname, params) glatter_glGetColorTableParameterfvSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfvSGI_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameterivSGI(target, pname, params) glatter_glGetColorTableParameterivSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterivSGI_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetColorTableSGI(target, format, type, table) glatter_glGetColorTableSGI_debug((target), (format), (type), (table), __FILE__, __LINE__)
void glatter_glGetColorTableSGI_debug(GLenum target, GLenum format, GLenum type, void *table, const char* file, int line);
#endif // defined(GL_SGI_color_table)
#if defined(GL_SUNX_constant_data)
#define glFinishTextureSUNX() glatter_glFinishTextureSUNX_debug(__FILE__, __LINE__)
void glatter_glFinishTextureSUNX_debug(const char* file, int line);
#endif // defined(GL_SUNX_constant_data)
#if defined(GL_SUN_global_alpha)
#define glGlobalAlphaFactorbSUN(factor) glatter_glGlobalAlphaFactorbSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorbSUN_debug(GLbyte factor, const char* file, int line);
#define glGlobalAlphaFactordSUN(factor) glatter_glGlobalAlphaFactordSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactordSUN_debug(GLdouble factor, const char* file, int line);
#define glGlobalAlphaFactorfSUN(factor) glatter_glGlobalAlphaFactorfSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorfSUN_debug(GLfloat factor, const char* file, int line);
#define glGlobalAlphaFactoriSUN(factor) glatter_glGlobalAlphaFactoriSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactoriSUN_debug(GLint factor, const char* file, int line);
#define glGlobalAlphaFactorsSUN(factor) glatter_glGlobalAlphaFactorsSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorsSUN_debug(GLshort factor, const char* file, int line);
#define glGlobalAlphaFactorubSUN(factor) glatter_glGlobalAlphaFactorubSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorubSUN_debug(GLubyte factor, const char* file, int line);
#define glGlobalAlphaFactoruiSUN(factor) glatter_glGlobalAlphaFactoruiSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactoruiSUN_debug(GLuint factor, const char* file, int line);
#define glGlobalAlphaFactorusSUN(factor) glatter_glGlobalAlphaFactorusSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorusSUN_debug(GLushort factor, const char* file, int line);
#endif // defined(GL_SUN_global_alpha)
#if defined(GL_SUN_mesh_array)
#define glDrawMeshArraysSUN(mode, first, count, width) glatter_glDrawMeshArraysSUN_debug((mode), (first), (count), (width), __FILE__, __LINE__)
void glatter_glDrawMeshArraysSUN_debug(GLenum mode, GLint first, GLsizei count, GLsizei width, const char* file, int line);
#endif // defined(GL_SUN_mesh_array)
#if defined(GL_SUN_triangle_list)
#define glReplacementCodePointerSUN(type, stride, pointer) glatter_glReplacementCodePointerSUN_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glReplacementCodePointerSUN_debug(GLenum type, GLsizei stride, const void **pointer, const char* file, int line);
#define glReplacementCodeubSUN(code) glatter_glReplacementCodeubSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeubSUN_debug(GLubyte code, const char* file, int line);
#define glReplacementCodeubvSUN(code) glatter_glReplacementCodeubvSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeubvSUN_debug(const GLubyte *code, const char* file, int line);
#define glReplacementCodeuiSUN(code) glatter_glReplacementCodeuiSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeuiSUN_debug(GLuint code, const char* file, int line);
#define glReplacementCodeuivSUN(code) glatter_glReplacementCodeuivSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeuivSUN_debug(const GLuint *code, const char* file, int line);
#define glReplacementCodeusSUN(code) glatter_glReplacementCodeusSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeusSUN_debug(GLushort code, const char* file, int line);
#define glReplacementCodeusvSUN(code) glatter_glReplacementCodeusvSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeusvSUN_debug(const GLushort *code, const char* file, int line);
#endif // defined(GL_SUN_triangle_list)
#if defined(GL_SUN_vertex)
#define glColor3fVertex3fSUN(r, g, b, x, y, z) glatter_glColor3fVertex3fSUN_debug((r), (g), (b), (x), (y), (z), __FILE__, __LINE__)
void glatter_glColor3fVertex3fSUN_debug(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glColor3fVertex3fvSUN(c, v) glatter_glColor3fVertex3fvSUN_debug((c), (v), __FILE__, __LINE__)
void glatter_glColor3fVertex3fvSUN_debug(const GLfloat *c, const GLfloat *v, const char* file, int line);
#define glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) glatter_glColor4fNormal3fVertex3fSUN_debug((r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glColor4fNormal3fVertex3fSUN_debug(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glColor4fNormal3fVertex3fvSUN(c, n, v) glatter_glColor4fNormal3fVertex3fvSUN_debug((c), (n), (v), __FILE__, __LINE__)
void glatter_glColor4fNormal3fVertex3fvSUN_debug(const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glColor4ubVertex2fSUN(r, g, b, a, x, y) glatter_glColor4ubVertex2fSUN_debug((r), (g), (b), (a), (x), (y), __FILE__, __LINE__)
void glatter_glColor4ubVertex2fSUN_debug(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, const char* file, int line);
#define glColor4ubVertex2fvSUN(c, v) glatter_glColor4ubVertex2fvSUN_debug((c), (v), __FILE__, __LINE__)
void glatter_glColor4ubVertex2fvSUN_debug(const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glColor4ubVertex3fSUN(r, g, b, a, x, y, z) glatter_glColor4ubVertex3fSUN_debug((r), (g), (b), (a), (x), (y), (z), __FILE__, __LINE__)
void glatter_glColor4ubVertex3fSUN_debug(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glColor4ubVertex3fvSUN(c, v) glatter_glColor4ubVertex3fvSUN_debug((c), (v), __FILE__, __LINE__)
void glatter_glColor4ubVertex3fvSUN_debug(const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glNormal3fVertex3fSUN(nx, ny, nz, x, y, z) glatter_glNormal3fVertex3fSUN_debug((nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glNormal3fVertex3fSUN_debug(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glNormal3fVertex3fvSUN(n, v) glatter_glNormal3fVertex3fvSUN_debug((n), (v), __FILE__, __LINE__)
void glatter_glNormal3fVertex3fvSUN_debug(const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) glatter_glReplacementCodeuiColor3fVertex3fSUN_debug((rc), (r), (g), (b), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor3fVertex3fSUN_debug(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor3fVertex3fvSUN_debug((rc), (c), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *c, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiColor4fNormal3fVertex3fSUN_debug((rc), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4fNormal3fVertex3fSUN_debug(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) glatter_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_debug((rc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) glatter_glReplacementCodeuiColor4ubVertex3fSUN_debug((rc), (r), (g), (b), (a), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4ubVertex3fSUN_debug(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor4ubVertex3fvSUN_debug((rc), (c), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4ubVertex3fvSUN_debug(const GLuint *rc, const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiNormal3fVertex3fSUN_debug((rc), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiNormal3fVertex3fSUN_debug(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) glatter_glReplacementCodeuiNormal3fVertex3fvSUN_debug((rc), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_debug((rc), (s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_debug(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_debug((rc), (tc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_debug((rc), (s), (t), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_debug(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_debug((rc), (tc), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) glatter_glReplacementCodeuiTexCoord2fVertex3fSUN_debug((rc), (s), (t), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fVertex3fSUN_debug(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) glatter_glReplacementCodeuiTexCoord2fVertex3fvSUN_debug((rc), (tc), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *tc, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiVertex3fSUN(rc, x, y, z) glatter_glReplacementCodeuiVertex3fSUN_debug((rc), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiVertex3fSUN_debug(GLuint rc, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiVertex3fvSUN(rc, v) glatter_glReplacementCodeuiVertex3fvSUN_debug((rc), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiVertex3fvSUN_debug(const GLuint *rc, const GLfloat *v, const char* file, int line);
#define glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) glatter_glTexCoord2fColor3fVertex3fSUN_debug((s), (t), (r), (g), (b), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fColor3fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fColor3fVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor3fVertex3fvSUN_debug((tc), (c), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fColor3fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *c, const GLfloat *v, const char* file, int line);
#define glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glTexCoord2fColor4fNormal3fVertex3fSUN_debug((s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4fNormal3fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) glatter_glTexCoord2fColor4fNormal3fVertex3fvSUN_debug((tc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4fNormal3fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) glatter_glTexCoord2fColor4ubVertex3fSUN_debug((s), (t), (r), (g), (b), (a), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4ubVertex3fSUN_debug(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fColor4ubVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor4ubVertex3fvSUN_debug((tc), (c), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4ubVertex3fvSUN_debug(const GLfloat *tc, const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) glatter_glTexCoord2fNormal3fVertex3fSUN_debug((s), (t), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fNormal3fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fNormal3fVertex3fvSUN(tc, n, v) glatter_glTexCoord2fNormal3fVertex3fvSUN_debug((tc), (n), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fNormal3fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glTexCoord2fVertex3fSUN(s, t, x, y, z) glatter_glTexCoord2fVertex3fSUN_debug((s), (t), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fVertex3fvSUN(tc, v) glatter_glTexCoord2fVertex3fvSUN_debug((tc), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *v, const char* file, int line);
#define glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) glatter_glTexCoord4fColor4fNormal3fVertex4fSUN_debug((s), (t), (p), (q), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glTexCoord4fColor4fNormal3fVertex4fSUN_debug(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) glatter_glTexCoord4fColor4fNormal3fVertex4fvSUN_debug((tc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glTexCoord4fColor4fNormal3fVertex4fvSUN_debug(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) glatter_glTexCoord4fVertex4fSUN_debug((s), (t), (p), (q), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glTexCoord4fVertex4fSUN_debug(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glTexCoord4fVertex4fvSUN(tc, v) glatter_glTexCoord4fVertex4fvSUN_debug((tc), (v), __FILE__, __LINE__)
void glatter_glTexCoord4fVertex4fvSUN_debug(const GLfloat *tc, const GLfloat *v, const char* file, int line);
#endif // defined(GL_SUN_vertex)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTexture_debug(GLenum texture, const char* file, int line);
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage_debug((target), (level), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImage_debug(GLenum target, GLint level, void *img, const char* file, int line);
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1d_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1f_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1i_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1s_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2d_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2f_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2i_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2s_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3i_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3s_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4i_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4s_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glFogCoordPointer(type, stride, pointer) glatter_glFogCoordPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glFogCoordPointer_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glFogCoordd(coord) glatter_glFogCoordd_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordd_debug(GLdouble coord, const char* file, int line);
#define glFogCoorddv(coord) glatter_glFogCoorddv_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoorddv_debug(const GLdouble *coord, const char* file, int line);
#define glFogCoordf(coord) glatter_glFogCoordf_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordf_debug(GLfloat coord, const char* file, int line);
#define glFogCoordfv(coord) glatter_glFogCoordfv_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordfv_debug(const GLfloat *coord, const char* file, int line);
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays_debug((mode), (first), (count), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawArrays_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount, const char* file, int line);
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements_debug((mode), (count), (type), (indices), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawElements_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const char* file, int line);
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPointParameteri(pname, param) glatter_glPointParameteri_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameteri_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameteriv(pname, params) glatter_glPointParameteriv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameteriv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glSecondaryColor3b(red, green, blue) glatter_glSecondaryColor3b_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3b_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glSecondaryColor3bv(v) glatter_glSecondaryColor3bv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3bv_debug(const GLbyte *v, const char* file, int line);
#define glSecondaryColor3d(red, green, blue) glatter_glSecondaryColor3d_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3d_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glSecondaryColor3dv(v) glatter_glSecondaryColor3dv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3dv_debug(const GLdouble *v, const char* file, int line);
#define glSecondaryColor3f(red, green, blue) glatter_glSecondaryColor3f_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3f_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glSecondaryColor3fv(v) glatter_glSecondaryColor3fv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3fv_debug(const GLfloat *v, const char* file, int line);
#define glSecondaryColor3i(red, green, blue) glatter_glSecondaryColor3i_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3i_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glSecondaryColor3iv(v) glatter_glSecondaryColor3iv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3iv_debug(const GLint *v, const char* file, int line);
#define glSecondaryColor3s(red, green, blue) glatter_glSecondaryColor3s_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3s_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glSecondaryColor3sv(v) glatter_glSecondaryColor3sv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3sv_debug(const GLshort *v, const char* file, int line);
#define glSecondaryColor3ub(red, green, blue) glatter_glSecondaryColor3ub_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3ub_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glSecondaryColor3ubv(v) glatter_glSecondaryColor3ubv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3ubv_debug(const GLubyte *v, const char* file, int line);
#define glSecondaryColor3ui(red, green, blue) glatter_glSecondaryColor3ui_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3ui_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glSecondaryColor3uiv(v) glatter_glSecondaryColor3uiv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3uiv_debug(const GLuint *v, const char* file, int line);
#define glSecondaryColor3us(red, green, blue) glatter_glSecondaryColor3us_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3us_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glSecondaryColor3usv(v) glatter_glSecondaryColor3usv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3usv_debug(const GLushort *v, const char* file, int line);
#define glSecondaryColorPointer(size, type, stride, pointer) glatter_glSecondaryColorPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glSecondaryColorPointer_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWindowPos2d(x, y) glatter_glWindowPos2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glWindowPos2dv(v) glatter_glWindowPos2dv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2dv_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos2f(x, y) glatter_glWindowPos2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glWindowPos2fv(v) glatter_glWindowPos2fv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2fv_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos2i(x, y) glatter_glWindowPos2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2i_debug(GLint x, GLint y, const char* file, int line);
#define glWindowPos2iv(v) glatter_glWindowPos2iv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2iv_debug(const GLint *v, const char* file, int line);
#define glWindowPos2s(x, y) glatter_glWindowPos2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glWindowPos2sv(v) glatter_glWindowPos2sv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2sv_debug(const GLshort *v, const char* file, int line);
#define glWindowPos3d(x, y, z) glatter_glWindowPos3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glWindowPos3dv(v) glatter_glWindowPos3dv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3dv_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos3f(x, y, z) glatter_glWindowPos3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glWindowPos3fv(v) glatter_glWindowPos3fv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3fv_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos3i(x, y, z) glatter_glWindowPos3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glWindowPos3iv(v) glatter_glWindowPos3iv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3iv_debug(const GLint *v, const char* file, int line);
#define glWindowPos3s(x, y, z) glatter_glWindowPos3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glWindowPos3sv(v) glatter_glWindowPos3sv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3sv_debug(const GLshort *v, const char* file, int line);
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectiv_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glMapBuffer(target, access) glatter_glMapBuffer_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBuffer_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1s_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2s_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3s_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nbv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Niv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nsv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nub_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nuiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nusv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4s_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRender_debug(GLuint id, GLenum mode, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocation_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClampColor(target, clamp) glatter_glClampColor_debug((target), (clamp), __FILE__, __LINE__)
void glatter_glClampColor_debug(GLenum target, GLenum clamp, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEndConditionalRender() glatter_glEndConditionalRender_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRender_debug(const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture1D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1i_debug(GLuint index, GLint x, const char* file, int line);
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1ui_debug(GLuint index, GLuint x, const char* file, int line);
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2i_debug(GLuint index, GLint x, GLint y, const char* file, int line);
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2ui_debug(GLuint index, GLuint x, GLuint y, const char* file, int line);
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3i_debug(GLuint index, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, const char* file, int line);
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName_debug((program), (uniformIndex), (bufSize), (length), (uniformName), __FILE__, __LINE__)
void glatter_glGetActiveUniformName_debug(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex_debug((index), __FILE__, __LINE__)
void glatter_glPrimitiveRestartIndex_debug(GLuint index, const char* file, int line);
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (drawcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertex_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex, const char* file, int line);
#define glProvokingVertex(mode) glatter_glProvokingVertex_debug((mode), __FILE__, __LINE__)
void glatter_glProvokingVertex_debug(GLenum mode, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationIndexed_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glColorP3ui(type, color) glatter_glColorP3ui_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP3ui_debug(GLenum type, GLuint color, const char* file, int line);
#define glColorP3uiv(type, color) glatter_glColorP3uiv_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP3uiv_debug(GLenum type, const GLuint *color, const char* file, int line);
#define glColorP4ui(type, color) glatter_glColorP4ui_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP4ui_debug(GLenum type, GLuint color, const char* file, int line);
#define glColorP4uiv(type, color) glatter_glColorP4uiv_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP4uiv_debug(GLenum type, const GLuint *color, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataIndex_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64v_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64v_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glMultiTexCoordP1ui(texture, type, coords) glatter_glMultiTexCoordP1ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP1ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP1uiv(texture, type, coords) glatter_glMultiTexCoordP1uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP1uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glMultiTexCoordP2ui(texture, type, coords) glatter_glMultiTexCoordP2ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP2ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP2uiv(texture, type, coords) glatter_glMultiTexCoordP2uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP2uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glMultiTexCoordP3ui(texture, type, coords) glatter_glMultiTexCoordP3ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP3ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP3uiv(texture, type, coords) glatter_glMultiTexCoordP3uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP3uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glMultiTexCoordP4ui(texture, type, coords) glatter_glMultiTexCoordP4ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP4ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP4uiv(texture, type, coords) glatter_glMultiTexCoordP4uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP4uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glNormalP3ui(type, coords) glatter_glNormalP3ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glNormalP3ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glNormalP3uiv(type, coords) glatter_glNormalP3uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glNormalP3uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glQueryCounter(id, target) glatter_glQueryCounter_debug((id), (target), __FILE__, __LINE__)
void glatter_glQueryCounter_debug(GLuint id, GLenum target, const char* file, int line);
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSecondaryColorP3ui(type, color) glatter_glSecondaryColorP3ui_debug((type), (color), __FILE__, __LINE__)
void glatter_glSecondaryColorP3ui_debug(GLenum type, GLuint color, const char* file, int line);
#define glSecondaryColorP3uiv(type, color) glatter_glSecondaryColorP3uiv_debug((type), (color), __FILE__, __LINE__)
void glatter_glSecondaryColorP3uiv_debug(GLenum type, const GLuint *color, const char* file, int line);
#define glTexCoordP1ui(type, coords) glatter_glTexCoordP1ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP1ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP1uiv(type, coords) glatter_glTexCoordP1uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP1uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glTexCoordP2ui(type, coords) glatter_glTexCoordP2ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP2ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP2uiv(type, coords) glatter_glTexCoordP2uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP2uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glTexCoordP3ui(type, coords) glatter_glTexCoordP3ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP3ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP3uiv(type, coords) glatter_glTexCoordP3uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP3uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glTexCoordP4ui(type, coords) glatter_glTexCoordP4ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP4ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP4uiv(type, coords) glatter_glTexCoordP4uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP4uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexP2ui(type, value) glatter_glVertexP2ui_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP2ui_debug(GLenum type, GLuint value, const char* file, int line);
#define glVertexP2uiv(type, value) glatter_glVertexP2uiv_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP2uiv_debug(GLenum type, const GLuint *value, const char* file, int line);
#define glVertexP3ui(type, value) glatter_glVertexP3ui_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP3ui_debug(GLenum type, GLuint value, const char* file, int line);
#define glVertexP3uiv(type, value) glatter_glVertexP3uiv_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP3uiv_debug(GLenum type, const GLuint *value, const char* file, int line);
#define glVertexP4ui(type, value) glatter_glVertexP4ui_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP4ui_debug(GLenum type, GLuint value, const char* file, int line);
#define glVertexP4uiv(type, value) glatter_glVertexP4uiv_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP4uiv_debug(GLenum type, const GLuint *value, const char* file, int line);
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed_debug((target), (index), (id), __FILE__, __LINE__)
void glatter_glBeginQueryIndexed_debug(GLenum target, GLuint index, GLuint id, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedback_debug(GLenum mode, GLuint id, const char* file, int line);
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream_debug((mode), (id), (stream), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStream_debug(GLenum mode, GLuint id, GLuint stream, const char* file, int line);
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed_debug((target), (index), __FILE__, __LINE__)
void glatter_glEndQueryIndexed_debug(GLenum target, GLuint index, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv_debug((program), (shadertype), (index), (pname), (values), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformiv_debug(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values, const char* file, int line);
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv_debug((program), (shadertype), (pname), (values), __FILE__, __LINE__)
void glatter_glGetProgramStageiv_debug(GLuint program, GLenum shadertype, GLenum pname, GLint *values, const char* file, int line);
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryIndexediv_debug(GLenum target, GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLuint glatter_glGetSubroutineIndex_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLint glatter_glGetSubroutineUniformLocation_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv_debug((shadertype), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformSubroutineuiv_debug(GLenum shadertype, GLint location, GLuint *params, const char* file, int line);
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformdv_debug(GLuint program, GLint location, GLdouble *params, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv_debug((pname), (values), __FILE__, __LINE__)
void glatter_glPatchParameterfv_debug(GLenum pname, const GLfloat *values, const char* file, int line);
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glUniform1d(location, x) glatter_glUniform1d_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1d_debug(GLint location, GLdouble x, const char* file, int line);
#define glUniform1dv(location, count, value) glatter_glUniform1dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform2d(location, x, y) glatter_glUniform2d_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2d_debug(GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glUniform2dv(location, count, value) glatter_glUniform2dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform3d(location, x, y, z) glatter_glUniform3d_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glUniform3dv(location, count, value) glatter_glUniform3dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glUniform4dv(location, count, value) glatter_glUniform4dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv_debug((shadertype), (count), (indices), __FILE__, __LINE__)
void glatter_glUniformSubroutinesuiv_debug(GLenum shadertype, GLsizei count, const GLuint *indices, const char* file, int line);
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayv_debug(GLuint first, GLsizei count, const GLdouble *v, const char* file, int line);
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexed_debug(GLuint index, GLdouble n, GLdouble f, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoublei_v_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_v_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1d_debug(GLuint program, GLint location, GLdouble v0, const char* file, int line);
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, const char* file, int line);
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, const char* file, int line);
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, const char* file, int line);
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayv_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexed_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribLPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayv_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedf_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedBaseInstance_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced_debug((mode), (id), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackInstanced_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced_debug((mode), (id), (stream), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStreamInstanced_debug(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount, const char* file, int line);
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv_debug((program), (bufferIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveAtomicCounterBufferiv_debug(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTexStorage1D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData_debug((target), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferData_debug(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData_debug((target), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferSubData_debug(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformati64v_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocationIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData_debug((buffer), __FILE__, __LINE__)
void glatter_glInvalidateBufferData_debug(GLuint buffer, const char* file, int line);
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glInvalidateBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage_debug((texture), (level), __FILE__, __LINE__)
void glatter_glInvalidateTexImage_debug(GLuint texture, GLint level, const char* file, int line);
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glInvalidateTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirect_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroup_debug(const char* file, int line);
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding_debug((program), (storageBlockIndex), (storageBlockBinding), __FILE__, __LINE__)
void glatter_glShaderStorageBlockBinding_debug(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, const char* file, int line);
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureView_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribLFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase_debug((target), (first), (count), (buffers), __FILE__, __LINE__)
void glatter_glBindBuffersBase_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const char* file, int line);
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange_debug((target), (first), (count), (buffers), (offsets), (sizes), __FILE__, __LINE__)
void glatter_glBindBuffersRange_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes, const char* file, int line);
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindImageTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers_debug((first), (count), (samplers), __FILE__, __LINE__)
void glatter_glBindSamplers_debug(GLuint first, GLsizei count, const GLuint *samplers, const char* file, int line);
#define glBindTextures(first, count, textures) glatter_glBindTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers_debug((first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glBindVertexBuffers_debug(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage_debug((target), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glBufferStorage_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit_debug((unit), (texture), __FILE__, __LINE__)
void glatter_glBindTextureUnit_debug(GLuint unit, GLuint texture, const char* file, int line);
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer_debug((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitNamedFramebuffer_debug(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatus_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferData_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubData_debug(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) glatter_glClearNamedFramebufferfi_debug((framebuffer), (buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfi_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferuiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClipControl(origin, depth) glatter_glClipControl_debug((origin), (depth), __FILE__, __LINE__)
void glatter_glClipControl_debug(GLenum origin, GLenum depth, const char* file, int line);
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyNamedBufferSubData_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D_debug((texture), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glCreateBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glCreateFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glCreateProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glCreateQueries(target, n, ids) glatter_glCreateQueries_debug((target), (n), (ids), __FILE__, __LINE__)
void glatter_glCreateQueries_debug(GLenum target, GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glCreateRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers_debug((n), (samplers), __FILE__, __LINE__)
void glatter_glCreateSamplers_debug(GLsizei n, GLuint *samplers, const char* file, int line);
#define glCreateTextures(target, n, textures) glatter_glCreateTextures_debug((target), (n), (textures), __FILE__, __LINE__)
void glatter_glCreateTextures_debug(GLenum target, GLsizei n, GLuint *textures, const char* file, int line);
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glCreateTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glCreateVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap_debug((texture), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmap_debug(GLuint texture, const char* file, int line);
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage_debug((texture), (level), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImage_debug(GLuint texture, GLint level, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteri64v_debug(GLuint buffer, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteriv_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointerv_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameteriv_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameteriv_debug(GLuint framebuffer, GLenum pname, GLint *param, const char* file, int line);
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameteriv_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjecti64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectui64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectuiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage_debug((texture), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfv_debug(GLuint texture, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameteriv_debug(GLuint texture, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIiv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuiv_debug(GLuint texture, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfv_debug(GLuint texture, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameteriv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki64_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint64 *param, const char* file, int line);
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint *param, const char* file, int line);
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv_debug((xfb), (pname), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackiv_debug(GLuint xfb, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexed64iv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param, const char* file, int line);
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexediv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayiv_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetnColorTable(target, format, type, bufSize, table) glatter_glGetnColorTable_debug((target), (format), (type), (bufSize), (table), __FILE__, __LINE__)
void glatter_glGetnColorTable_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table, const char* file, int line);
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage_debug((target), (lod), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImage_debug(GLenum target, GLint lod, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnConvolutionFilter(target, format, type, bufSize, image) glatter_glGetnConvolutionFilter_debug((target), (format), (type), (bufSize), (image), __FILE__, __LINE__)
void glatter_glGetnConvolutionFilter_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image, const char* file, int line);
#define glGetnHistogram(target, reset, format, type, bufSize, values) glatter_glGetnHistogram_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnHistogram_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnMapdv(target, query, bufSize, v) glatter_glGetnMapdv_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapdv_debug(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v, const char* file, int line);
#define glGetnMapfv(target, query, bufSize, v) glatter_glGetnMapfv_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapfv_debug(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v, const char* file, int line);
#define glGetnMapiv(target, query, bufSize, v) glatter_glGetnMapiv_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapiv_debug(GLenum target, GLenum query, GLsizei bufSize, GLint *v, const char* file, int line);
#define glGetnMinmax(target, reset, format, type, bufSize, values) glatter_glGetnMinmax_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnMinmax_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnPixelMapfv(map, bufSize, values) glatter_glGetnPixelMapfv_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapfv_debug(GLenum map, GLsizei bufSize, GLfloat *values, const char* file, int line);
#define glGetnPixelMapuiv(map, bufSize, values) glatter_glGetnPixelMapuiv_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapuiv_debug(GLenum map, GLsizei bufSize, GLuint *values, const char* file, int line);
#define glGetnPixelMapusv(map, bufSize, values) glatter_glGetnPixelMapusv_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapusv_debug(GLenum map, GLsizei bufSize, GLushort *values, const char* file, int line);
#define glGetnPolygonStipple(bufSize, pattern) glatter_glGetnPolygonStipple_debug((bufSize), (pattern), __FILE__, __LINE__)
void glatter_glGetnPolygonStipple_debug(GLsizei bufSize, GLubyte *pattern, const char* file, int line);
#define glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilter_debug((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span), __FILE__, __LINE__)
void glatter_glGetnSeparableFilter_debug(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span, const char* file, int line);
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage_debug((target), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdv_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData_debug((framebuffer), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData_debug((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferSubData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBuffer_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferData_debug(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorage_debug(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer_debug((framebuffer), (buf), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffer_debug(GLuint framebuffer, GLenum buf, const char* file, int line);
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffers_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteri_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer_debug((framebuffer), (src), __FILE__, __LINE__)
void glatter_glNamedFramebufferReadBuffer_debug(GLuint framebuffer, GLenum src, const char* file, int line);
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbuffer_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayer_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorage_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisample_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#define glTextureBarrier() glatter_glTextureBarrier_debug(__FILE__, __LINE__)
void glatter_glTextureBarrier_debug(const char* file, int line);
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer_debug((texture), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBuffer_debug(GLuint texture, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange_debug((texture), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRange_debug(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIiv_debug(GLuint texture, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuiv_debug(GLuint texture, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterf_debug(GLuint texture, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfv_debug(GLuint texture, GLenum pname, const GLfloat *param, const char* file, int line);
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteri_debug(GLuint texture, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriv_debug(GLuint texture, GLenum pname, const GLint *param, const char* file, int line);
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D_debug((texture), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D_debug((texture), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample_debug((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D_debug((texture), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample_debug((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase_debug((xfb), (index), (buffer), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferBase_debug(GLuint xfb, GLuint index, GLuint buffer, const char* file, int line);
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange_debug((xfb), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferRange_debug(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBuffer_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayAttribBinding_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribIFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribLFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayBindingDivisor_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer_debug((vaobj), (buffer), __FILE__, __LINE__)
void glatter_glVertexArrayElementBuffer_debug(GLuint vaobj, GLuint buffer, const char* file, int line);
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffer_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers_debug((vaobj), (first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffers_debug(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#endif // defined(GL_VERSION_4_5)
#if defined(GL_VERSION_4_6)
#define glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCount_debug((mode), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectCount_debug(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCount_debug((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectCount_debug(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glPolygonOffsetClamp(factor, units, clamp) glatter_glPolygonOffsetClamp_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClamp_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#define glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShader_debug((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue), __FILE__, __LINE__)
void glatter_glSpecializeShader_debug(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue, const char* file, int line);
#endif // defined(GL_VERSION_4_6)
#endif // defined(__gl_glext_h_)
#if defined(__glcorearb_h_)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleARB_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleARB_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleARB_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vARB_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentARB_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64ARB_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64ARB_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64ARB_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vARB_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB_debug((context), (event), (flags), __FILE__, __LINE__)
GLsync glatter_glCreateSyncFromCLeventARB_debug(struct _cl_context *context, struct _cl_event *event, GLbitfield flags, const char* file, int line);
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB_debug((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z), __FILE__, __LINE__)
void glatter_glDispatchComputeGroupSizeARB_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z, const char* file, int line);
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackARB_debug(GLDEBUGPROCARB callback, const void *userParam, const char* file, int line);
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControlARB_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertARB_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogARB_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiARB_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiARB_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiARB_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciARB_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB_debug((mode), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectCountARB_debug(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB_debug((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectCountARB_debug(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusARB_debug(const char* file, int line);
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB_debug((target), (lod), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImageARB_debug(GLenum target, GLint lod, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB_debug((target), (level), (format), (type), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnTexImageARB_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsARB_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShadingARB_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB_debug((shader), (count), (path), (length), __FILE__, __LINE__)
void glatter_glCompileShaderIncludeARB_debug(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length, const char* file, int line);
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
void glatter_glDeleteNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB_debug((namelen), (name), (bufSize), (stringlen), (string), __FILE__, __LINE__)
void glatter_glGetNamedStringARB_debug(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string, const char* file, int line);
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB_debug((namelen), (name), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedStringivARB_debug(GLint namelen, const GLchar *name, GLenum pname, GLint *params, const char* file, int line);
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
GLboolean glatter_glIsNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB_debug((type), (namelen), (name), (stringlen), (string), __FILE__, __LINE__)
void glatter_glNamedStringARB_debug(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string, const char* file, int line);
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB_debug((target), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glBufferPageCommitmentARB_debug(GLenum target, GLintptr offset, GLsizei size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentARB_debug(GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentEXT_debug(GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) glatter_glTexPageCommitmentARB_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (resident), __FILE__, __LINE__)
void glatter_glTexPageCommitmentARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident, const char* file, int line);
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_VERSION_1_0)
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepth(depth) glatter_glClearDepth_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepth_debug(GLdouble depth, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRange(near, far) glatter_glDepthRange_debug((near), (far), __FILE__, __LINE__)
void glatter_glDepthRange_debug(GLdouble near, GLdouble far, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDrawBuffer(buf) glatter_glDrawBuffer_debug((buf), __FILE__, __LINE__)
void glatter_glDrawBuffer_debug(GLenum buf, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetDoublev(pname, data) glatter_glGetDoublev_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetDoublev_debug(GLenum pname, GLdouble *data, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_debug((target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glPixelStoref(pname, param) glatter_glPixelStoref_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStoref_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPolygonMode(face, mode) glatter_glPolygonMode_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonMode_debug(GLenum face, GLenum mode, const char* file, int line);
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D_debug((target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage1D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_VERSION_1_0)
#if defined(GL_VERSION_1_1)
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D_debug((target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, void **params, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_1)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage_debug((target), (level), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImage_debug(GLenum target, GLint level, void *img, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays_debug((mode), (first), (count), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawArrays_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount, const char* file, int line);
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements_debug((mode), (count), (type), (indices), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawElements_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const char* file, int line);
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPointParameteri(pname, param) glatter_glPointParameteri_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameteri_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameteriv(pname, params) glatter_glPointParameteriv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameteriv_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectiv_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glMapBuffer(target, access) glatter_glMapBuffer_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBuffer_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1s_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2s_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3s_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nbv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Niv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nsv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nub_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nuiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nusv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4s_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRender_debug(GLuint id, GLenum mode, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocation_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClampColor(target, clamp) glatter_glClampColor_debug((target), (clamp), __FILE__, __LINE__)
void glatter_glClampColor_debug(GLenum target, GLenum clamp, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEndConditionalRender() glatter_glEndConditionalRender_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRender_debug(const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture1D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1i_debug(GLuint index, GLint x, const char* file, int line);
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1ui_debug(GLuint index, GLuint x, const char* file, int line);
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2i_debug(GLuint index, GLint x, GLint y, const char* file, int line);
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2ui_debug(GLuint index, GLuint x, GLuint y, const char* file, int line);
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3i_debug(GLuint index, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, const char* file, int line);
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName_debug((program), (uniformIndex), (bufSize), (length), (uniformName), __FILE__, __LINE__)
void glatter_glGetActiveUniformName_debug(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex_debug((index), __FILE__, __LINE__)
void glatter_glPrimitiveRestartIndex_debug(GLuint index, const char* file, int line);
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (drawcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertex_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex, const char* file, int line);
#define glProvokingVertex(mode) glatter_glProvokingVertex_debug((mode), __FILE__, __LINE__)
void glatter_glProvokingVertex_debug(GLenum mode, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationIndexed_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataIndex_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64v_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64v_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glQueryCounter(id, target) glatter_glQueryCounter_debug((id), (target), __FILE__, __LINE__)
void glatter_glQueryCounter_debug(GLuint id, GLenum target, const char* file, int line);
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed_debug((target), (index), (id), __FILE__, __LINE__)
void glatter_glBeginQueryIndexed_debug(GLenum target, GLuint index, GLuint id, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedback_debug(GLenum mode, GLuint id, const char* file, int line);
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream_debug((mode), (id), (stream), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStream_debug(GLenum mode, GLuint id, GLuint stream, const char* file, int line);
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed_debug((target), (index), __FILE__, __LINE__)
void glatter_glEndQueryIndexed_debug(GLenum target, GLuint index, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv_debug((program), (shadertype), (index), (pname), (values), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformiv_debug(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values, const char* file, int line);
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv_debug((program), (shadertype), (pname), (values), __FILE__, __LINE__)
void glatter_glGetProgramStageiv_debug(GLuint program, GLenum shadertype, GLenum pname, GLint *values, const char* file, int line);
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryIndexediv_debug(GLenum target, GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLuint glatter_glGetSubroutineIndex_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLint glatter_glGetSubroutineUniformLocation_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv_debug((shadertype), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformSubroutineuiv_debug(GLenum shadertype, GLint location, GLuint *params, const char* file, int line);
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformdv_debug(GLuint program, GLint location, GLdouble *params, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv_debug((pname), (values), __FILE__, __LINE__)
void glatter_glPatchParameterfv_debug(GLenum pname, const GLfloat *values, const char* file, int line);
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glUniform1d(location, x) glatter_glUniform1d_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1d_debug(GLint location, GLdouble x, const char* file, int line);
#define glUniform1dv(location, count, value) glatter_glUniform1dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform2d(location, x, y) glatter_glUniform2d_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2d_debug(GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glUniform2dv(location, count, value) glatter_glUniform2dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform3d(location, x, y, z) glatter_glUniform3d_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glUniform3dv(location, count, value) glatter_glUniform3dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glUniform4dv(location, count, value) glatter_glUniform4dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv_debug((shadertype), (count), (indices), __FILE__, __LINE__)
void glatter_glUniformSubroutinesuiv_debug(GLenum shadertype, GLsizei count, const GLuint *indices, const char* file, int line);
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayv_debug(GLuint first, GLsizei count, const GLdouble *v, const char* file, int line);
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexed_debug(GLuint index, GLdouble n, GLdouble f, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoublei_v_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_v_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1d_debug(GLuint program, GLint location, GLdouble v0, const char* file, int line);
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, const char* file, int line);
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, const char* file, int line);
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, const char* file, int line);
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayv_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexed_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribLPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayv_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedf_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedBaseInstance_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced_debug((mode), (id), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackInstanced_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced_debug((mode), (id), (stream), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStreamInstanced_debug(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount, const char* file, int line);
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv_debug((program), (bufferIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveAtomicCounterBufferiv_debug(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTexStorage1D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData_debug((target), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferData_debug(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData_debug((target), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferSubData_debug(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformati64v_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocationIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData_debug((buffer), __FILE__, __LINE__)
void glatter_glInvalidateBufferData_debug(GLuint buffer, const char* file, int line);
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glInvalidateBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage_debug((texture), (level), __FILE__, __LINE__)
void glatter_glInvalidateTexImage_debug(GLuint texture, GLint level, const char* file, int line);
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glInvalidateTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirect_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroup_debug(const char* file, int line);
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding_debug((program), (storageBlockIndex), (storageBlockBinding), __FILE__, __LINE__)
void glatter_glShaderStorageBlockBinding_debug(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, const char* file, int line);
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureView_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribLFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase_debug((target), (first), (count), (buffers), __FILE__, __LINE__)
void glatter_glBindBuffersBase_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const char* file, int line);
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange_debug((target), (first), (count), (buffers), (offsets), (sizes), __FILE__, __LINE__)
void glatter_glBindBuffersRange_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes, const char* file, int line);
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindImageTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers_debug((first), (count), (samplers), __FILE__, __LINE__)
void glatter_glBindSamplers_debug(GLuint first, GLsizei count, const GLuint *samplers, const char* file, int line);
#define glBindTextures(first, count, textures) glatter_glBindTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers_debug((first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glBindVertexBuffers_debug(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage_debug((target), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glBufferStorage_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit_debug((unit), (texture), __FILE__, __LINE__)
void glatter_glBindTextureUnit_debug(GLuint unit, GLuint texture, const char* file, int line);
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer_debug((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitNamedFramebuffer_debug(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatus_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferData_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubData_debug(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedFramebufferfi(framebuffer, buffer, depth, stencil) glatter_glClearNamedFramebufferfi_debug((framebuffer), (buffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfi_debug(GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil, const char* file, int line);
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferuiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClipControl(origin, depth) glatter_glClipControl_debug((origin), (depth), __FILE__, __LINE__)
void glatter_glClipControl_debug(GLenum origin, GLenum depth, const char* file, int line);
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyNamedBufferSubData_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size, const char* file, int line);
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D_debug((texture), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glCreateBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glCreateFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glCreateProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glCreateQueries(target, n, ids) glatter_glCreateQueries_debug((target), (n), (ids), __FILE__, __LINE__)
void glatter_glCreateQueries_debug(GLenum target, GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glCreateRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers_debug((n), (samplers), __FILE__, __LINE__)
void glatter_glCreateSamplers_debug(GLsizei n, GLuint *samplers, const char* file, int line);
#define glCreateTextures(target, n, textures) glatter_glCreateTextures_debug((target), (n), (textures), __FILE__, __LINE__)
void glatter_glCreateTextures_debug(GLenum target, GLsizei n, GLuint *textures, const char* file, int line);
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glCreateTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glCreateVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizei length, const char* file, int line);
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap_debug((texture), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmap_debug(GLuint texture, const char* file, int line);
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage_debug((texture), (level), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImage_debug(GLuint texture, GLint level, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteri64v_debug(GLuint buffer, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteriv_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointerv_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizei size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameteriv_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameteriv_debug(GLuint framebuffer, GLenum pname, GLint *param, const char* file, int line);
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameteriv_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage_debug((texture), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfv_debug(GLuint texture, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameteriv_debug(GLuint texture, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIiv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuiv_debug(GLuint texture, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfv_debug(GLuint texture, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameteriv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki64_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint64 *param, const char* file, int line);
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint *param, const char* file, int line);
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv_debug((xfb), (pname), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackiv_debug(GLuint xfb, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexed64iv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param, const char* file, int line);
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexediv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayiv_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage_debug((target), (lod), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImage_debug(GLenum target, GLint lod, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage_debug((target), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdv_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData_debug((framebuffer), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData_debug((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferSubData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBuffer_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferData_debug(GLuint buffer, GLsizei size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorage_debug(GLuint buffer, GLsizei size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizei size, const void *data, const char* file, int line);
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer_debug((framebuffer), (buf), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffer_debug(GLuint framebuffer, GLenum buf, const char* file, int line);
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffers_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteri_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer_debug((framebuffer), (src), __FILE__, __LINE__)
void glatter_glNamedFramebufferReadBuffer_debug(GLuint framebuffer, GLenum src, const char* file, int line);
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbuffer_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayer_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorage_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisample_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#define glTextureBarrier() glatter_glTextureBarrier_debug(__FILE__, __LINE__)
void glatter_glTextureBarrier_debug(const char* file, int line);
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer_debug((texture), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBuffer_debug(GLuint texture, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange_debug((texture), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRange_debug(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size, const char* file, int line);
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIiv_debug(GLuint texture, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuiv_debug(GLuint texture, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterf_debug(GLuint texture, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfv_debug(GLuint texture, GLenum pname, const GLfloat *param, const char* file, int line);
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteri_debug(GLuint texture, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriv_debug(GLuint texture, GLenum pname, const GLint *param, const char* file, int line);
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D_debug((texture), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D_debug((texture), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample_debug((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D_debug((texture), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample_debug((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase_debug((xfb), (index), (buffer), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferBase_debug(GLuint xfb, GLuint index, GLuint buffer, const char* file, int line);
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange_debug((xfb), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferRange_debug(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size, const char* file, int line);
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBuffer_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayAttribBinding_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribIFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribLFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayBindingDivisor_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer_debug((vaobj), (buffer), __FILE__, __LINE__)
void glatter_glVertexArrayElementBuffer_debug(GLuint vaobj, GLuint buffer, const char* file, int line);
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffer_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers_debug((vaobj), (first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffers_debug(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#endif // defined(__glcorearb_h_)
#endif // defined(GL_VERSION_4_5)
#endif // GLATTER_GL

