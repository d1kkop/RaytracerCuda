/*
Copyright 2017 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_WGL
#if defined(__wgl_wglext_h_)
#if defined(WGL_3DL_stereo_control)
#define wglSetStereoEmitterState3DL(hDC, uState) glatter_wglSetStereoEmitterState3DL_debug((hDC), (uState), __FILE__, __LINE__)
BOOL glatter_wglSetStereoEmitterState3DL_debug(HDC hDC, UINT uState, const char* file, int line);
#endif // defined(WGL_3DL_stereo_control)
#if defined(WGL_AMD_gpu_association)
#define wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_wglBlitContextFramebufferAMD_debug((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
VOID glatter_wglBlitContextFramebufferAMD_debug(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define wglCreateAssociatedContextAMD(id) glatter_wglCreateAssociatedContextAMD_debug((id), __FILE__, __LINE__)
HGLRC glatter_wglCreateAssociatedContextAMD_debug(UINT id, const char* file, int line);
#define wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList) glatter_wglCreateAssociatedContextAttribsAMD_debug((id), (hShareContext), (attribList), __FILE__, __LINE__)
HGLRC glatter_wglCreateAssociatedContextAttribsAMD_debug(UINT id, HGLRC hShareContext, const int *attribList, const char* file, int line);
#define wglDeleteAssociatedContextAMD(hglrc) glatter_wglDeleteAssociatedContextAMD_debug((hglrc), __FILE__, __LINE__)
BOOL glatter_wglDeleteAssociatedContextAMD_debug(HGLRC hglrc, const char* file, int line);
#define wglGetContextGPUIDAMD(hglrc) glatter_wglGetContextGPUIDAMD_debug((hglrc), __FILE__, __LINE__)
UINT glatter_wglGetContextGPUIDAMD_debug(HGLRC hglrc, const char* file, int line);
#define wglGetCurrentAssociatedContextAMD() glatter_wglGetCurrentAssociatedContextAMD_debug(__FILE__, __LINE__)
HGLRC glatter_wglGetCurrentAssociatedContextAMD_debug(const char* file, int line);
#define wglGetGPUIDsAMD(maxCount, ids) glatter_wglGetGPUIDsAMD_debug((maxCount), (ids), __FILE__, __LINE__)
UINT glatter_wglGetGPUIDsAMD_debug(UINT maxCount, UINT *ids, const char* file, int line);
#define wglGetGPUInfoAMD(id, property, dataType, size, data) glatter_wglGetGPUInfoAMD_debug((id), (property), (dataType), (size), (data), __FILE__, __LINE__)
INT glatter_wglGetGPUInfoAMD_debug(UINT id, int property, GLenum dataType, UINT size, void *data, const char* file, int line);
#define wglMakeAssociatedContextCurrentAMD(hglrc) glatter_wglMakeAssociatedContextCurrentAMD_debug((hglrc), __FILE__, __LINE__)
BOOL glatter_wglMakeAssociatedContextCurrentAMD_debug(HGLRC hglrc, const char* file, int line);
#endif // defined(WGL_AMD_gpu_association)
#if defined(WGL_ARB_buffer_region)
#define wglCreateBufferRegionARB(hDC, iLayerPlane, uType) glatter_wglCreateBufferRegionARB_debug((hDC), (iLayerPlane), (uType), __FILE__, __LINE__)
HANDLE glatter_wglCreateBufferRegionARB_debug(HDC hDC, int iLayerPlane, UINT uType, const char* file, int line);
#define wglDeleteBufferRegionARB(hRegion) glatter_wglDeleteBufferRegionARB_debug((hRegion), __FILE__, __LINE__)
VOID glatter_wglDeleteBufferRegionARB_debug(HANDLE hRegion, const char* file, int line);
#define wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc) glatter_wglRestoreBufferRegionARB_debug((hRegion), (x), (y), (width), (height), (xSrc), (ySrc), __FILE__, __LINE__)
BOOL glatter_wglRestoreBufferRegionARB_debug(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc, const char* file, int line);
#define wglSaveBufferRegionARB(hRegion, x, y, width, height) glatter_wglSaveBufferRegionARB_debug((hRegion), (x), (y), (width), (height), __FILE__, __LINE__)
BOOL glatter_wglSaveBufferRegionARB_debug(HANDLE hRegion, int x, int y, int width, int height, const char* file, int line);
#endif // defined(WGL_ARB_buffer_region)
#if defined(WGL_ARB_create_context)
#define wglCreateContextAttribsARB(hDC, hShareContext, attribList) glatter_wglCreateContextAttribsARB_debug((hDC), (hShareContext), (attribList), __FILE__, __LINE__)
HGLRC glatter_wglCreateContextAttribsARB_debug(HDC hDC, HGLRC hShareContext, const int *attribList, const char* file, int line);
#endif // defined(WGL_ARB_create_context)
#if defined(WGL_ARB_extensions_string)
#define wglGetExtensionsStringARB(hdc) glatter_wglGetExtensionsStringARB_debug((hdc), __FILE__, __LINE__)
const char * glatter_wglGetExtensionsStringARB_debug(HDC hdc, const char* file, int line);
#endif // defined(WGL_ARB_extensions_string)
#if defined(WGL_ARB_make_current_read)
#define wglGetCurrentReadDCARB() glatter_wglGetCurrentReadDCARB_debug(__FILE__, __LINE__)
HDC glatter_wglGetCurrentReadDCARB_debug(const char* file, int line);
#define wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentARB_debug((hDrawDC), (hReadDC), (hglrc), __FILE__, __LINE__)
BOOL glatter_wglMakeContextCurrentARB_debug(HDC hDrawDC, HDC hReadDC, HGLRC hglrc, const char* file, int line);
#endif // defined(WGL_ARB_make_current_read)
#if defined(WGL_ARB_pbuffer)
#define wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferARB_debug((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList), __FILE__, __LINE__)
HPBUFFERARB glatter_wglCreatePbufferARB_debug(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList, const char* file, int line);
#define wglDestroyPbufferARB(hPbuffer) glatter_wglDestroyPbufferARB_debug((hPbuffer), __FILE__, __LINE__)
BOOL glatter_wglDestroyPbufferARB_debug(HPBUFFERARB hPbuffer, const char* file, int line);
#define wglGetPbufferDCARB(hPbuffer) glatter_wglGetPbufferDCARB_debug((hPbuffer), __FILE__, __LINE__)
HDC glatter_wglGetPbufferDCARB_debug(HPBUFFERARB hPbuffer, const char* file, int line);
#define wglQueryPbufferARB(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferARB_debug((hPbuffer), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryPbufferARB_debug(HPBUFFERARB hPbuffer, int iAttribute, int *piValue, const char* file, int line);
#define wglReleasePbufferDCARB(hPbuffer, hDC) glatter_wglReleasePbufferDCARB_debug((hPbuffer), (hDC), __FILE__, __LINE__)
int glatter_wglReleasePbufferDCARB_debug(HPBUFFERARB hPbuffer, HDC hDC, const char* file, int line);
#endif // defined(WGL_ARB_pbuffer)
#if defined(WGL_ARB_pixel_format)
#define wglChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatARB_debug((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats), __FILE__, __LINE__)
BOOL glatter_wglChoosePixelFormatARB_debug(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats, const char* file, int line);
#define wglGetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvARB_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribfvARB_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues, const char* file, int line);
#define wglGetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivARB_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribivARB_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues, const char* file, int line);
#endif // defined(WGL_ARB_pixel_format)
#if defined(WGL_ARB_render_texture)
#define wglBindTexImageARB(hPbuffer, iBuffer) glatter_wglBindTexImageARB_debug((hPbuffer), (iBuffer), __FILE__, __LINE__)
BOOL glatter_wglBindTexImageARB_debug(HPBUFFERARB hPbuffer, int iBuffer, const char* file, int line);
#define wglReleaseTexImageARB(hPbuffer, iBuffer) glatter_wglReleaseTexImageARB_debug((hPbuffer), (iBuffer), __FILE__, __LINE__)
BOOL glatter_wglReleaseTexImageARB_debug(HPBUFFERARB hPbuffer, int iBuffer, const char* file, int line);
#define wglSetPbufferAttribARB(hPbuffer, piAttribList) glatter_wglSetPbufferAttribARB_debug((hPbuffer), (piAttribList), __FILE__, __LINE__)
BOOL glatter_wglSetPbufferAttribARB_debug(HPBUFFERARB hPbuffer, const int *piAttribList, const char* file, int line);
#endif // defined(WGL_ARB_render_texture)
#if defined(WGL_EXT_display_color_table)
#define wglBindDisplayColorTableEXT(id) glatter_wglBindDisplayColorTableEXT_debug((id), __FILE__, __LINE__)
GLboolean glatter_wglBindDisplayColorTableEXT_debug(GLushort id, const char* file, int line);
#define wglCreateDisplayColorTableEXT(id) glatter_wglCreateDisplayColorTableEXT_debug((id), __FILE__, __LINE__)
GLboolean glatter_wglCreateDisplayColorTableEXT_debug(GLushort id, const char* file, int line);
#define wglDestroyDisplayColorTableEXT(id) glatter_wglDestroyDisplayColorTableEXT_debug((id), __FILE__, __LINE__)
VOID glatter_wglDestroyDisplayColorTableEXT_debug(GLushort id, const char* file, int line);
#define wglLoadDisplayColorTableEXT(table, length) glatter_wglLoadDisplayColorTableEXT_debug((table), (length), __FILE__, __LINE__)
GLboolean glatter_wglLoadDisplayColorTableEXT_debug(const GLushort *table, GLuint length, const char* file, int line);
#endif // defined(WGL_EXT_display_color_table)
#if defined(WGL_EXT_extensions_string)
#define wglGetExtensionsStringEXT() glatter_wglGetExtensionsStringEXT_debug(__FILE__, __LINE__)
const char * glatter_wglGetExtensionsStringEXT_debug(const char* file, int line);
#endif // defined(WGL_EXT_extensions_string)
#if defined(WGL_EXT_make_current_read)
#define wglGetCurrentReadDCEXT() glatter_wglGetCurrentReadDCEXT_debug(__FILE__, __LINE__)
HDC glatter_wglGetCurrentReadDCEXT_debug(const char* file, int line);
#define wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentEXT_debug((hDrawDC), (hReadDC), (hglrc), __FILE__, __LINE__)
BOOL glatter_wglMakeContextCurrentEXT_debug(HDC hDrawDC, HDC hReadDC, HGLRC hglrc, const char* file, int line);
#endif // defined(WGL_EXT_make_current_read)
#if defined(WGL_EXT_pbuffer)
#define wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferEXT_debug((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList), __FILE__, __LINE__)
HPBUFFEREXT glatter_wglCreatePbufferEXT_debug(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList, const char* file, int line);
#define wglDestroyPbufferEXT(hPbuffer) glatter_wglDestroyPbufferEXT_debug((hPbuffer), __FILE__, __LINE__)
BOOL glatter_wglDestroyPbufferEXT_debug(HPBUFFEREXT hPbuffer, const char* file, int line);
#define wglGetPbufferDCEXT(hPbuffer) glatter_wglGetPbufferDCEXT_debug((hPbuffer), __FILE__, __LINE__)
HDC glatter_wglGetPbufferDCEXT_debug(HPBUFFEREXT hPbuffer, const char* file, int line);
#define wglQueryPbufferEXT(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferEXT_debug((hPbuffer), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryPbufferEXT_debug(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue, const char* file, int line);
#define wglReleasePbufferDCEXT(hPbuffer, hDC) glatter_wglReleasePbufferDCEXT_debug((hPbuffer), (hDC), __FILE__, __LINE__)
int glatter_wglReleasePbufferDCEXT_debug(HPBUFFEREXT hPbuffer, HDC hDC, const char* file, int line);
#endif // defined(WGL_EXT_pbuffer)
#if defined(WGL_EXT_pixel_format)
#define wglChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatEXT_debug((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats), __FILE__, __LINE__)
BOOL glatter_wglChoosePixelFormatEXT_debug(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats, const char* file, int line);
#define wglGetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvEXT_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribfvEXT_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues, const char* file, int line);
#define wglGetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivEXT_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribivEXT_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues, const char* file, int line);
#endif // defined(WGL_EXT_pixel_format)
#if defined(WGL_EXT_swap_control)
#define wglGetSwapIntervalEXT() glatter_wglGetSwapIntervalEXT_debug(__FILE__, __LINE__)
int glatter_wglGetSwapIntervalEXT_debug(const char* file, int line);
#define wglSwapIntervalEXT(interval) glatter_wglSwapIntervalEXT_debug((interval), __FILE__, __LINE__)
BOOL glatter_wglSwapIntervalEXT_debug(int interval, const char* file, int line);
#endif // defined(WGL_EXT_swap_control)
#if defined(WGL_I3D_digital_video_control)
#define wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglGetDigitalVideoParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglGetDigitalVideoParametersI3D_debug(HDC hDC, int iAttribute, int *piValue, const char* file, int line);
#define wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglSetDigitalVideoParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglSetDigitalVideoParametersI3D_debug(HDC hDC, int iAttribute, const int *piValue, const char* file, int line);
#endif // defined(WGL_I3D_digital_video_control)
#if defined(WGL_I3D_gamma)
#define wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglGetGammaTableI3D_debug((hDC), (iEntries), (puRed), (puGreen), (puBlue), __FILE__, __LINE__)
BOOL glatter_wglGetGammaTableI3D_debug(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue, const char* file, int line);
#define wglGetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglGetGammaTableParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglGetGammaTableParametersI3D_debug(HDC hDC, int iAttribute, int *piValue, const char* file, int line);
#define wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglSetGammaTableI3D_debug((hDC), (iEntries), (puRed), (puGreen), (puBlue), __FILE__, __LINE__)
BOOL glatter_wglSetGammaTableI3D_debug(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue, const char* file, int line);
#define wglSetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglSetGammaTableParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglSetGammaTableParametersI3D_debug(HDC hDC, int iAttribute, const int *piValue, const char* file, int line);
#endif // defined(WGL_I3D_gamma)
#if defined(WGL_I3D_genlock)
#define wglDisableGenlockI3D(hDC) glatter_wglDisableGenlockI3D_debug((hDC), __FILE__, __LINE__)
BOOL glatter_wglDisableGenlockI3D_debug(HDC hDC, const char* file, int line);
#define wglEnableGenlockI3D(hDC) glatter_wglEnableGenlockI3D_debug((hDC), __FILE__, __LINE__)
BOOL glatter_wglEnableGenlockI3D_debug(HDC hDC, const char* file, int line);
#define wglGenlockSampleRateI3D(hDC, uRate) glatter_wglGenlockSampleRateI3D_debug((hDC), (uRate), __FILE__, __LINE__)
BOOL glatter_wglGenlockSampleRateI3D_debug(HDC hDC, UINT uRate, const char* file, int line);
#define wglGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGenlockSourceDelayI3D_debug((hDC), (uDelay), __FILE__, __LINE__)
BOOL glatter_wglGenlockSourceDelayI3D_debug(HDC hDC, UINT uDelay, const char* file, int line);
#define wglGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGenlockSourceEdgeI3D_debug((hDC), (uEdge), __FILE__, __LINE__)
BOOL glatter_wglGenlockSourceEdgeI3D_debug(HDC hDC, UINT uEdge, const char* file, int line);
#define wglGenlockSourceI3D(hDC, uSource) glatter_wglGenlockSourceI3D_debug((hDC), (uSource), __FILE__, __LINE__)
BOOL glatter_wglGenlockSourceI3D_debug(HDC hDC, UINT uSource, const char* file, int line);
#define wglGetGenlockSampleRateI3D(hDC, uRate) glatter_wglGetGenlockSampleRateI3D_debug((hDC), (uRate), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSampleRateI3D_debug(HDC hDC, UINT *uRate, const char* file, int line);
#define wglGetGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGetGenlockSourceDelayI3D_debug((hDC), (uDelay), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSourceDelayI3D_debug(HDC hDC, UINT *uDelay, const char* file, int line);
#define wglGetGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGetGenlockSourceEdgeI3D_debug((hDC), (uEdge), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSourceEdgeI3D_debug(HDC hDC, UINT *uEdge, const char* file, int line);
#define wglGetGenlockSourceI3D(hDC, uSource) glatter_wglGetGenlockSourceI3D_debug((hDC), (uSource), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSourceI3D_debug(HDC hDC, UINT *uSource, const char* file, int line);
#define wglIsEnabledGenlockI3D(hDC, pFlag) glatter_wglIsEnabledGenlockI3D_debug((hDC), (pFlag), __FILE__, __LINE__)
BOOL glatter_wglIsEnabledGenlockI3D_debug(HDC hDC, BOOL *pFlag, const char* file, int line);
#define wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay) glatter_wglQueryGenlockMaxSourceDelayI3D_debug((hDC), (uMaxLineDelay), (uMaxPixelDelay), __FILE__, __LINE__)
BOOL glatter_wglQueryGenlockMaxSourceDelayI3D_debug(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay, const char* file, int line);
#endif // defined(WGL_I3D_genlock)
#if defined(WGL_I3D_image_buffer)
#define wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count) glatter_wglAssociateImageBufferEventsI3D_debug((hDC), (pEvent), (pAddress), (pSize), (count), __FILE__, __LINE__)
BOOL glatter_wglAssociateImageBufferEventsI3D_debug(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count, const char* file, int line);
#define wglCreateImageBufferI3D(hDC, dwSize, uFlags) glatter_wglCreateImageBufferI3D_debug((hDC), (dwSize), (uFlags), __FILE__, __LINE__)
LPVOID glatter_wglCreateImageBufferI3D_debug(HDC hDC, DWORD dwSize, UINT uFlags, const char* file, int line);
#define wglDestroyImageBufferI3D(hDC, pAddress) glatter_wglDestroyImageBufferI3D_debug((hDC), (pAddress), __FILE__, __LINE__)
BOOL glatter_wglDestroyImageBufferI3D_debug(HDC hDC, LPVOID pAddress, const char* file, int line);
#define wglReleaseImageBufferEventsI3D(hDC, pAddress, count) glatter_wglReleaseImageBufferEventsI3D_debug((hDC), (pAddress), (count), __FILE__, __LINE__)
BOOL glatter_wglReleaseImageBufferEventsI3D_debug(HDC hDC, const LPVOID *pAddress, UINT count, const char* file, int line);
#endif // defined(WGL_I3D_image_buffer)
#if defined(WGL_I3D_swap_frame_lock)
#define wglDisableFrameLockI3D() glatter_wglDisableFrameLockI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglDisableFrameLockI3D_debug(const char* file, int line);
#define wglEnableFrameLockI3D() glatter_wglEnableFrameLockI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglEnableFrameLockI3D_debug(const char* file, int line);
#define wglIsEnabledFrameLockI3D(pFlag) glatter_wglIsEnabledFrameLockI3D_debug((pFlag), __FILE__, __LINE__)
BOOL glatter_wglIsEnabledFrameLockI3D_debug(BOOL *pFlag, const char* file, int line);
#define wglQueryFrameLockMasterI3D(pFlag) glatter_wglQueryFrameLockMasterI3D_debug((pFlag), __FILE__, __LINE__)
BOOL glatter_wglQueryFrameLockMasterI3D_debug(BOOL *pFlag, const char* file, int line);
#endif // defined(WGL_I3D_swap_frame_lock)
#if defined(WGL_I3D_swap_frame_usage)
#define wglBeginFrameTrackingI3D() glatter_wglBeginFrameTrackingI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglBeginFrameTrackingI3D_debug(const char* file, int line);
#define wglEndFrameTrackingI3D() glatter_wglEndFrameTrackingI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglEndFrameTrackingI3D_debug(const char* file, int line);
#define wglGetFrameUsageI3D(pUsage) glatter_wglGetFrameUsageI3D_debug((pUsage), __FILE__, __LINE__)
BOOL glatter_wglGetFrameUsageI3D_debug(float *pUsage, const char* file, int line);
#define wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage) glatter_wglQueryFrameTrackingI3D_debug((pFrameCount), (pMissedFrames), (pLastMissedUsage), __FILE__, __LINE__)
BOOL glatter_wglQueryFrameTrackingI3D_debug(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage, const char* file, int line);
#endif // defined(WGL_I3D_swap_frame_usage)
#if defined(WGL_NV_DX_interop)
#define wglDXCloseDeviceNV(hDevice) glatter_wglDXCloseDeviceNV_debug((hDevice), __FILE__, __LINE__)
BOOL glatter_wglDXCloseDeviceNV_debug(HANDLE hDevice, const char* file, int line);
#define wglDXLockObjectsNV(hDevice, count, hObjects) glatter_wglDXLockObjectsNV_debug((hDevice), (count), (hObjects), __FILE__, __LINE__)
BOOL glatter_wglDXLockObjectsNV_debug(HANDLE hDevice, GLint count, HANDLE *hObjects, const char* file, int line);
#define wglDXObjectAccessNV(hObject, access) glatter_wglDXObjectAccessNV_debug((hObject), (access), __FILE__, __LINE__)
BOOL glatter_wglDXObjectAccessNV_debug(HANDLE hObject, GLenum access, const char* file, int line);
#define wglDXOpenDeviceNV(dxDevice) glatter_wglDXOpenDeviceNV_debug((dxDevice), __FILE__, __LINE__)
HANDLE glatter_wglDXOpenDeviceNV_debug(void *dxDevice, const char* file, int line);
#define wglDXRegisterObjectNV(hDevice, dxObject, name, type, access) glatter_wglDXRegisterObjectNV_debug((hDevice), (dxObject), (name), (type), (access), __FILE__, __LINE__)
HANDLE glatter_wglDXRegisterObjectNV_debug(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access, const char* file, int line);
#define wglDXSetResourceShareHandleNV(dxObject, shareHandle) glatter_wglDXSetResourceShareHandleNV_debug((dxObject), (shareHandle), __FILE__, __LINE__)
BOOL glatter_wglDXSetResourceShareHandleNV_debug(void *dxObject, HANDLE shareHandle, const char* file, int line);
#define wglDXUnlockObjectsNV(hDevice, count, hObjects) glatter_wglDXUnlockObjectsNV_debug((hDevice), (count), (hObjects), __FILE__, __LINE__)
BOOL glatter_wglDXUnlockObjectsNV_debug(HANDLE hDevice, GLint count, HANDLE *hObjects, const char* file, int line);
#define wglDXUnregisterObjectNV(hDevice, hObject) glatter_wglDXUnregisterObjectNV_debug((hDevice), (hObject), __FILE__, __LINE__)
BOOL glatter_wglDXUnregisterObjectNV_debug(HANDLE hDevice, HANDLE hObject, const char* file, int line);
#endif // defined(WGL_NV_DX_interop)
#if defined(WGL_NV_copy_image)
#define wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_wglCopyImageSubDataNV_debug((hSrcRC), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (hDstRC), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth), __FILE__, __LINE__)
BOOL glatter_wglCopyImageSubDataNV_debug(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(WGL_NV_copy_image)
#if defined(WGL_NV_delay_before_swap)
#define wglDelayBeforeSwapNV(hDC, seconds) glatter_wglDelayBeforeSwapNV_debug((hDC), (seconds), __FILE__, __LINE__)
BOOL glatter_wglDelayBeforeSwapNV_debug(HDC hDC, GLfloat seconds, const char* file, int line);
#endif // defined(WGL_NV_delay_before_swap)
#if defined(WGL_NV_gpu_affinity)
#define wglCreateAffinityDCNV(phGpuList) glatter_wglCreateAffinityDCNV_debug((phGpuList), __FILE__, __LINE__)
HDC glatter_wglCreateAffinityDCNV_debug(const HGPUNV *phGpuList, const char* file, int line);
#define wglDeleteDCNV(hdc) glatter_wglDeleteDCNV_debug((hdc), __FILE__, __LINE__)
BOOL glatter_wglDeleteDCNV_debug(HDC hdc, const char* file, int line);
#define wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice) glatter_wglEnumGpuDevicesNV_debug((hGpu), (iDeviceIndex), (lpGpuDevice), __FILE__, __LINE__)
BOOL glatter_wglEnumGpuDevicesNV_debug(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice, const char* file, int line);
#define wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu) glatter_wglEnumGpusFromAffinityDCNV_debug((hAffinityDC), (iGpuIndex), (hGpu), __FILE__, __LINE__)
BOOL glatter_wglEnumGpusFromAffinityDCNV_debug(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu, const char* file, int line);
#define wglEnumGpusNV(iGpuIndex, phGpu) glatter_wglEnumGpusNV_debug((iGpuIndex), (phGpu), __FILE__, __LINE__)
BOOL glatter_wglEnumGpusNV_debug(UINT iGpuIndex, HGPUNV *phGpu, const char* file, int line);
#endif // defined(WGL_NV_gpu_affinity)
#if defined(WGL_NV_present_video)
#define wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList) glatter_wglBindVideoDeviceNV_debug((hDC), (uVideoSlot), (hVideoDevice), (piAttribList), __FILE__, __LINE__)
BOOL glatter_wglBindVideoDeviceNV_debug(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList, const char* file, int line);
#define wglEnumerateVideoDevicesNV(hDC, phDeviceList) glatter_wglEnumerateVideoDevicesNV_debug((hDC), (phDeviceList), __FILE__, __LINE__)
int glatter_wglEnumerateVideoDevicesNV_debug(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList, const char* file, int line);
#define wglQueryCurrentContextNV(iAttribute, piValue) glatter_wglQueryCurrentContextNV_debug((iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryCurrentContextNV_debug(int iAttribute, int *piValue, const char* file, int line);
#endif // defined(WGL_NV_present_video)
#if defined(WGL_NV_swap_group)
#define wglBindSwapBarrierNV(group, barrier) glatter_wglBindSwapBarrierNV_debug((group), (barrier), __FILE__, __LINE__)
BOOL glatter_wglBindSwapBarrierNV_debug(GLuint group, GLuint barrier, const char* file, int line);
#define wglJoinSwapGroupNV(hDC, group) glatter_wglJoinSwapGroupNV_debug((hDC), (group), __FILE__, __LINE__)
BOOL glatter_wglJoinSwapGroupNV_debug(HDC hDC, GLuint group, const char* file, int line);
#define wglQueryFrameCountNV(hDC, count) glatter_wglQueryFrameCountNV_debug((hDC), (count), __FILE__, __LINE__)
BOOL glatter_wglQueryFrameCountNV_debug(HDC hDC, GLuint *count, const char* file, int line);
#define wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers) glatter_wglQueryMaxSwapGroupsNV_debug((hDC), (maxGroups), (maxBarriers), __FILE__, __LINE__)
BOOL glatter_wglQueryMaxSwapGroupsNV_debug(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers, const char* file, int line);
#define wglQuerySwapGroupNV(hDC, group, barrier) glatter_wglQuerySwapGroupNV_debug((hDC), (group), (barrier), __FILE__, __LINE__)
BOOL glatter_wglQuerySwapGroupNV_debug(HDC hDC, GLuint *group, GLuint *barrier, const char* file, int line);
#define wglResetFrameCountNV(hDC) glatter_wglResetFrameCountNV_debug((hDC), __FILE__, __LINE__)
BOOL glatter_wglResetFrameCountNV_debug(HDC hDC, const char* file, int line);
#endif // defined(WGL_NV_swap_group)
#if defined(WGL_NV_vertex_array_range)
#define wglAllocateMemoryNV(size, readfreq, writefreq, priority) glatter_wglAllocateMemoryNV_debug((size), (readfreq), (writefreq), (priority), __FILE__, __LINE__)
void * glatter_wglAllocateMemoryNV_debug(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority, const char* file, int line);
#define wglFreeMemoryNV(pointer) glatter_wglFreeMemoryNV_debug((pointer), __FILE__, __LINE__)
void glatter_wglFreeMemoryNV_debug(void *pointer, const char* file, int line);
#endif // defined(WGL_NV_vertex_array_range)
#if defined(WGL_NV_video_capture)
#define wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice) glatter_wglBindVideoCaptureDeviceNV_debug((uVideoSlot), (hDevice), __FILE__, __LINE__)
BOOL glatter_wglBindVideoCaptureDeviceNV_debug(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice, const char* file, int line);
#define wglEnumerateVideoCaptureDevicesNV(hDc, phDeviceList) glatter_wglEnumerateVideoCaptureDevicesNV_debug((hDc), (phDeviceList), __FILE__, __LINE__)
UINT glatter_wglEnumerateVideoCaptureDevicesNV_debug(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList, const char* file, int line);
#define wglLockVideoCaptureDeviceNV(hDc, hDevice) glatter_wglLockVideoCaptureDeviceNV_debug((hDc), (hDevice), __FILE__, __LINE__)
BOOL glatter_wglLockVideoCaptureDeviceNV_debug(HDC hDc, HVIDEOINPUTDEVICENV hDevice, const char* file, int line);
#define wglQueryVideoCaptureDeviceNV(hDc, hDevice, iAttribute, piValue) glatter_wglQueryVideoCaptureDeviceNV_debug((hDc), (hDevice), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryVideoCaptureDeviceNV_debug(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue, const char* file, int line);
#define wglReleaseVideoCaptureDeviceNV(hDc, hDevice) glatter_wglReleaseVideoCaptureDeviceNV_debug((hDc), (hDevice), __FILE__, __LINE__)
BOOL glatter_wglReleaseVideoCaptureDeviceNV_debug(HDC hDc, HVIDEOINPUTDEVICENV hDevice, const char* file, int line);
#endif // defined(WGL_NV_video_capture)
#if defined(WGL_NV_video_output)
#define wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer) glatter_wglBindVideoImageNV_debug((hVideoDevice), (hPbuffer), (iVideoBuffer), __FILE__, __LINE__)
BOOL glatter_wglBindVideoImageNV_debug(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer, const char* file, int line);
#define wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice) glatter_wglGetVideoDeviceNV_debug((hDC), (numDevices), (hVideoDevice), __FILE__, __LINE__)
BOOL glatter_wglGetVideoDeviceNV_debug(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice, const char* file, int line);
#define wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_wglGetVideoInfoNV_debug((hpVideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo), __FILE__, __LINE__)
BOOL glatter_wglGetVideoInfoNV_debug(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo, const char* file, int line);
#define wglReleaseVideoDeviceNV(hVideoDevice) glatter_wglReleaseVideoDeviceNV_debug((hVideoDevice), __FILE__, __LINE__)
BOOL glatter_wglReleaseVideoDeviceNV_debug(HPVIDEODEV hVideoDevice, const char* file, int line);
#define wglReleaseVideoImageNV(hPbuffer, iVideoBuffer) glatter_wglReleaseVideoImageNV_debug((hPbuffer), (iVideoBuffer), __FILE__, __LINE__)
BOOL glatter_wglReleaseVideoImageNV_debug(HPBUFFERARB hPbuffer, int iVideoBuffer, const char* file, int line);
#define wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock) glatter_wglSendPbufferToVideoNV_debug((hPbuffer), (iBufferType), (pulCounterPbuffer), (bBlock), __FILE__, __LINE__)
BOOL glatter_wglSendPbufferToVideoNV_debug(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock, const char* file, int line);
#endif // defined(WGL_NV_video_output)
#if defined(WGL_OML_sync_control)
#define wglGetMscRateOML(hdc, numerator, denominator) glatter_wglGetMscRateOML_debug((hdc), (numerator), (denominator), __FILE__, __LINE__)
BOOL glatter_wglGetMscRateOML_debug(HDC hdc, INT32 *numerator, INT32 *denominator, const char* file, int line);
#define wglGetSyncValuesOML(hdc, ust, msc, sbc) glatter_wglGetSyncValuesOML_debug((hdc), (ust), (msc), (sbc), __FILE__, __LINE__)
BOOL glatter_wglGetSyncValuesOML_debug(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc, const char* file, int line);
#define wglSwapBuffersMscOML(hdc, target_msc, divisor, remainder) glatter_wglSwapBuffersMscOML_debug((hdc), (target_msc), (divisor), (remainder), __FILE__, __LINE__)
INT64 glatter_wglSwapBuffersMscOML_debug(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, const char* file, int line);
#define wglSwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder) glatter_wglSwapLayerBuffersMscOML_debug((hdc), (fuPlanes), (target_msc), (divisor), (remainder), __FILE__, __LINE__)
INT64 glatter_wglSwapLayerBuffersMscOML_debug(HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder, const char* file, int line);
#define wglWaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc) glatter_wglWaitForMscOML_debug((hdc), (target_msc), (divisor), (remainder), (ust), (msc), (sbc), __FILE__, __LINE__)
BOOL glatter_wglWaitForMscOML_debug(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc, const char* file, int line);
#define wglWaitForSbcOML(hdc, target_sbc, ust, msc, sbc) glatter_wglWaitForSbcOML_debug((hdc), (target_sbc), (ust), (msc), (sbc), __FILE__, __LINE__)
BOOL glatter_wglWaitForSbcOML_debug(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc, const char* file, int line);
#endif // defined(__wgl_wglext_h_)
#endif // defined(WGL_OML_sync_control)
#endif // GLATTER_WGL

