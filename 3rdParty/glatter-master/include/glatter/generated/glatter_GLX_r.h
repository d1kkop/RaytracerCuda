/*
Copyright 2017 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GLX
#if defined(GLX_H)
#if defined(GLX_ARB_get_proc_address)
#define glXGetProcAddressARB(a0) glatter_glXGetProcAddressARB((a0))
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddressARB, (const GLubyte *a0))
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_ARB_render_texture)
#define glXBindTexImageARB(dpy, pbuffer, buffer) glatter_glXBindTexImageARB((dpy), (pbuffer), (buffer))
GLATTER_UBLOCK(Bool, , glXBindTexImageARB, (Display *dpy, GLXPbuffer pbuffer, int buffer))
#define glXDrawableAttribARB(dpy, draw, attribList) glatter_glXDrawableAttribARB((dpy), (draw), (attribList))
GLATTER_UBLOCK(Bool, , glXDrawableAttribARB, (Display *dpy, GLXDrawable draw, const int *attribList))
#define glXReleaseTexImageARB(dpy, pbuffer, buffer) glatter_glXReleaseTexImageARB((dpy), (pbuffer), (buffer))
GLATTER_UBLOCK(Bool, , glXReleaseTexImageARB, (Display *dpy, GLXPbuffer pbuffer, int buffer))
#endif // defined(GLX_ARB_render_texture)
#if defined(GLX_MESA_swap_control)
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA()
GLATTER_UBLOCK(int, , glXGetSwapIntervalMESA, (void))
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA((interval))
GLATTER_UBLOCK(int, , glXSwapIntervalMESA, (unsigned int interval))
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_MESA_swap_frame_usage)
#define glXBeginFrameTrackingMESA(dpy, drawable) glatter_glXBeginFrameTrackingMESA((dpy), (drawable))
GLATTER_UBLOCK(int, , glXBeginFrameTrackingMESA, (Display *dpy, GLXDrawable drawable))
#define glXEndFrameTrackingMESA(dpy, drawable) glatter_glXEndFrameTrackingMESA((dpy), (drawable))
GLATTER_UBLOCK(int, , glXEndFrameTrackingMESA, (Display *dpy, GLXDrawable drawable))
#define glXGetFrameUsageMESA(dpy, drawable, usage) glatter_glXGetFrameUsageMESA((dpy), (drawable), (usage))
GLATTER_UBLOCK(int, , glXGetFrameUsageMESA, (Display *dpy, GLXDrawable drawable, float *usage))
#define glXQueryFrameTrackingMESA(dpy, drawable, swapCount, missedFrames, lastMissedUsage) glatter_glXQueryFrameTrackingMESA((dpy), (drawable), (swapCount), (missedFrames), (lastMissedUsage))
GLATTER_UBLOCK(int, , glXQueryFrameTrackingMESA, (Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage))
#endif // defined(GLX_MESA_swap_frame_usage)
#if defined(GLX_NV_vertex_array_range)
#define glXFreeMemoryNV(pointer) glatter_glXFreeMemoryNV((pointer))
GLATTER_UBLOCK(void, , glXFreeMemoryNV, (GLvoid *pointer))
#endif // defined(GLX_NV_vertex_array_range)
#define glXChooseVisual(dpy, screen, attribList) glatter_glXChooseVisual((dpy), (screen), (attribList))
GLATTER_UBLOCK(XVisualInfo*, , glXChooseVisual, (Display *dpy, int screen, int *attribList))
#define glXCopyContext(dpy, src, dst, mask) glatter_glXCopyContext((dpy), (src), (dst), (mask))
GLATTER_UBLOCK(void, , glXCopyContext, (Display *dpy, GLXContext src, GLXContext dst, unsigned long mask))
#define glXCreateContext(dpy, vis, shareList, direct) glatter_glXCreateContext((dpy), (vis), (shareList), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateContext, (Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct))
#define glXCreateGLXPixmap(dpy, visual, pixmap) glatter_glXCreateGLXPixmap((dpy), (visual), (pixmap))
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmap, (Display *dpy, XVisualInfo *visual, Pixmap pixmap))
#define glXCreateNewContext(dpy, config, renderType, shareList, direct) glatter_glXCreateNewContext((dpy), (config), (renderType), (shareList), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateNewContext, (Display *dpy, GLXFBConfig config, int renderType, GLXContext shareList, Bool direct))
#define glXCreatePbuffer(dpy, config, attribList) glatter_glXCreatePbuffer((dpy), (config), (attribList))
GLATTER_UBLOCK(GLXPbuffer, , glXCreatePbuffer, (Display *dpy, GLXFBConfig config, const int *attribList))
#define glXCreatePixmap(dpy, config, pixmap, attribList) glatter_glXCreatePixmap((dpy), (config), (pixmap), (attribList))
GLATTER_UBLOCK(GLXPixmap, , glXCreatePixmap, (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attribList))
#define glXCreateWindow(dpy, config, win, attribList) glatter_glXCreateWindow((dpy), (config), (win), (attribList))
GLATTER_UBLOCK(GLXWindow, , glXCreateWindow, (Display *dpy, GLXFBConfig config, Window win, const int *attribList))
#define glXDestroyContext(dpy, ctx) glatter_glXDestroyContext((dpy), (ctx))
GLATTER_UBLOCK(void, , glXDestroyContext, (Display *dpy, GLXContext ctx))
#define glXDestroyGLXPixmap(dpy, pixmap) glatter_glXDestroyGLXPixmap((dpy), (pixmap))
GLATTER_UBLOCK(void, , glXDestroyGLXPixmap, (Display *dpy, GLXPixmap pixmap))
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer((dpy), (pbuf))
GLATTER_UBLOCK(void, , glXDestroyPbuffer, (Display *dpy, GLXPbuffer pbuf))
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap((dpy), (pixmap))
GLATTER_UBLOCK(void, , glXDestroyPixmap, (Display *dpy, GLXPixmap pixmap))
#define glXDestroyWindow(dpy, window) glatter_glXDestroyWindow((dpy), (window))
GLATTER_UBLOCK(void, , glXDestroyWindow, (Display *dpy, GLXWindow window))
#define glXGetConfig(dpy, visual, attrib, value) glatter_glXGetConfig((dpy), (visual), (attrib), (value))
GLATTER_UBLOCK(int, , glXGetConfig, (Display *dpy, XVisualInfo *visual, int attrib, int *value))
#define glXGetCurrentContext() glatter_glXGetCurrentContext()
GLATTER_UBLOCK(GLXContext, , glXGetCurrentContext, (void))
#define glXGetCurrentDrawable() glatter_glXGetCurrentDrawable()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentDrawable, (void))
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawable, (void))
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib((dpy), (config), (attribute), (value))
GLATTER_UBLOCK(int, , glXGetFBConfigAttrib, (Display *dpy, GLXFBConfig config, int attribute, int *value))
#define glXGetSelectedEvent(dpy, drawable, mask) glatter_glXGetSelectedEvent((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXGetSelectedEvent, (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#define glXIsDirect(dpy, ctx) glatter_glXIsDirect((dpy), (ctx))
GLATTER_UBLOCK(Bool, , glXIsDirect, (Display *dpy, GLXContext ctx))
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent((dpy), (draw), (read), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeContextCurrent, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#define glXMakeCurrent(dpy, drawable, ctx) glatter_glXMakeCurrent((dpy), (drawable), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeCurrent, (Display *dpy, GLXDrawable drawable, GLXContext ctx))
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext((dpy), (ctx), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryContext, (Display *dpy, GLXContext ctx, int attribute, int *value))
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable((dpy), (draw), (attribute), (value))
GLATTER_UBLOCK(void, , glXQueryDrawable, (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#define glXQueryExtension(dpy, errorb, event) glatter_glXQueryExtension((dpy), (errorb), (event))
GLATTER_UBLOCK(Bool, , glXQueryExtension, (Display *dpy, int *errorb, int *event))
#define glXQueryVersion(dpy, maj, min) glatter_glXQueryVersion((dpy), (maj), (min))
GLATTER_UBLOCK(Bool, , glXQueryVersion, (Display *dpy, int *maj, int *min))
#define glXSelectEvent(dpy, drawable, mask) glatter_glXSelectEvent((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXSelectEvent, (Display *dpy, GLXDrawable drawable, unsigned long mask))
#define glXSwapBuffers(dpy, drawable) glatter_glXSwapBuffers((dpy), (drawable))
GLATTER_UBLOCK(void, , glXSwapBuffers, (Display *dpy, GLXDrawable drawable))
#define glXUseXFont(font, first, count, list) glatter_glXUseXFont((font), (first), (count), (list))
GLATTER_UBLOCK(void, , glXUseXFont, (Font font, int first, int count, int list))
#define glXWaitGL() glatter_glXWaitGL()
GLATTER_UBLOCK(void, , glXWaitGL, (void))
#define glXWaitX() glatter_glXWaitX()
GLATTER_UBLOCK(void, , glXWaitX, (void))
#endif // defined(GLX_H)
#if defined(__glx_glxext_h_)
#if defined(GLX_AMD_gpu_association)
#define glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glXBlitContextFramebufferAMD((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, , glXBlitContextFramebufferAMD, (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glXCreateAssociatedContextAMD(id, share_list) glatter_glXCreateAssociatedContextAMD((id), (share_list))
GLATTER_UBLOCK(GLXContext, , glXCreateAssociatedContextAMD, (unsigned int id, GLXContext share_list))
#define glXCreateAssociatedContextAttribsAMD(id, share_context, attribList) glatter_glXCreateAssociatedContextAttribsAMD((id), (share_context), (attribList))
GLATTER_UBLOCK(GLXContext, , glXCreateAssociatedContextAttribsAMD, (unsigned int id, GLXContext share_context, const int *attribList))
#define glXDeleteAssociatedContextAMD(ctx) glatter_glXDeleteAssociatedContextAMD((ctx))
GLATTER_UBLOCK(Bool, , glXDeleteAssociatedContextAMD, (GLXContext ctx))
#define glXGetContextGPUIDAMD(ctx) glatter_glXGetContextGPUIDAMD((ctx))
GLATTER_UBLOCK(unsigned int, , glXGetContextGPUIDAMD, (GLXContext ctx))
#define glXGetCurrentAssociatedContextAMD() glatter_glXGetCurrentAssociatedContextAMD()
GLATTER_UBLOCK(GLXContext, , glXGetCurrentAssociatedContextAMD, (void))
#define glXGetGPUIDsAMD(maxCount, ids) glatter_glXGetGPUIDsAMD((maxCount), (ids))
GLATTER_UBLOCK(unsigned int, , glXGetGPUIDsAMD, (unsigned int maxCount, unsigned int *ids))
#define glXGetGPUInfoAMD(id, property, dataType, size, data) glatter_glXGetGPUInfoAMD((id), (property), (dataType), (size), (data))
GLATTER_UBLOCK(int, , glXGetGPUInfoAMD, (unsigned int id, int property, GLenum dataType, unsigned int size, void *data))
#define glXMakeAssociatedContextCurrentAMD(ctx) glatter_glXMakeAssociatedContextCurrentAMD((ctx))
GLATTER_UBLOCK(Bool, , glXMakeAssociatedContextCurrentAMD, (GLXContext ctx))
#endif // defined(GLX_AMD_gpu_association)
#if defined(GLX_ARB_create_context)
#define glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list) glatter_glXCreateContextAttribsARB((dpy), (config), (share_context), (direct), (attrib_list))
GLATTER_UBLOCK(GLXContext, , glXCreateContextAttribsARB, (Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list))
#endif // defined(GLX_ARB_create_context)
#if defined(GLX_ARB_get_proc_address)
#define glXGetProcAddressARB(procName) glatter_glXGetProcAddressARB((procName))
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddressARB, (const GLubyte *procName))
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_EXT_import_context)
#define glXFreeContextEXT(dpy, context) glatter_glXFreeContextEXT((dpy), (context))
GLATTER_UBLOCK(void, , glXFreeContextEXT, (Display *dpy, GLXContext context))
#define glXGetContextIDEXT(context) glatter_glXGetContextIDEXT((context))
GLATTER_UBLOCK(GLXContextID, , glXGetContextIDEXT, (const GLXContext context))
#define glXImportContextEXT(dpy, contextID) glatter_glXImportContextEXT((dpy), (contextID))
GLATTER_UBLOCK(GLXContext, , glXImportContextEXT, (Display *dpy, GLXContextID contextID))
#define glXQueryContextInfoEXT(dpy, context, attribute, value) glatter_glXQueryContextInfoEXT((dpy), (context), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryContextInfoEXT, (Display *dpy, GLXContext context, int attribute, int *value))
#endif // defined(GLX_EXT_import_context)
#if defined(GLX_EXT_swap_control)
#define glXSwapIntervalEXT(dpy, drawable, interval) glatter_glXSwapIntervalEXT((dpy), (drawable), (interval))
GLATTER_UBLOCK(void, , glXSwapIntervalEXT, (Display *dpy, GLXDrawable drawable, int interval))
#endif // defined(GLX_EXT_swap_control)
#if defined(GLX_EXT_texture_from_pixmap)
#define glXBindTexImageEXT(dpy, drawable, buffer, attrib_list) glatter_glXBindTexImageEXT((dpy), (drawable), (buffer), (attrib_list))
GLATTER_UBLOCK(void, , glXBindTexImageEXT, (Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list))
#define glXReleaseTexImageEXT(dpy, drawable, buffer) glatter_glXReleaseTexImageEXT((dpy), (drawable), (buffer))
GLATTER_UBLOCK(void, , glXReleaseTexImageEXT, (Display *dpy, GLXDrawable drawable, int buffer))
#endif // defined(GLX_EXT_texture_from_pixmap)
#if defined(GLX_MESA_agp_offset)
#define glXGetAGPOffsetMESA(pointer) glatter_glXGetAGPOffsetMESA((pointer))
GLATTER_UBLOCK(unsigned int, , glXGetAGPOffsetMESA, (const void *pointer))
#endif // defined(GLX_MESA_agp_offset)
#if defined(GLX_MESA_copy_sub_buffer)
#define glXCopySubBufferMESA(dpy, drawable, x, y, width, height) glatter_glXCopySubBufferMESA((dpy), (drawable), (x), (y), (width), (height))
GLATTER_UBLOCK(void, , glXCopySubBufferMESA, (Display *dpy, GLXDrawable drawable, int x, int y, int width, int height))
#endif // defined(GLX_MESA_copy_sub_buffer)
#if defined(GLX_MESA_pixmap_colormap)
#define glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap) glatter_glXCreateGLXPixmapMESA((dpy), (visual), (pixmap), (cmap))
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmapMESA, (Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap))
#endif // defined(GLX_MESA_pixmap_colormap)
#if defined(GLX_MESA_query_renderer)
#define glXQueryCurrentRendererIntegerMESA(attribute, value) glatter_glXQueryCurrentRendererIntegerMESA((attribute), (value))
GLATTER_UBLOCK(Bool, , glXQueryCurrentRendererIntegerMESA, (int attribute, unsigned int *value))
#define glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value) glatter_glXQueryRendererIntegerMESA((dpy), (screen), (renderer), (attribute), (value))
GLATTER_UBLOCK(Bool, , glXQueryRendererIntegerMESA, (Display *dpy, int screen, int renderer, int attribute, unsigned int *value))
#endif // defined(GLX_MESA_query_renderer)
#if defined(GLX_MESA_release_buffers)
#define glXReleaseBuffersMESA(dpy, drawable) glatter_glXReleaseBuffersMESA((dpy), (drawable))
GLATTER_UBLOCK(Bool, , glXReleaseBuffersMESA, (Display *dpy, GLXDrawable drawable))
#endif // defined(GLX_MESA_release_buffers)
#if defined(GLX_MESA_set_3dfx_mode)
#define glXSet3DfxModeMESA(mode) glatter_glXSet3DfxModeMESA((mode))
GLATTER_UBLOCK(Bool, , glXSet3DfxModeMESA, (int mode))
#endif // defined(GLX_MESA_set_3dfx_mode)
#if defined(GLX_MESA_swap_control)
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA()
GLATTER_UBLOCK(int, , glXGetSwapIntervalMESA, (void))
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA((interval))
GLATTER_UBLOCK(int, , glXSwapIntervalMESA, (unsigned int interval))
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_NV_copy_buffer)
#define glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size) glatter_glXCopyBufferSubDataNV((dpy), (readCtx), (writeCtx), (readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, , glXCopyBufferSubDataNV, (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glXNamedCopyBufferSubDataNV((dpy), (readCtx), (writeCtx), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, , glXNamedCopyBufferSubDataNV, (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#endif // defined(GLX_NV_copy_buffer)
#if defined(GLX_NV_copy_image)
#define glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glXCopyImageSubDataNV((dpy), (srcCtx), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstCtx), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
GLATTER_UBLOCK(void, , glXCopyImageSubDataNV, (Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GLX_NV_copy_image)
#if defined(GLX_NV_delay_before_swap)
#define glXDelayBeforeSwapNV(dpy, drawable, seconds) glatter_glXDelayBeforeSwapNV((dpy), (drawable), (seconds))
GLATTER_UBLOCK(Bool, , glXDelayBeforeSwapNV, (Display *dpy, GLXDrawable drawable, GLfloat seconds))
#endif // defined(GLX_NV_delay_before_swap)
#if defined(GLX_NV_present_video)
#define glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list) glatter_glXBindVideoDeviceNV((dpy), (video_slot), (video_device), (attrib_list))
GLATTER_UBLOCK(int, , glXBindVideoDeviceNV, (Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list))
#endif // defined(GLX_NV_present_video)
#if defined(GLX_NV_swap_group)
#define glXBindSwapBarrierNV(dpy, group, barrier) glatter_glXBindSwapBarrierNV((dpy), (group), (barrier))
GLATTER_UBLOCK(Bool, , glXBindSwapBarrierNV, (Display *dpy, GLuint group, GLuint barrier))
#define glXJoinSwapGroupNV(dpy, drawable, group) glatter_glXJoinSwapGroupNV((dpy), (drawable), (group))
GLATTER_UBLOCK(Bool, , glXJoinSwapGroupNV, (Display *dpy, GLXDrawable drawable, GLuint group))
#define glXQueryFrameCountNV(dpy, screen, count) glatter_glXQueryFrameCountNV((dpy), (screen), (count))
GLATTER_UBLOCK(Bool, , glXQueryFrameCountNV, (Display *dpy, int screen, GLuint *count))
#define glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers) glatter_glXQueryMaxSwapGroupsNV((dpy), (screen), (maxGroups), (maxBarriers))
GLATTER_UBLOCK(Bool, , glXQueryMaxSwapGroupsNV, (Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers))
#define glXQuerySwapGroupNV(dpy, drawable, group, barrier) glatter_glXQuerySwapGroupNV((dpy), (drawable), (group), (barrier))
GLATTER_UBLOCK(Bool, , glXQuerySwapGroupNV, (Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier))
#define glXResetFrameCountNV(dpy, screen) glatter_glXResetFrameCountNV((dpy), (screen))
GLATTER_UBLOCK(Bool, , glXResetFrameCountNV, (Display *dpy, int screen))
#endif // defined(GLX_NV_swap_group)
#if defined(GLX_NV_video_capture)
#define glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device) glatter_glXBindVideoCaptureDeviceNV((dpy), (video_capture_slot), (device))
GLATTER_UBLOCK(int, , glXBindVideoCaptureDeviceNV, (Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device))
#define glXLockVideoCaptureDeviceNV(dpy, device) glatter_glXLockVideoCaptureDeviceNV((dpy), (device))
GLATTER_UBLOCK(void, , glXLockVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device))
#define glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value) glatter_glXQueryVideoCaptureDeviceNV((dpy), (device), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value))
#define glXReleaseVideoCaptureDeviceNV(dpy, device) glatter_glXReleaseVideoCaptureDeviceNV((dpy), (device))
GLATTER_UBLOCK(void, , glXReleaseVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device))
#endif // defined(GLX_NV_video_capture)
#if defined(GLX_NV_video_out)
#define glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer) glatter_glXBindVideoImageNV((dpy), (VideoDevice), (pbuf), (iVideoBuffer))
GLATTER_UBLOCK(int, , glXBindVideoImageNV, (Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer))
#define glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice) glatter_glXGetVideoDeviceNV((dpy), (screen), (numVideoDevices), (pVideoDevice))
GLATTER_UBLOCK(int, , glXGetVideoDeviceNV, (Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice))
#define glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_glXGetVideoInfoNV((dpy), (screen), (VideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo))
GLATTER_UBLOCK(int, , glXGetVideoInfoNV, (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo))
#define glXReleaseVideoDeviceNV(dpy, screen, VideoDevice) glatter_glXReleaseVideoDeviceNV((dpy), (screen), (VideoDevice))
GLATTER_UBLOCK(int, , glXReleaseVideoDeviceNV, (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice))
#define glXReleaseVideoImageNV(dpy, pbuf) glatter_glXReleaseVideoImageNV((dpy), (pbuf))
GLATTER_UBLOCK(int, , glXReleaseVideoImageNV, (Display *dpy, GLXPbuffer pbuf))
#define glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) glatter_glXSendPbufferToVideoNV((dpy), (pbuf), (iBufferType), (pulCounterPbuffer), (bBlock))
GLATTER_UBLOCK(int, , glXSendPbufferToVideoNV, (Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock))
#endif // defined(GLX_NV_video_out)
#if defined(GLX_OML_sync_control)
#define glXGetMscRateOML(dpy, drawable, numerator, denominator) glatter_glXGetMscRateOML((dpy), (drawable), (numerator), (denominator))
GLATTER_UBLOCK(Bool, , glXGetMscRateOML, (Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator))
#define glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc) glatter_glXGetSyncValuesOML((dpy), (drawable), (ust), (msc), (sbc))
GLATTER_UBLOCK(Bool, , glXGetSyncValuesOML, (Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc))
#define glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder) glatter_glXSwapBuffersMscOML((dpy), (drawable), (target_msc), (divisor), (remainder))
GLATTER_UBLOCK(int64_t, , glXSwapBuffersMscOML, (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder))
#define glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc) glatter_glXWaitForMscOML((dpy), (drawable), (target_msc), (divisor), (remainder), (ust), (msc), (sbc))
GLATTER_UBLOCK(Bool, , glXWaitForMscOML, (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc))
#define glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc) glatter_glXWaitForSbcOML((dpy), (drawable), (target_sbc), (ust), (msc), (sbc))
GLATTER_UBLOCK(Bool, , glXWaitForSbcOML, (Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc))
#endif // defined(GLX_OML_sync_control)
#if defined(GLX_SGIX_dmbuffer)
#if defined(_DM_BUFFER_H_)
#define glXAssociateDMPbufferSGIX(dpy, pbuffer, params, dmbuffer) glatter_glXAssociateDMPbufferSGIX((dpy), (pbuffer), (params), (dmbuffer))
GLATTER_UBLOCK(Bool, , glXAssociateDMPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer))
#endif // defined(_DM_BUFFER_H_)
#endif // defined(GLX_SGIX_dmbuffer)
#if defined(GLX_SGIX_fbconfig)
#define glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct) glatter_glXCreateContextWithConfigSGIX((dpy), (config), (render_type), (share_list), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateContextWithConfigSGIX, (Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct))
#define glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap) glatter_glXCreateGLXPixmapWithConfigSGIX((dpy), (config), (pixmap))
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmapWithConfigSGIX, (Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap))
#define glXGetFBConfigAttribSGIX(dpy, config, attribute, value) glatter_glXGetFBConfigAttribSGIX((dpy), (config), (attribute), (value))
GLATTER_UBLOCK(int, , glXGetFBConfigAttribSGIX, (Display *dpy, GLXFBConfigSGIX config, int attribute, int *value))
#define glXGetFBConfigFromVisualSGIX(dpy, vis) glatter_glXGetFBConfigFromVisualSGIX((dpy), (vis))
GLATTER_UBLOCK(GLXFBConfigSGIX, , glXGetFBConfigFromVisualSGIX, (Display *dpy, XVisualInfo *vis))
#endif // defined(GLX_SGIX_fbconfig)
#if defined(GLX_SGIX_hyperpipe)
#define glXBindHyperpipeSGIX(dpy, hpId) glatter_glXBindHyperpipeSGIX((dpy), (hpId))
GLATTER_UBLOCK(int, , glXBindHyperpipeSGIX, (Display *dpy, int hpId))
#define glXDestroyHyperpipeConfigSGIX(dpy, hpId) glatter_glXDestroyHyperpipeConfigSGIX((dpy), (hpId))
GLATTER_UBLOCK(int, , glXDestroyHyperpipeConfigSGIX, (Display *dpy, int hpId))
#define glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList) glatter_glXHyperpipeAttribSGIX((dpy), (timeSlice), (attrib), (size), (attribList))
GLATTER_UBLOCK(int, , glXHyperpipeAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *attribList))
#define glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId) glatter_glXHyperpipeConfigSGIX((dpy), (networkId), (npipes), (cfg), (hpId))
GLATTER_UBLOCK(int, , glXHyperpipeConfigSGIX, (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId))
#define glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList) glatter_glXQueryHyperpipeAttribSGIX((dpy), (timeSlice), (attrib), (size), (returnAttribList))
GLATTER_UBLOCK(int, , glXQueryHyperpipeAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList))
#define glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList) glatter_glXQueryHyperpipeBestAttribSGIX((dpy), (timeSlice), (attrib), (size), (attribList), (returnAttribList))
GLATTER_UBLOCK(int, , glXQueryHyperpipeBestAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList))
#endif // defined(GLX_SGIX_hyperpipe)
#if defined(GLX_SGIX_pbuffer)
#define glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list) glatter_glXCreateGLXPbufferSGIX((dpy), (config), (width), (height), (attrib_list))
GLATTER_UBLOCK(GLXPbufferSGIX, , glXCreateGLXPbufferSGIX, (Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list))
#define glXDestroyGLXPbufferSGIX(dpy, pbuf) glatter_glXDestroyGLXPbufferSGIX((dpy), (pbuf))
GLATTER_UBLOCK(void, , glXDestroyGLXPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuf))
#define glXGetSelectedEventSGIX(dpy, drawable, mask) glatter_glXGetSelectedEventSGIX((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXGetSelectedEventSGIX, (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#define glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value) glatter_glXQueryGLXPbufferSGIX((dpy), (pbuf), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryGLXPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value))
#define glXSelectEventSGIX(dpy, drawable, mask) glatter_glXSelectEventSGIX((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXSelectEventSGIX, (Display *dpy, GLXDrawable drawable, unsigned long mask))
#endif // defined(GLX_SGIX_pbuffer)
#if defined(GLX_SGIX_swap_barrier)
#define glXBindSwapBarrierSGIX(dpy, drawable, barrier) glatter_glXBindSwapBarrierSGIX((dpy), (drawable), (barrier))
GLATTER_UBLOCK(void, , glXBindSwapBarrierSGIX, (Display *dpy, GLXDrawable drawable, int barrier))
#define glXQueryMaxSwapBarriersSGIX(dpy, screen, max) glatter_glXQueryMaxSwapBarriersSGIX((dpy), (screen), (max))
GLATTER_UBLOCK(Bool, , glXQueryMaxSwapBarriersSGIX, (Display *dpy, int screen, int *max))
#endif // defined(GLX_SGIX_swap_barrier)
#if defined(GLX_SGIX_swap_group)
#define glXJoinSwapGroupSGIX(dpy, drawable, member) glatter_glXJoinSwapGroupSGIX((dpy), (drawable), (member))
GLATTER_UBLOCK(void, , glXJoinSwapGroupSGIX, (Display *dpy, GLXDrawable drawable, GLXDrawable member))
#endif // defined(GLX_SGIX_swap_group)
#if defined(GLX_SGIX_video_resize)
#define glXBindChannelToWindowSGIX(display, screen, channel, window) glatter_glXBindChannelToWindowSGIX((display), (screen), (channel), (window))
GLATTER_UBLOCK(int, , glXBindChannelToWindowSGIX, (Display *display, int screen, int channel, Window window))
#define glXChannelRectSGIX(display, screen, channel, x, y, w, h) glatter_glXChannelRectSGIX((display), (screen), (channel), (x), (y), (w), (h))
GLATTER_UBLOCK(int, , glXChannelRectSGIX, (Display *display, int screen, int channel, int x, int y, int w, int h))
#define glXChannelRectSyncSGIX(display, screen, channel, synctype) glatter_glXChannelRectSyncSGIX((display), (screen), (channel), (synctype))
GLATTER_UBLOCK(int, , glXChannelRectSyncSGIX, (Display *display, int screen, int channel, GLenum synctype))
#define glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h) glatter_glXQueryChannelDeltasSGIX((display), (screen), (channel), (x), (y), (w), (h))
GLATTER_UBLOCK(int, , glXQueryChannelDeltasSGIX, (Display *display, int screen, int channel, int *x, int *y, int *w, int *h))
#define glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh) glatter_glXQueryChannelRectSGIX((display), (screen), (channel), (dx), (dy), (dw), (dh))
GLATTER_UBLOCK(int, , glXQueryChannelRectSGIX, (Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh))
#endif // defined(GLX_SGIX_video_resize)
#if defined(GLX_SGIX_video_source)
#if defined(_VL_H)
#define glXCreateGLXVideoSourceSGIX(display, screen, server, path, nodeClass, drainNode) glatter_glXCreateGLXVideoSourceSGIX((display), (screen), (server), (path), (nodeClass), (drainNode))
GLATTER_UBLOCK(GLXVideoSourceSGIX, , glXCreateGLXVideoSourceSGIX, (Display *display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode))
#define glXDestroyGLXVideoSourceSGIX(dpy, glxvideosource) glatter_glXDestroyGLXVideoSourceSGIX((dpy), (glxvideosource))
GLATTER_UBLOCK(void, , glXDestroyGLXVideoSourceSGIX, (Display *dpy, GLXVideoSourceSGIX glxvideosource))
#endif // defined(_VL_H)
#endif // defined(GLX_SGIX_video_source)
#if defined(GLX_SGI_cushion)
#define glXCushionSGI(dpy, window, cushion) glatter_glXCushionSGI((dpy), (window), (cushion))
GLATTER_UBLOCK(void, , glXCushionSGI, (Display *dpy, Window window, float cushion))
#endif // defined(GLX_SGI_cushion)
#if defined(GLX_SGI_make_current_read)
#define glXGetCurrentReadDrawableSGI() glatter_glXGetCurrentReadDrawableSGI()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawableSGI, (void))
#define glXMakeCurrentReadSGI(dpy, draw, read, ctx) glatter_glXMakeCurrentReadSGI((dpy), (draw), (read), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeCurrentReadSGI, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#endif // defined(GLX_SGI_make_current_read)
#if defined(GLX_SGI_swap_control)
#define glXSwapIntervalSGI(interval) glatter_glXSwapIntervalSGI((interval))
GLATTER_UBLOCK(int, , glXSwapIntervalSGI, (int interval))
#endif // defined(GLX_SGI_swap_control)
#if defined(GLX_SGI_video_sync)
#define glXGetVideoSyncSGI(count) glatter_glXGetVideoSyncSGI((count))
GLATTER_UBLOCK(int, , glXGetVideoSyncSGI, (unsigned int *count))
#define glXWaitVideoSyncSGI(divisor, remainder, count) glatter_glXWaitVideoSyncSGI((divisor), (remainder), (count))
GLATTER_UBLOCK(int, , glXWaitVideoSyncSGI, (int divisor, int remainder, unsigned int *count))
#endif // defined(GLX_SGI_video_sync)
#if defined(GLX_SUN_get_transparent_index)
#define glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex) glatter_glXGetTransparentIndexSUN((dpy), (overlay), (underlay), (pTransparentIndex))
GLATTER_UBLOCK(Status, , glXGetTransparentIndexSUN, (Display *dpy, Window overlay, Window underlay, long *pTransparentIndex))
#endif // defined(GLX_SUN_get_transparent_index)
#if defined(GLX_VERSION_1_3)
#define glXCreateNewContext(dpy, config, render_type, share_list, direct) glatter_glXCreateNewContext((dpy), (config), (render_type), (share_list), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateNewContext, (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct))
#define glXCreatePbuffer(dpy, config, attrib_list) glatter_glXCreatePbuffer((dpy), (config), (attrib_list))
GLATTER_UBLOCK(GLXPbuffer, , glXCreatePbuffer, (Display *dpy, GLXFBConfig config, const int *attrib_list))
#define glXCreatePixmap(dpy, config, pixmap, attrib_list) glatter_glXCreatePixmap((dpy), (config), (pixmap), (attrib_list))
GLATTER_UBLOCK(GLXPixmap, , glXCreatePixmap, (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list))
#define glXCreateWindow(dpy, config, win, attrib_list) glatter_glXCreateWindow((dpy), (config), (win), (attrib_list))
GLATTER_UBLOCK(GLXWindow, , glXCreateWindow, (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list))
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer((dpy), (pbuf))
GLATTER_UBLOCK(void, , glXDestroyPbuffer, (Display *dpy, GLXPbuffer pbuf))
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap((dpy), (pixmap))
GLATTER_UBLOCK(void, , glXDestroyPixmap, (Display *dpy, GLXPixmap pixmap))
#define glXDestroyWindow(dpy, win) glatter_glXDestroyWindow((dpy), (win))
GLATTER_UBLOCK(void, , glXDestroyWindow, (Display *dpy, GLXWindow win))
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawable, (void))
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib((dpy), (config), (attribute), (value))
GLATTER_UBLOCK(int, , glXGetFBConfigAttrib, (Display *dpy, GLXFBConfig config, int attribute, int *value))
#define glXGetSelectedEvent(dpy, draw, event_mask) glatter_glXGetSelectedEvent((dpy), (draw), (event_mask))
GLATTER_UBLOCK(void, , glXGetSelectedEvent, (Display *dpy, GLXDrawable draw, unsigned long *event_mask))
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent((dpy), (draw), (read), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeContextCurrent, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext((dpy), (ctx), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryContext, (Display *dpy, GLXContext ctx, int attribute, int *value))
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable((dpy), (draw), (attribute), (value))
GLATTER_UBLOCK(void, , glXQueryDrawable, (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#define glXSelectEvent(dpy, draw, event_mask) glatter_glXSelectEvent((dpy), (draw), (event_mask))
GLATTER_UBLOCK(void, , glXSelectEvent, (Display *dpy, GLXDrawable draw, unsigned long event_mask))
#endif // defined(GLX_VERSION_1_3)
#if defined(GLX_VERSION_1_4)
#define glXGetProcAddress(procName) glatter_glXGetProcAddress((procName))
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddress, (const GLubyte *procName))
#endif // defined(__glx_glxext_h_)
#endif // defined(GLX_VERSION_1_4)
#endif // GLATTER_GLX

