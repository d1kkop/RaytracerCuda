/*
Copyright 2017 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_GL
#if !defined(GL_VERSION_ES_CM_1_0)
#if !defined(__GL_H__)
#if defined(__gl_h_)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glActiveTextureARB, (GLenum texture))
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glClientActiveTextureARB, (GLenum texture))
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1dARB, (GLenum target, GLdouble s))
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1fARB, (GLenum target, GLfloat s))
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1iARB, (GLenum target, GLint s))
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1sARB, (GLenum target, GLshort s))
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2dARB, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2fARB, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2iARB, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2sARB, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3iARB, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3sARB, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4iARB, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4sARB, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4svARB, (GLenum target, const GLshort *v))
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ATI_blend_equation_separate)
#define glBlendEquationSeparateATI(modeRGB, modeA) glatter_glBlendEquationSeparateATI((modeRGB), (modeA))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendEquationSeparateATI, (GLenum modeRGB, GLenum modeA))
#endif // defined(GL_ATI_blend_equation_separate)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES((target), (image))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetRenderbufferStorageOES, (GLenum target, GLeglImageOES image))
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES((target), (image))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTexture2DOES, (GLenum target, GLeglImageOES image))
#endif // defined(GL_OES_EGL_image)
#define glAccum(op, value) glatter_glAccum((op), (value))
GLATTER_UBLOCK(void, GLAPIENTRY, glAccum, (GLenum op, GLfloat value))
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glActiveTexture, (GLenum texture))
#define glAlphaFunc(func, ref) glatter_glAlphaFunc((func), (ref))
GLATTER_UBLOCK(void, GLAPIENTRY, glAlphaFunc, (GLenum func, GLclampf ref))
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident((n), (textures), (residences))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glAreTexturesResident, (GLsizei n, const GLuint *textures, GLboolean *residences))
#define glArrayElement(i) glatter_glArrayElement((i))
GLATTER_UBLOCK(void, GLAPIENTRY, glArrayElement, (GLint i))
#define glBegin(mode) glatter_glBegin((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glBegin, (GLenum mode))
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap))
GLATTER_UBLOCK(void, GLAPIENTRY, glBitmap, (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendEquation, (GLenum mode))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glCallList(list) glatter_glCallList((list))
GLATTER_UBLOCK(void, GLAPIENTRY, glCallList, (GLuint list))
#define glCallLists(n, type, lists) glatter_glCallLists((n), (type), (lists))
GLATTER_UBLOCK(void, GLAPIENTRY, glCallLists, (GLsizei n, GLenum type, const GLvoid *lists))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glClear, (GLbitfield mask))
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearAccum, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glClearDepth(depth) glatter_glClearDepth((depth))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearDepth, (GLclampd depth))
#define glClearIndex(c) glatter_glClearIndex((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearIndex, (GLfloat c))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearStencil, (GLint s))
#define glClientActiveTexture(texture) glatter_glClientActiveTexture((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glClientActiveTexture, (GLenum texture))
#define glClipPlane(plane, equation) glatter_glClipPlane((plane), (equation))
GLATTER_UBLOCK(void, GLAPIENTRY, glClipPlane, (GLenum plane, const GLdouble *equation))
#define glColor3b(red, green, blue) glatter_glColor3b((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3b, (GLbyte red, GLbyte green, GLbyte blue))
#define glColor3bv(v) glatter_glColor3bv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3bv, (const GLbyte *v))
#define glColor3d(red, green, blue) glatter_glColor3d((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3d, (GLdouble red, GLdouble green, GLdouble blue))
#define glColor3dv(v) glatter_glColor3dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3dv, (const GLdouble *v))
#define glColor3f(red, green, blue) glatter_glColor3f((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3f, (GLfloat red, GLfloat green, GLfloat blue))
#define glColor3fv(v) glatter_glColor3fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3fv, (const GLfloat *v))
#define glColor3i(red, green, blue) glatter_glColor3i((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3i, (GLint red, GLint green, GLint blue))
#define glColor3iv(v) glatter_glColor3iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3iv, (const GLint *v))
#define glColor3s(red, green, blue) glatter_glColor3s((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3s, (GLshort red, GLshort green, GLshort blue))
#define glColor3sv(v) glatter_glColor3sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3sv, (const GLshort *v))
#define glColor3ub(red, green, blue) glatter_glColor3ub((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3ub, (GLubyte red, GLubyte green, GLubyte blue))
#define glColor3ubv(v) glatter_glColor3ubv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3ubv, (const GLubyte *v))
#define glColor3ui(red, green, blue) glatter_glColor3ui((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3ui, (GLuint red, GLuint green, GLuint blue))
#define glColor3uiv(v) glatter_glColor3uiv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3uiv, (const GLuint *v))
#define glColor3us(red, green, blue) glatter_glColor3us((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3us, (GLushort red, GLushort green, GLushort blue))
#define glColor3usv(v) glatter_glColor3usv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3usv, (const GLushort *v))
#define glColor4b(red, green, blue, alpha) glatter_glColor4b((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4b, (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha))
#define glColor4bv(v) glatter_glColor4bv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4bv, (const GLbyte *v))
#define glColor4d(red, green, blue, alpha) glatter_glColor4d((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4d, (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha))
#define glColor4dv(v) glatter_glColor4dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4dv, (const GLdouble *v))
#define glColor4f(red, green, blue, alpha) glatter_glColor4f((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glColor4fv(v) glatter_glColor4fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4fv, (const GLfloat *v))
#define glColor4i(red, green, blue, alpha) glatter_glColor4i((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4i, (GLint red, GLint green, GLint blue, GLint alpha))
#define glColor4iv(v) glatter_glColor4iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4iv, (const GLint *v))
#define glColor4s(red, green, blue, alpha) glatter_glColor4s((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4s, (GLshort red, GLshort green, GLshort blue, GLshort alpha))
#define glColor4sv(v) glatter_glColor4sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4sv, (const GLshort *v))
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#define glColor4ubv(v) glatter_glColor4ubv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4ubv, (const GLubyte *v))
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4ui, (GLuint red, GLuint green, GLuint blue, GLuint alpha))
#define glColor4uiv(v) glatter_glColor4uiv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4uiv, (const GLuint *v))
#define glColor4us(red, green, blue, alpha) glatter_glColor4us((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4us, (GLushort red, GLushort green, GLushort blue, GLushort alpha))
#define glColor4usv(v) glatter_glColor4usv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4usv, (const GLushort *v))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glColorMaterial(face, mode) glatter_glColorMaterial((face), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorMaterial, (GLenum face, GLenum mode))
#define glColorPointer(size, type, stride, ptr) glatter_glColorPointer((size), (type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *ptr))
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable((target), (start), (count), (format), (type), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorSubTable, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data))
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable((target), (internalformat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorTable, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table))
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorTableParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorTableParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D((target), (internalformat), (width), (format), (type), (image))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionFilter1D, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image))
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D((target), (internalformat), (width), (height), (format), (type), (image))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image))
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameterf, (GLenum target, GLenum pname, GLfloat params))
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameteri, (GLenum target, GLenum pname, GLint params))
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable((target), (start), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyColorSubTable, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyColorTable, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyConvolutionFilter1D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D((target), (internalformat), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyConvolutionFilter2D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels((x), (y), (width), (height), (type))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type))
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D((target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glCullFace, (GLenum mode))
#define glDeleteLists(list, range) glatter_glDeleteLists((list), (range))
GLATTER_UBLOCK(void, GLAPIENTRY, glDeleteLists, (GLuint list, GLsizei range))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, GLAPIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, GLAPIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, GLAPIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRange(near_val, far_val) glatter_glDepthRange((near_val), (far_val))
GLATTER_UBLOCK(void, GLAPIENTRY, glDepthRange, (GLclampd near_val, GLclampd far_val))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glDisable, (GLenum cap))
#define glDisableClientState(cap) glatter_glDisableClientState((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glDisableClientState, (GLenum cap))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawBuffer(mode) glatter_glDrawBuffer((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawBuffer, (GLenum mode))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices))
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels((width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawPixels, (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices))
#define glEdgeFlag(flag) glatter_glEdgeFlag((flag))
GLATTER_UBLOCK(void, GLAPIENTRY, glEdgeFlag, (GLboolean flag))
#define glEdgeFlagPointer(stride, ptr) glatter_glEdgeFlagPointer((stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glEdgeFlagPointer, (GLsizei stride, const GLvoid *ptr))
#define glEdgeFlagv(flag) glatter_glEdgeFlagv((flag))
GLATTER_UBLOCK(void, GLAPIENTRY, glEdgeFlagv, (const GLboolean *flag))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glEnable, (GLenum cap))
#define glEnableClientState(cap) glatter_glEnableClientState((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glEnableClientState, (GLenum cap))
#define glEnd() glatter_glEnd()
GLATTER_UBLOCK(void, GLAPIENTRY, glEnd, (void))
#define glEndList() glatter_glEndList()
GLATTER_UBLOCK(void, GLAPIENTRY, glEndList, (void))
#define glEvalCoord1d(u) glatter_glEvalCoord1d((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1d, (GLdouble u))
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1dv, (const GLdouble *u))
#define glEvalCoord1f(u) glatter_glEvalCoord1f((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1f, (GLfloat u))
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1fv, (const GLfloat *u))
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d((u), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2d, (GLdouble u, GLdouble v))
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2dv, (const GLdouble *u))
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f((u), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2f, (GLfloat u, GLfloat v))
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2fv, (const GLfloat *u))
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1((mode), (i1), (i2))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalMesh1, (GLenum mode, GLint i1, GLint i2))
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2((mode), (i1), (i2), (j1), (j2))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalMesh2, (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2))
#define glEvalPoint1(i) glatter_glEvalPoint1((i))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalPoint1, (GLint i))
#define glEvalPoint2(i, j) glatter_glEvalPoint2((i), (j))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalPoint2, (GLint i, GLint j))
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer((size), (type), (buffer))
GLATTER_UBLOCK(void, GLAPIENTRY, glFeedbackBuffer, (GLsizei size, GLenum type, GLfloat *buffer))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, GLAPIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, GLAPIENTRY, glFlush, (void))
#define glFogf(pname, param) glatter_glFogf((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogf, (GLenum pname, GLfloat param))
#define glFogfv(pname, params) glatter_glFogfv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogfv, (GLenum pname, const GLfloat *params))
#define glFogi(pname, param) glatter_glFogi((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogi, (GLenum pname, GLint param))
#define glFogiv(pname, params) glatter_glFogiv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogiv, (GLenum pname, const GLint *params))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glFrontFace, (GLenum mode))
#define glFrustum(left, right, bottom, top, near_val, far_val) glatter_glFrustum((left), (right), (bottom), (top), (near_val), (far_val))
GLATTER_UBLOCK(void, GLAPIENTRY, glFrustum, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val))
#define glGenLists(range) glatter_glGenLists((range))
GLATTER_UBLOCK(GLuint, GLAPIENTRY, glGenLists, (GLsizei range))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, GLAPIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetBooleanv(pname, params) glatter_glGetBooleanv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetBooleanv, (GLenum pname, GLboolean *params))
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane((plane), (equation))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetClipPlane, (GLenum plane, GLdouble *equation))
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable((target), (format), (type), (table))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetColorTable, (GLenum target, GLenum format, GLenum type, GLvoid *table))
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetColorTableParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetColorTableParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetCompressedTexImage(target, lod, img) glatter_glGetCompressedTexImage((target), (lod), (img))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetCompressedTexImage, (GLenum target, GLint lod, GLvoid *img))
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter((target), (format), (type), (image))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetConvolutionFilter, (GLenum target, GLenum format, GLenum type, GLvoid *image))
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetConvolutionParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetConvolutionParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetDoublev(pname, params) glatter_glGetDoublev((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetDoublev, (GLenum pname, GLdouble *params))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, GLAPIENTRY, glGetError, (void))
#define glGetFloatv(pname, params) glatter_glGetFloatv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetFloatv, (GLenum pname, GLfloat *params))
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values))
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetHistogramParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetHistogramParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetIntegerv(pname, params) glatter_glGetIntegerv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetIntegerv, (GLenum pname, GLint *params))
#define glGetLightfv(light, pname, params) glatter_glGetLightfv((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetLightfv, (GLenum light, GLenum pname, GLfloat *params))
#define glGetLightiv(light, pname, params) glatter_glGetLightiv((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetLightiv, (GLenum light, GLenum pname, GLint *params))
#define glGetMapdv(target, query, v) glatter_glGetMapdv((target), (query), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMapdv, (GLenum target, GLenum query, GLdouble *v))
#define glGetMapfv(target, query, v) glatter_glGetMapfv((target), (query), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMapfv, (GLenum target, GLenum query, GLfloat *v))
#define glGetMapiv(target, query, v) glatter_glGetMapiv((target), (query), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMapiv, (GLenum target, GLenum query, GLint *v))
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat *params))
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMaterialiv, (GLenum face, GLenum pname, GLint *params))
#define glGetMinmax(target, reset, format, types, values) glatter_glGetMinmax((target), (reset), (format), (types), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values))
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMinmaxParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMinmaxParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv((map), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPixelMapfv, (GLenum map, GLfloat *values))
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv((map), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPixelMapuiv, (GLenum map, GLuint *values))
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv((map), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPixelMapusv, (GLenum map, GLushort *values))
#define glGetPointerv(pname, params) glatter_glGetPointerv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPointerv, (GLenum pname, GLvoid **params))
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPolygonStipple, (GLubyte *mask))
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter((target), (format), (type), (row), (column), (span))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetSeparableFilter, (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, GLAPIENTRY, glGetString, (GLenum name))
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexEnvfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexEnviv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexGendv, (GLenum coord, GLenum pname, GLdouble *params))
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexGenfv, (GLenum coord, GLenum pname, GLfloat *params))
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexGeniv, (GLenum coord, GLenum pname, GLint *params))
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage((target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glHint, (GLenum target, GLenum mode))
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram((target), (width), (internalformat), (sink))
GLATTER_UBLOCK(void, GLAPIENTRY, glHistogram, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#define glIndexMask(mask) glatter_glIndexMask((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexMask, (GLuint mask))
#define glIndexPointer(type, stride, ptr) glatter_glIndexPointer((type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexPointer, (GLenum type, GLsizei stride, const GLvoid *ptr))
#define glIndexd(c) glatter_glIndexd((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexd, (GLdouble c))
#define glIndexdv(c) glatter_glIndexdv((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexdv, (const GLdouble *c))
#define glIndexf(c) glatter_glIndexf((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexf, (GLfloat c))
#define glIndexfv(c) glatter_glIndexfv((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexfv, (const GLfloat *c))
#define glIndexi(c) glatter_glIndexi((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexi, (GLint c))
#define glIndexiv(c) glatter_glIndexiv((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexiv, (const GLint *c))
#define glIndexs(c) glatter_glIndexs((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexs, (GLshort c))
#define glIndexsv(c) glatter_glIndexsv((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexsv, (const GLshort *c))
#define glIndexub(c) glatter_glIndexub((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexub, (GLubyte c))
#define glIndexubv(c) glatter_glIndexubv((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexubv, (const GLubyte *c))
#define glInitNames() glatter_glInitNames()
GLATTER_UBLOCK(void, GLAPIENTRY, glInitNames, (void))
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays((format), (stride), (pointer))
GLATTER_UBLOCK(void, GLAPIENTRY, glInterleavedArrays, (GLenum format, GLsizei stride, const GLvoid *pointer))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glIsEnabled, (GLenum cap))
#define glIsList(list) glatter_glIsList((list))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glIsList, (GLuint list))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glIsTexture, (GLuint texture))
#define glLightModelf(pname, param) glatter_glLightModelf((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModelf, (GLenum pname, GLfloat param))
#define glLightModelfv(pname, params) glatter_glLightModelfv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModelfv, (GLenum pname, const GLfloat *params))
#define glLightModeli(pname, param) glatter_glLightModeli((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModeli, (GLenum pname, GLint param))
#define glLightModeliv(pname, params) glatter_glLightModeliv((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModeliv, (GLenum pname, const GLint *params))
#define glLightf(light, pname, param) glatter_glLightf((light), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightf, (GLenum light, GLenum pname, GLfloat param))
#define glLightfv(light, pname, params) glatter_glLightfv((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightfv, (GLenum light, GLenum pname, const GLfloat *params))
#define glLighti(light, pname, param) glatter_glLighti((light), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLighti, (GLenum light, GLenum pname, GLint param))
#define glLightiv(light, pname, params) glatter_glLightiv((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightiv, (GLenum light, GLenum pname, const GLint *params))
#define glLineStipple(factor, pattern) glatter_glLineStipple((factor), (pattern))
GLATTER_UBLOCK(void, GLAPIENTRY, glLineStipple, (GLint factor, GLushort pattern))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, GLAPIENTRY, glLineWidth, (GLfloat width))
#define glListBase(base) glatter_glListBase((base))
GLATTER_UBLOCK(void, GLAPIENTRY, glListBase, (GLuint base))
#define glLoadIdentity() glatter_glLoadIdentity()
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadIdentity, (void))
#define glLoadMatrixd(m) glatter_glLoadMatrixd((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadMatrixd, (const GLdouble *m))
#define glLoadMatrixf(m) glatter_glLoadMatrixf((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadMatrixf, (const GLfloat *m))
#define glLoadName(name) glatter_glLoadName((name))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadName, (GLuint name))
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadTransposeMatrixd, (const GLdouble m[16]))
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadTransposeMatrixf, (const GLfloat m[16]))
#define glLogicOp(opcode) glatter_glLogicOp((opcode))
GLATTER_UBLOCK(void, GLAPIENTRY, glLogicOp, (GLenum opcode))
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap1d, (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points))
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap1f, (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points))
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap2d, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points))
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap2f, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points))
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d((un), (u1), (u2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid1d, (GLint un, GLdouble u1, GLdouble u2))
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f((un), (u1), (u2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid1f, (GLint un, GLfloat u1, GLfloat u2))
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid2d, (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2))
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid2f, (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2))
#define glMaterialf(face, pname, param) glatter_glMaterialf((face), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glMaterialf, (GLenum face, GLenum pname, GLfloat param))
#define glMaterialfv(face, pname, params) glatter_glMaterialfv((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glMaterialfv, (GLenum face, GLenum pname, const GLfloat *params))
#define glMateriali(face, pname, param) glatter_glMateriali((face), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glMateriali, (GLenum face, GLenum pname, GLint param))
#define glMaterialiv(face, pname, params) glatter_glMaterialiv((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glMaterialiv, (GLenum face, GLenum pname, const GLint *params))
#define glMatrixMode(mode) glatter_glMatrixMode((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glMatrixMode, (GLenum mode))
#define glMinmax(target, internalformat, sink) glatter_glMinmax((target), (internalformat), (sink))
GLATTER_UBLOCK(void, GLAPIENTRY, glMinmax, (GLenum target, GLenum internalformat, GLboolean sink))
#define glMultMatrixd(m) glatter_glMultMatrixd((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultMatrixd, (const GLdouble *m))
#define glMultMatrixf(m) glatter_glMultMatrixf((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultMatrixf, (const GLfloat *m))
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultTransposeMatrixd, (const GLdouble m[16]))
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultTransposeMatrixf, (const GLfloat m[16]))
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1d, (GLenum target, GLdouble s))
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1f, (GLenum target, GLfloat s))
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1i, (GLenum target, GLint s))
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1iv, (GLenum target, const GLint *v))
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1s, (GLenum target, GLshort s))
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2d, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2f, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2i, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2iv, (GLenum target, const GLint *v))
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2s, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3d, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3f, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3i, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3iv, (GLenum target, const GLint *v))
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3s, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4d, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4i, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4iv, (GLenum target, const GLint *v))
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4s, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4sv, (GLenum target, const GLshort *v))
#define glNewList(list, mode) glatter_glNewList((list), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glNewList, (GLuint list, GLenum mode))
#define glNormal3b(nx, ny, nz) glatter_glNormal3b((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3b, (GLbyte nx, GLbyte ny, GLbyte nz))
#define glNormal3bv(v) glatter_glNormal3bv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3bv, (const GLbyte *v))
#define glNormal3d(nx, ny, nz) glatter_glNormal3d((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3d, (GLdouble nx, GLdouble ny, GLdouble nz))
#define glNormal3dv(v) glatter_glNormal3dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3dv, (const GLdouble *v))
#define glNormal3f(nx, ny, nz) glatter_glNormal3f((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormal3fv(v) glatter_glNormal3fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3fv, (const GLfloat *v))
#define glNormal3i(nx, ny, nz) glatter_glNormal3i((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3i, (GLint nx, GLint ny, GLint nz))
#define glNormal3iv(v) glatter_glNormal3iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3iv, (const GLint *v))
#define glNormal3s(nx, ny, nz) glatter_glNormal3s((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3s, (GLshort nx, GLshort ny, GLshort nz))
#define glNormal3sv(v) glatter_glNormal3sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3sv, (const GLshort *v))
#define glNormalPointer(type, stride, ptr) glatter_glNormalPointer((type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormalPointer, (GLenum type, GLsizei stride, const GLvoid *ptr))
#define glOrtho(left, right, bottom, top, near_val, far_val) glatter_glOrtho((left), (right), (bottom), (top), (near_val), (far_val))
GLATTER_UBLOCK(void, GLAPIENTRY, glOrtho, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val))
#define glPassThrough(token) glatter_glPassThrough((token))
GLATTER_UBLOCK(void, GLAPIENTRY, glPassThrough, (GLfloat token))
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv((map), (mapsize), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelMapfv, (GLenum map, GLsizei mapsize, const GLfloat *values))
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv((map), (mapsize), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelMapuiv, (GLenum map, GLsizei mapsize, const GLuint *values))
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv((map), (mapsize), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelMapusv, (GLenum map, GLsizei mapsize, const GLushort *values))
#define glPixelStoref(pname, param) glatter_glPixelStoref((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelStoref, (GLenum pname, GLfloat param))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPixelTransferf(pname, param) glatter_glPixelTransferf((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelTransferf, (GLenum pname, GLfloat param))
#define glPixelTransferi(pname, param) glatter_glPixelTransferi((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelTransferi, (GLenum pname, GLint param))
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom((xfactor), (yfactor))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelZoom, (GLfloat xfactor, GLfloat yfactor))
#define glPointSize(size) glatter_glPointSize((size))
GLATTER_UBLOCK(void, GLAPIENTRY, glPointSize, (GLfloat size))
#define glPolygonMode(face, mode) glatter_glPolygonMode((face), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glPolygonMode, (GLenum face, GLenum mode))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, GLAPIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glPolygonStipple(mask) glatter_glPolygonStipple((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glPolygonStipple, (const GLubyte *mask))
#define glPopAttrib() glatter_glPopAttrib()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopAttrib, (void))
#define glPopClientAttrib() glatter_glPopClientAttrib()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopClientAttrib, (void))
#define glPopMatrix() glatter_glPopMatrix()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopMatrix, (void))
#define glPopName() glatter_glPopName()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopName, (void))
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures((n), (textures), (priorities))
GLATTER_UBLOCK(void, GLAPIENTRY, glPrioritizeTextures, (GLsizei n, const GLuint *textures, const GLclampf *priorities))
#define glPushAttrib(mask) glatter_glPushAttrib((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glPushAttrib, (GLbitfield mask))
#define glPushClientAttrib(mask) glatter_glPushClientAttrib((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glPushClientAttrib, (GLbitfield mask))
#define glPushMatrix() glatter_glPushMatrix()
GLATTER_UBLOCK(void, GLAPIENTRY, glPushMatrix, (void))
#define glPushName(name) glatter_glPushName((name))
GLATTER_UBLOCK(void, GLAPIENTRY, glPushName, (GLuint name))
#define glRasterPos2d(x, y) glatter_glRasterPos2d((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2d, (GLdouble x, GLdouble y))
#define glRasterPos2dv(v) glatter_glRasterPos2dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2dv, (const GLdouble *v))
#define glRasterPos2f(x, y) glatter_glRasterPos2f((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2f, (GLfloat x, GLfloat y))
#define glRasterPos2fv(v) glatter_glRasterPos2fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2fv, (const GLfloat *v))
#define glRasterPos2i(x, y) glatter_glRasterPos2i((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2i, (GLint x, GLint y))
#define glRasterPos2iv(v) glatter_glRasterPos2iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2iv, (const GLint *v))
#define glRasterPos2s(x, y) glatter_glRasterPos2s((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2s, (GLshort x, GLshort y))
#define glRasterPos2sv(v) glatter_glRasterPos2sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2sv, (const GLshort *v))
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3d, (GLdouble x, GLdouble y, GLdouble z))
#define glRasterPos3dv(v) glatter_glRasterPos3dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3dv, (const GLdouble *v))
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3f, (GLfloat x, GLfloat y, GLfloat z))
#define glRasterPos3fv(v) glatter_glRasterPos3fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3fv, (const GLfloat *v))
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3i, (GLint x, GLint y, GLint z))
#define glRasterPos3iv(v) glatter_glRasterPos3iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3iv, (const GLint *v))
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3s, (GLshort x, GLshort y, GLshort z))
#define glRasterPos3sv(v) glatter_glRasterPos3sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3sv, (const GLshort *v))
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glRasterPos4dv(v) glatter_glRasterPos4dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4dv, (const GLdouble *v))
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glRasterPos4fv(v) glatter_glRasterPos4fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4fv, (const GLfloat *v))
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4i, (GLint x, GLint y, GLint z, GLint w))
#define glRasterPos4iv(v) glatter_glRasterPos4iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4iv, (const GLint *v))
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glRasterPos4sv(v) glatter_glRasterPos4sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4sv, (const GLshort *v))
#define glReadBuffer(mode) glatter_glReadBuffer((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glReadBuffer, (GLenum mode))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels))
#define glRectd(x1, y1, x2, y2) glatter_glRectd((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectd, (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2))
#define glRectdv(v1, v2) glatter_glRectdv((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectdv, (const GLdouble *v1, const GLdouble *v2))
#define glRectf(x1, y1, x2, y2) glatter_glRectf((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectf, (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2))
#define glRectfv(v1, v2) glatter_glRectfv((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectfv, (const GLfloat *v1, const GLfloat *v2))
#define glRecti(x1, y1, x2, y2) glatter_glRecti((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRecti, (GLint x1, GLint y1, GLint x2, GLint y2))
#define glRectiv(v1, v2) glatter_glRectiv((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectiv, (const GLint *v1, const GLint *v2))
#define glRects(x1, y1, x2, y2) glatter_glRects((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRects, (GLshort x1, GLshort y1, GLshort x2, GLshort y2))
#define glRectsv(v1, v2) glatter_glRectsv((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectsv, (const GLshort *v1, const GLshort *v2))
#define glRenderMode(mode) glatter_glRenderMode((mode))
GLATTER_UBLOCK(GLint, GLAPIENTRY, glRenderMode, (GLenum mode))
#define glResetHistogram(target) glatter_glResetHistogram((target))
GLATTER_UBLOCK(void, GLAPIENTRY, glResetHistogram, (GLenum target))
#define glResetMinmax(target) glatter_glResetMinmax((target))
GLATTER_UBLOCK(void, GLAPIENTRY, glResetMinmax, (GLenum target))
#define glRotated(angle, x, y, z) glatter_glRotated((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRotated, (GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#define glRotatef(angle, x, y, z) glatter_glRotatef((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, GLAPIENTRY, glSampleCoverage, (GLclampf value, GLboolean invert))
#define glScaled(x, y, z) glatter_glScaled((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glScaled, (GLdouble x, GLdouble y, GLdouble z))
#define glScalef(x, y, z) glatter_glScalef((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glScalef, (GLfloat x, GLfloat y, GLfloat z))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer((size), (buffer))
GLATTER_UBLOCK(void, GLAPIENTRY, glSelectBuffer, (GLsizei size, GLuint *buffer))
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D((target), (internalformat), (width), (height), (format), (type), (row), (column))
GLATTER_UBLOCK(void, GLAPIENTRY, glSeparableFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column))
#define glShadeModel(mode) glatter_glShadeModel((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glShadeModel, (GLenum mode))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GLAPIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexCoord1d(s) glatter_glTexCoord1d((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1d, (GLdouble s))
#define glTexCoord1dv(v) glatter_glTexCoord1dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1dv, (const GLdouble *v))
#define glTexCoord1f(s) glatter_glTexCoord1f((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1f, (GLfloat s))
#define glTexCoord1fv(v) glatter_glTexCoord1fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1fv, (const GLfloat *v))
#define glTexCoord1i(s) glatter_glTexCoord1i((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1i, (GLint s))
#define glTexCoord1iv(v) glatter_glTexCoord1iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1iv, (const GLint *v))
#define glTexCoord1s(s) glatter_glTexCoord1s((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1s, (GLshort s))
#define glTexCoord1sv(v) glatter_glTexCoord1sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1sv, (const GLshort *v))
#define glTexCoord2d(s, t) glatter_glTexCoord2d((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2d, (GLdouble s, GLdouble t))
#define glTexCoord2dv(v) glatter_glTexCoord2dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2dv, (const GLdouble *v))
#define glTexCoord2f(s, t) glatter_glTexCoord2f((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2f, (GLfloat s, GLfloat t))
#define glTexCoord2fv(v) glatter_glTexCoord2fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2fv, (const GLfloat *v))
#define glTexCoord2i(s, t) glatter_glTexCoord2i((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2i, (GLint s, GLint t))
#define glTexCoord2iv(v) glatter_glTexCoord2iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2iv, (const GLint *v))
#define glTexCoord2s(s, t) glatter_glTexCoord2s((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2s, (GLshort s, GLshort t))
#define glTexCoord2sv(v) glatter_glTexCoord2sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2sv, (const GLshort *v))
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3d, (GLdouble s, GLdouble t, GLdouble r))
#define glTexCoord3dv(v) glatter_glTexCoord3dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3dv, (const GLdouble *v))
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3f, (GLfloat s, GLfloat t, GLfloat r))
#define glTexCoord3fv(v) glatter_glTexCoord3fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3fv, (const GLfloat *v))
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3i, (GLint s, GLint t, GLint r))
#define glTexCoord3iv(v) glatter_glTexCoord3iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3iv, (const GLint *v))
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3s, (GLshort s, GLshort t, GLshort r))
#define glTexCoord3sv(v) glatter_glTexCoord3sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3sv, (const GLshort *v))
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4d, (GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glTexCoord4dv(v) glatter_glTexCoord4dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4dv, (const GLdouble *v))
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4f, (GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glTexCoord4fv(v) glatter_glTexCoord4fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4fv, (const GLfloat *v))
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4i, (GLint s, GLint t, GLint r, GLint q))
#define glTexCoord4iv(v) glatter_glTexCoord4iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4iv, (const GLint *v))
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4s, (GLshort s, GLshort t, GLshort r, GLshort q))
#define glTexCoord4sv(v) glatter_glTexCoord4sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4sv, (const GLshort *v))
#define glTexCoordPointer(size, type, stride, ptr) glatter_glTexCoordPointer((size), (type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *ptr))
#define glTexEnvf(target, pname, param) glatter_glTexEnvf((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnvf, (GLenum target, GLenum pname, GLfloat param))
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexEnvi(target, pname, param) glatter_glTexEnvi((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnvi, (GLenum target, GLenum pname, GLint param))
#define glTexEnviv(target, pname, params) glatter_glTexEnviv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnviv, (GLenum target, GLenum pname, const GLint *params))
#define glTexGend(coord, pname, param) glatter_glTexGend((coord), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGend, (GLenum coord, GLenum pname, GLdouble param))
#define glTexGendv(coord, pname, params) glatter_glTexGendv((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGendv, (GLenum coord, GLenum pname, const GLdouble *params))
#define glTexGenf(coord, pname, param) glatter_glTexGenf((coord), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGenf, (GLenum coord, GLenum pname, GLfloat param))
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGenfv, (GLenum coord, GLenum pname, const GLfloat *params))
#define glTexGeni(coord, pname, param) glatter_glTexGeni((coord), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGeni, (GLenum coord, GLenum pname, GLint param))
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGeniv, (GLenum coord, GLenum pname, const GLint *params))
#define glTexImage1D(target, level, internalFormat, width, border, format, type, pixels) glatter_glTexImage1D((target), (level), (internalFormat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexImage1D, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalFormat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalFormat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels))
#define glTranslated(x, y, z) glatter_glTranslated((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glTranslated, (GLdouble x, GLdouble y, GLdouble z))
#define glTranslatef(x, y, z) glatter_glTranslatef((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glTranslatef, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex2d(x, y) glatter_glVertex2d((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2d, (GLdouble x, GLdouble y))
#define glVertex2dv(v) glatter_glVertex2dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2dv, (const GLdouble *v))
#define glVertex2f(x, y) glatter_glVertex2f((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2f, (GLfloat x, GLfloat y))
#define glVertex2fv(v) glatter_glVertex2fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2fv, (const GLfloat *v))
#define glVertex2i(x, y) glatter_glVertex2i((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2i, (GLint x, GLint y))
#define glVertex2iv(v) glatter_glVertex2iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2iv, (const GLint *v))
#define glVertex2s(x, y) glatter_glVertex2s((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2s, (GLshort x, GLshort y))
#define glVertex2sv(v) glatter_glVertex2sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2sv, (const GLshort *v))
#define glVertex3d(x, y, z) glatter_glVertex3d((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3d, (GLdouble x, GLdouble y, GLdouble z))
#define glVertex3dv(v) glatter_glVertex3dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3dv, (const GLdouble *v))
#define glVertex3f(x, y, z) glatter_glVertex3f((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3f, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex3fv(v) glatter_glVertex3fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3fv, (const GLfloat *v))
#define glVertex3i(x, y, z) glatter_glVertex3i((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3i, (GLint x, GLint y, GLint z))
#define glVertex3iv(v) glatter_glVertex3iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3iv, (const GLint *v))
#define glVertex3s(x, y, z) glatter_glVertex3s((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3s, (GLshort x, GLshort y, GLshort z))
#define glVertex3sv(v) glatter_glVertex3sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3sv, (const GLshort *v))
#define glVertex4d(x, y, z, w) glatter_glVertex4d((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertex4dv(v) glatter_glVertex4dv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4dv, (const GLdouble *v))
#define glVertex4f(x, y, z, w) glatter_glVertex4f((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertex4fv(v) glatter_glVertex4fv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4fv, (const GLfloat *v))
#define glVertex4i(x, y, z, w) glatter_glVertex4i((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4i, (GLint x, GLint y, GLint z, GLint w))
#define glVertex4iv(v) glatter_glVertex4iv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4iv, (const GLint *v))
#define glVertex4s(x, y, z, w) glatter_glVertex4s((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertex4sv(v) glatter_glVertex4sv((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4sv, (const GLshort *v))
#define glVertexPointer(size, type, stride, ptr) glatter_glVertexPointer((size), (type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *ptr))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(__gl_h_)
#endif // !defined(__GL_H__)
#if defined(__GL_H__)
#if defined(__gl_h_)
#define glAccum(op, value) glatter_glAccum((op), (value))
GLATTER_UBLOCK(void, APIENTRY, glAccum, (GLenum op, GLfloat value))
#define glAlphaFunc(func, ref) glatter_glAlphaFunc((func), (ref))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFunc, (GLenum func, GLclampf ref))
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident((n), (textures), (residences))
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreTexturesResident, (GLsizei n, const GLuint *textures, GLboolean *residences))
#define glArrayElement(i) glatter_glArrayElement((i))
GLATTER_UBLOCK(void, APIENTRY, glArrayElement, (GLint i))
#define glBegin(mode) glatter_glBegin((mode))
GLATTER_UBLOCK(void, APIENTRY, glBegin, (GLenum mode))
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap))
GLATTER_UBLOCK(void, APIENTRY, glBitmap, (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glCallList(list) glatter_glCallList((list))
GLATTER_UBLOCK(void, APIENTRY, glCallList, (GLuint list))
#define glCallLists(n, type, lists) glatter_glCallLists((n), (type), (lists))
GLATTER_UBLOCK(void, APIENTRY, glCallLists, (GLsizei n, GLenum type, const GLvoid *lists))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, APIENTRY, glClear, (GLbitfield mask))
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearAccum, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glClearDepth(depth) glatter_glClearDepth((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepth, (GLclampd depth))
#define glClearIndex(c) glatter_glClearIndex((c))
GLATTER_UBLOCK(void, APIENTRY, glClearIndex, (GLfloat c))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, APIENTRY, glClearStencil, (GLint s))
#define glClipPlane(plane, equation) glatter_glClipPlane((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glClipPlane, (GLenum plane, const GLdouble *equation))
#define glColor3b(red, green, blue) glatter_glColor3b((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3b, (GLbyte red, GLbyte green, GLbyte blue))
#define glColor3bv(v) glatter_glColor3bv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3bv, (const GLbyte *v))
#define glColor3d(red, green, blue) glatter_glColor3d((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3d, (GLdouble red, GLdouble green, GLdouble blue))
#define glColor3dv(v) glatter_glColor3dv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3dv, (const GLdouble *v))
#define glColor3f(red, green, blue) glatter_glColor3f((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3f, (GLfloat red, GLfloat green, GLfloat blue))
#define glColor3fv(v) glatter_glColor3fv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3fv, (const GLfloat *v))
#define glColor3i(red, green, blue) glatter_glColor3i((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3i, (GLint red, GLint green, GLint blue))
#define glColor3iv(v) glatter_glColor3iv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3iv, (const GLint *v))
#define glColor3s(red, green, blue) glatter_glColor3s((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3s, (GLshort red, GLshort green, GLshort blue))
#define glColor3sv(v) glatter_glColor3sv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3sv, (const GLshort *v))
#define glColor3ub(red, green, blue) glatter_glColor3ub((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3ub, (GLubyte red, GLubyte green, GLubyte blue))
#define glColor3ubv(v) glatter_glColor3ubv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3ubv, (const GLubyte *v))
#define glColor3ui(red, green, blue) glatter_glColor3ui((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3ui, (GLuint red, GLuint green, GLuint blue))
#define glColor3uiv(v) glatter_glColor3uiv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3uiv, (const GLuint *v))
#define glColor3us(red, green, blue) glatter_glColor3us((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3us, (GLushort red, GLushort green, GLushort blue))
#define glColor3usv(v) glatter_glColor3usv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3usv, (const GLushort *v))
#define glColor4b(red, green, blue, alpha) glatter_glColor4b((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4b, (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha))
#define glColor4bv(v) glatter_glColor4bv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4bv, (const GLbyte *v))
#define glColor4d(red, green, blue, alpha) glatter_glColor4d((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4d, (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha))
#define glColor4dv(v) glatter_glColor4dv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4dv, (const GLdouble *v))
#define glColor4f(red, green, blue, alpha) glatter_glColor4f((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glColor4fv(v) glatter_glColor4fv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4fv, (const GLfloat *v))
#define glColor4i(red, green, blue, alpha) glatter_glColor4i((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4i, (GLint red, GLint green, GLint blue, GLint alpha))
#define glColor4iv(v) glatter_glColor4iv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4iv, (const GLint *v))
#define glColor4s(red, green, blue, alpha) glatter_glColor4s((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4s, (GLshort red, GLshort green, GLshort blue, GLshort alpha))
#define glColor4sv(v) glatter_glColor4sv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4sv, (const GLshort *v))
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#define glColor4ubv(v) glatter_glColor4ubv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubv, (const GLubyte *v))
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4ui, (GLuint red, GLuint green, GLuint blue, GLuint alpha))
#define glColor4uiv(v) glatter_glColor4uiv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4uiv, (const GLuint *v))
#define glColor4us(red, green, blue, alpha) glatter_glColor4us((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4us, (GLushort red, GLushort green, GLushort blue, GLushort alpha))
#define glColor4usv(v) glatter_glColor4usv((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4usv, (const GLushort *v))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glColorMaterial(face, mode) glatter_glColorMaterial((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glColorMaterial, (GLenum face, GLenum mode))
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glColorPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels((x), (y), (width), (height), (type))
GLATTER_UBLOCK(void, APIENTRY, glCopyPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type))
#define glCopyTexImage1D(target, level, internalFormat, x, y, width, border) glatter_glCopyTexImage1D((target), (level), (internalFormat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2D(target, level, internalFormat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalFormat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, APIENTRY, glCullFace, (GLenum mode))
#define glDeleteLists(list, range) glatter_glDeleteLists((list), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeleteLists, (GLuint list, GLsizei range))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRange(zNear, zFar) glatter_glDepthRange((zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glDepthRange, (GLclampd zNear, GLclampd zFar))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, APIENTRY, glDisable, (GLenum cap))
#define glDisableClientState(array) glatter_glDisableClientState((array))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientState, (GLenum array))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawBuffer(mode) glatter_glDrawBuffer((mode))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffer, (GLenum mode))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices))
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels((width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glDrawPixels, (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glEdgeFlag(flag) glatter_glEdgeFlag((flag))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlag, (GLboolean flag))
#define glEdgeFlagPointer(stride, pointer) glatter_glEdgeFlagPointer((stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointer, (GLsizei stride, const GLvoid *pointer))
#define glEdgeFlagv(flag) glatter_glEdgeFlagv((flag))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagv, (const GLboolean *flag))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, APIENTRY, glEnable, (GLenum cap))
#define glEnableClientState(array) glatter_glEnableClientState((array))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientState, (GLenum array))
#define glEnd() glatter_glEnd()
GLATTER_UBLOCK(void, APIENTRY, glEnd, (void))
#define glEndList() glatter_glEndList()
GLATTER_UBLOCK(void, APIENTRY, glEndList, (void))
#define glEvalCoord1d(u) glatter_glEvalCoord1d((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1d, (GLdouble u))
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1dv, (const GLdouble *u))
#define glEvalCoord1f(u) glatter_glEvalCoord1f((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1f, (GLfloat u))
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1fv, (const GLfloat *u))
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d((u), (v))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2d, (GLdouble u, GLdouble v))
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2dv, (const GLdouble *u))
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f((u), (v))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2f, (GLfloat u, GLfloat v))
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2fv, (const GLfloat *u))
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1((mode), (i1), (i2))
GLATTER_UBLOCK(void, APIENTRY, glEvalMesh1, (GLenum mode, GLint i1, GLint i2))
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2((mode), (i1), (i2), (j1), (j2))
GLATTER_UBLOCK(void, APIENTRY, glEvalMesh2, (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2))
#define glEvalPoint1(i) glatter_glEvalPoint1((i))
GLATTER_UBLOCK(void, APIENTRY, glEvalPoint1, (GLint i))
#define glEvalPoint2(i, j) glatter_glEvalPoint2((i), (j))
GLATTER_UBLOCK(void, APIENTRY, glEvalPoint2, (GLint i, GLint j))
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer((size), (type), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glFeedbackBuffer, (GLsizei size, GLenum type, GLfloat *buffer))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, APIENTRY, glFlush, (void))
#define glFogf(pname, param) glatter_glFogf((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogf, (GLenum pname, GLfloat param))
#define glFogfv(pname, params) glatter_glFogfv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFogfv, (GLenum pname, const GLfloat *params))
#define glFogi(pname, param) glatter_glFogi((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogi, (GLenum pname, GLint param))
#define glFogiv(pname, params) glatter_glFogiv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFogiv, (GLenum pname, const GLint *params))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, APIENTRY, glFrontFace, (GLenum mode))
#define glFrustum(left, right, bottom, top, zNear, zFar) glatter_glFrustum((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glFrustum, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glGenLists(range) glatter_glGenLists((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenLists, (GLsizei range))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetBooleanv(pname, params) glatter_glGetBooleanv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *params))
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlane, (GLenum plane, GLdouble *equation))
#define glGetDoublev(pname, params) glatter_glGetDoublev((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublev, (GLenum pname, GLdouble *params))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetError, (void))
#define glGetFloatv(pname, params) glatter_glGetFloatv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatv, (GLenum pname, GLfloat *params))
#define glGetIntegerv(pname, params) glatter_glGetIntegerv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerv, (GLenum pname, GLint *params))
#define glGetLightfv(light, pname, params) glatter_glGetLightfv((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetLightfv, (GLenum light, GLenum pname, GLfloat *params))
#define glGetLightiv(light, pname, params) glatter_glGetLightiv((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetLightiv, (GLenum light, GLenum pname, GLint *params))
#define glGetMapdv(target, query, v) glatter_glGetMapdv((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapdv, (GLenum target, GLenum query, GLdouble *v))
#define glGetMapfv(target, query, v) glatter_glGetMapfv((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapfv, (GLenum target, GLenum query, GLfloat *v))
#define glGetMapiv(target, query, v) glatter_glGetMapiv((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapiv, (GLenum target, GLenum query, GLint *v))
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat *params))
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMaterialiv, (GLenum face, GLenum pname, GLint *params))
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv((map), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapfv, (GLenum map, GLfloat *values))
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv((map), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapuiv, (GLenum map, GLuint *values))
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv((map), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapusv, (GLenum map, GLushort *values))
#define glGetPointerv(pname, params) glatter_glGetPointerv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerv, (GLenum pname, GLvoid* *params))
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple((mask))
GLATTER_UBLOCK(void, APIENTRY, glGetPolygonStipple, (GLubyte *mask))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetString, (GLenum name))
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexEnvfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexEnviv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGendv, (GLenum coord, GLenum pname, GLdouble *params))
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGenfv, (GLenum coord, GLenum pname, GLfloat *params))
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGeniv, (GLenum coord, GLenum pname, GLint *params))
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage((target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIndexMask(mask) glatter_glIndexMask((mask))
GLATTER_UBLOCK(void, APIENTRY, glIndexMask, (GLuint mask))
#define glIndexPointer(type, stride, pointer) glatter_glIndexPointer((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glIndexPointer, (GLenum type, GLsizei stride, const GLvoid *pointer))
#define glIndexd(c) glatter_glIndexd((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexd, (GLdouble c))
#define glIndexdv(c) glatter_glIndexdv((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexdv, (const GLdouble *c))
#define glIndexf(c) glatter_glIndexf((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexf, (GLfloat c))
#define glIndexfv(c) glatter_glIndexfv((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexfv, (const GLfloat *c))
#define glIndexi(c) glatter_glIndexi((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexi, (GLint c))
#define glIndexiv(c) glatter_glIndexiv((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexiv, (const GLint *c))
#define glIndexs(c) glatter_glIndexs((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexs, (GLshort c))
#define glIndexsv(c) glatter_glIndexsv((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexsv, (const GLshort *c))
#define glIndexub(c) glatter_glIndexub((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexub, (GLubyte c))
#define glIndexubv(c) glatter_glIndexubv((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexubv, (const GLubyte *c))
#define glInitNames() glatter_glInitNames()
GLATTER_UBLOCK(void, APIENTRY, glInitNames, (void))
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays((format), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glInterleavedArrays, (GLenum format, GLsizei stride, const GLvoid *pointer))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabled, (GLenum cap))
#define glIsList(list) glatter_glIsList((list))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsList, (GLuint list))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTexture, (GLuint texture))
#define glLightModelf(pname, param) glatter_glLightModelf((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModelf, (GLenum pname, GLfloat param))
#define glLightModelfv(pname, params) glatter_glLightModelfv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightModelfv, (GLenum pname, const GLfloat *params))
#define glLightModeli(pname, param) glatter_glLightModeli((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModeli, (GLenum pname, GLint param))
#define glLightModeliv(pname, params) glatter_glLightModeliv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightModeliv, (GLenum pname, const GLint *params))
#define glLightf(light, pname, param) glatter_glLightf((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightf, (GLenum light, GLenum pname, GLfloat param))
#define glLightfv(light, pname, params) glatter_glLightfv((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightfv, (GLenum light, GLenum pname, const GLfloat *params))
#define glLighti(light, pname, param) glatter_glLighti((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLighti, (GLenum light, GLenum pname, GLint param))
#define glLightiv(light, pname, params) glatter_glLightiv((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightiv, (GLenum light, GLenum pname, const GLint *params))
#define glLineStipple(factor, pattern) glatter_glLineStipple((factor), (pattern))
GLATTER_UBLOCK(void, APIENTRY, glLineStipple, (GLint factor, GLushort pattern))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, APIENTRY, glLineWidth, (GLfloat width))
#define glListBase(base) glatter_glListBase((base))
GLATTER_UBLOCK(void, APIENTRY, glListBase, (GLuint base))
#define glLoadIdentity() glatter_glLoadIdentity()
GLATTER_UBLOCK(void, APIENTRY, glLoadIdentity, (void))
#define glLoadMatrixd(m) glatter_glLoadMatrixd((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadMatrixd, (const GLdouble *m))
#define glLoadMatrixf(m) glatter_glLoadMatrixf((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadMatrixf, (const GLfloat *m))
#define glLoadName(name) glatter_glLoadName((name))
GLATTER_UBLOCK(void, APIENTRY, glLoadName, (GLuint name))
#define glLogicOp(opcode) glatter_glLogicOp((opcode))
GLATTER_UBLOCK(void, APIENTRY, glLogicOp, (GLenum opcode))
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap1d, (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points))
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap1f, (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points))
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap2d, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points))
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap2f, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points))
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d((un), (u1), (u2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid1d, (GLint un, GLdouble u1, GLdouble u2))
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f((un), (u1), (u2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid1f, (GLint un, GLfloat u1, GLfloat u2))
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid2d, (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2))
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid2f, (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2))
#define glMaterialf(face, pname, param) glatter_glMaterialf((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMaterialf, (GLenum face, GLenum pname, GLfloat param))
#define glMaterialfv(face, pname, params) glatter_glMaterialfv((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMaterialfv, (GLenum face, GLenum pname, const GLfloat *params))
#define glMateriali(face, pname, param) glatter_glMateriali((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMateriali, (GLenum face, GLenum pname, GLint param))
#define glMaterialiv(face, pname, params) glatter_glMaterialiv((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMaterialiv, (GLenum face, GLenum pname, const GLint *params))
#define glMatrixMode(mode) glatter_glMatrixMode((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMode, (GLenum mode))
#define glMultMatrixd(m) glatter_glMultMatrixd((m))
GLATTER_UBLOCK(void, APIENTRY, glMultMatrixd, (const GLdouble *m))
#define glMultMatrixf(m) glatter_glMultMatrixf((m))
GLATTER_UBLOCK(void, APIENTRY, glMultMatrixf, (const GLfloat *m))
#define glNewList(list, mode) glatter_glNewList((list), (mode))
GLATTER_UBLOCK(void, APIENTRY, glNewList, (GLuint list, GLenum mode))
#define glNormal3b(nx, ny, nz) glatter_glNormal3b((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3b, (GLbyte nx, GLbyte ny, GLbyte nz))
#define glNormal3bv(v) glatter_glNormal3bv((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3bv, (const GLbyte *v))
#define glNormal3d(nx, ny, nz) glatter_glNormal3d((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3d, (GLdouble nx, GLdouble ny, GLdouble nz))
#define glNormal3dv(v) glatter_glNormal3dv((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3dv, (const GLdouble *v))
#define glNormal3f(nx, ny, nz) glatter_glNormal3f((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormal3fv(v) glatter_glNormal3fv((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3fv, (const GLfloat *v))
#define glNormal3i(nx, ny, nz) glatter_glNormal3i((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3i, (GLint nx, GLint ny, GLint nz))
#define glNormal3iv(v) glatter_glNormal3iv((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3iv, (const GLint *v))
#define glNormal3s(nx, ny, nz) glatter_glNormal3s((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3s, (GLshort nx, GLshort ny, GLshort nz))
#define glNormal3sv(v) glatter_glNormal3sv((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3sv, (const GLshort *v))
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointer, (GLenum type, GLsizei stride, const GLvoid *pointer))
#define glOrtho(left, right, bottom, top, zNear, zFar) glatter_glOrtho((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glOrtho, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glPassThrough(token) glatter_glPassThrough((token))
GLATTER_UBLOCK(void, APIENTRY, glPassThrough, (GLfloat token))
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv((map), (mapsize), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapfv, (GLenum map, GLsizei mapsize, const GLfloat *values))
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv((map), (mapsize), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapuiv, (GLenum map, GLsizei mapsize, const GLuint *values))
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv((map), (mapsize), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapusv, (GLenum map, GLsizei mapsize, const GLushort *values))
#define glPixelStoref(pname, param) glatter_glPixelStoref((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStoref, (GLenum pname, GLfloat param))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPixelTransferf(pname, param) glatter_glPixelTransferf((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransferf, (GLenum pname, GLfloat param))
#define glPixelTransferi(pname, param) glatter_glPixelTransferi((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransferi, (GLenum pname, GLint param))
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom((xfactor), (yfactor))
GLATTER_UBLOCK(void, APIENTRY, glPixelZoom, (GLfloat xfactor, GLfloat yfactor))
#define glPointSize(size) glatter_glPointSize((size))
GLATTER_UBLOCK(void, APIENTRY, glPointSize, (GLfloat size))
#define glPolygonMode(face, mode) glatter_glPolygonMode((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glPolygonMode, (GLenum face, GLenum mode))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glPolygonStipple(mask) glatter_glPolygonStipple((mask))
GLATTER_UBLOCK(void, APIENTRY, glPolygonStipple, (const GLubyte *mask))
#define glPopAttrib() glatter_glPopAttrib()
GLATTER_UBLOCK(void, APIENTRY, glPopAttrib, (void))
#define glPopClientAttrib() glatter_glPopClientAttrib()
GLATTER_UBLOCK(void, APIENTRY, glPopClientAttrib, (void))
#define glPopMatrix() glatter_glPopMatrix()
GLATTER_UBLOCK(void, APIENTRY, glPopMatrix, (void))
#define glPopName() glatter_glPopName()
GLATTER_UBLOCK(void, APIENTRY, glPopName, (void))
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures((n), (textures), (priorities))
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTextures, (GLsizei n, const GLuint *textures, const GLclampf *priorities))
#define glPushAttrib(mask) glatter_glPushAttrib((mask))
GLATTER_UBLOCK(void, APIENTRY, glPushAttrib, (GLbitfield mask))
#define glPushClientAttrib(mask) glatter_glPushClientAttrib((mask))
GLATTER_UBLOCK(void, APIENTRY, glPushClientAttrib, (GLbitfield mask))
#define glPushMatrix() glatter_glPushMatrix()
GLATTER_UBLOCK(void, APIENTRY, glPushMatrix, (void))
#define glPushName(name) glatter_glPushName((name))
GLATTER_UBLOCK(void, APIENTRY, glPushName, (GLuint name))
#define glRasterPos2d(x, y) glatter_glRasterPos2d((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2d, (GLdouble x, GLdouble y))
#define glRasterPos2dv(v) glatter_glRasterPos2dv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2dv, (const GLdouble *v))
#define glRasterPos2f(x, y) glatter_glRasterPos2f((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2f, (GLfloat x, GLfloat y))
#define glRasterPos2fv(v) glatter_glRasterPos2fv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2fv, (const GLfloat *v))
#define glRasterPos2i(x, y) glatter_glRasterPos2i((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2i, (GLint x, GLint y))
#define glRasterPos2iv(v) glatter_glRasterPos2iv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2iv, (const GLint *v))
#define glRasterPos2s(x, y) glatter_glRasterPos2s((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2s, (GLshort x, GLshort y))
#define glRasterPos2sv(v) glatter_glRasterPos2sv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2sv, (const GLshort *v))
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3d, (GLdouble x, GLdouble y, GLdouble z))
#define glRasterPos3dv(v) glatter_glRasterPos3dv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3dv, (const GLdouble *v))
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3f, (GLfloat x, GLfloat y, GLfloat z))
#define glRasterPos3fv(v) glatter_glRasterPos3fv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3fv, (const GLfloat *v))
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3i, (GLint x, GLint y, GLint z))
#define glRasterPos3iv(v) glatter_glRasterPos3iv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3iv, (const GLint *v))
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3s, (GLshort x, GLshort y, GLshort z))
#define glRasterPos3sv(v) glatter_glRasterPos3sv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3sv, (const GLshort *v))
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glRasterPos4dv(v) glatter_glRasterPos4dv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4dv, (const GLdouble *v))
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glRasterPos4fv(v) glatter_glRasterPos4fv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4fv, (const GLfloat *v))
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4i, (GLint x, GLint y, GLint z, GLint w))
#define glRasterPos4iv(v) glatter_glRasterPos4iv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4iv, (const GLint *v))
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glRasterPos4sv(v) glatter_glRasterPos4sv((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4sv, (const GLshort *v))
#define glReadBuffer(mode) glatter_glReadBuffer((mode))
GLATTER_UBLOCK(void, APIENTRY, glReadBuffer, (GLenum mode))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels))
#define glRectd(x1, y1, x2, y2) glatter_glRectd((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRectd, (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2))
#define glRectdv(v1, v2) glatter_glRectdv((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectdv, (const GLdouble *v1, const GLdouble *v2))
#define glRectf(x1, y1, x2, y2) glatter_glRectf((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRectf, (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2))
#define glRectfv(v1, v2) glatter_glRectfv((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectfv, (const GLfloat *v1, const GLfloat *v2))
#define glRecti(x1, y1, x2, y2) glatter_glRecti((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRecti, (GLint x1, GLint y1, GLint x2, GLint y2))
#define glRectiv(v1, v2) glatter_glRectiv((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectiv, (const GLint *v1, const GLint *v2))
#define glRects(x1, y1, x2, y2) glatter_glRects((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRects, (GLshort x1, GLshort y1, GLshort x2, GLshort y2))
#define glRectsv(v1, v2) glatter_glRectsv((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectsv, (const GLshort *v1, const GLshort *v2))
#define glRenderMode(mode) glatter_glRenderMode((mode))
GLATTER_UBLOCK(GLint, APIENTRY, glRenderMode, (GLenum mode))
#define glRotated(angle, x, y, z) glatter_glRotated((angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRotated, (GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#define glRotatef(angle, x, y, z) glatter_glRotatef((angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glScaled(x, y, z) glatter_glScaled((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glScaled, (GLdouble x, GLdouble y, GLdouble z))
#define glScalef(x, y, z) glatter_glScalef((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glScalef, (GLfloat x, GLfloat y, GLfloat z))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer((size), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glSelectBuffer, (GLsizei size, GLuint *buffer))
#define glShadeModel(mode) glatter_glShadeModel((mode))
GLATTER_UBLOCK(void, APIENTRY, glShadeModel, (GLenum mode))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexCoord1d(s) glatter_glTexCoord1d((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1d, (GLdouble s))
#define glTexCoord1dv(v) glatter_glTexCoord1dv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1dv, (const GLdouble *v))
#define glTexCoord1f(s) glatter_glTexCoord1f((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1f, (GLfloat s))
#define glTexCoord1fv(v) glatter_glTexCoord1fv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1fv, (const GLfloat *v))
#define glTexCoord1i(s) glatter_glTexCoord1i((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1i, (GLint s))
#define glTexCoord1iv(v) glatter_glTexCoord1iv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1iv, (const GLint *v))
#define glTexCoord1s(s) glatter_glTexCoord1s((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1s, (GLshort s))
#define glTexCoord1sv(v) glatter_glTexCoord1sv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1sv, (const GLshort *v))
#define glTexCoord2d(s, t) glatter_glTexCoord2d((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2d, (GLdouble s, GLdouble t))
#define glTexCoord2dv(v) glatter_glTexCoord2dv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2dv, (const GLdouble *v))
#define glTexCoord2f(s, t) glatter_glTexCoord2f((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2f, (GLfloat s, GLfloat t))
#define glTexCoord2fv(v) glatter_glTexCoord2fv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fv, (const GLfloat *v))
#define glTexCoord2i(s, t) glatter_glTexCoord2i((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2i, (GLint s, GLint t))
#define glTexCoord2iv(v) glatter_glTexCoord2iv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2iv, (const GLint *v))
#define glTexCoord2s(s, t) glatter_glTexCoord2s((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2s, (GLshort s, GLshort t))
#define glTexCoord2sv(v) glatter_glTexCoord2sv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2sv, (const GLshort *v))
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3d, (GLdouble s, GLdouble t, GLdouble r))
#define glTexCoord3dv(v) glatter_glTexCoord3dv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3dv, (const GLdouble *v))
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3f, (GLfloat s, GLfloat t, GLfloat r))
#define glTexCoord3fv(v) glatter_glTexCoord3fv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3fv, (const GLfloat *v))
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3i, (GLint s, GLint t, GLint r))
#define glTexCoord3iv(v) glatter_glTexCoord3iv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3iv, (const GLint *v))
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3s, (GLshort s, GLshort t, GLshort r))
#define glTexCoord3sv(v) glatter_glTexCoord3sv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3sv, (const GLshort *v))
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4d, (GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glTexCoord4dv(v) glatter_glTexCoord4dv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4dv, (const GLdouble *v))
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4f, (GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glTexCoord4fv(v) glatter_glTexCoord4fv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fv, (const GLfloat *v))
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4i, (GLint s, GLint t, GLint r, GLint q))
#define glTexCoord4iv(v) glatter_glTexCoord4iv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4iv, (const GLint *v))
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4s, (GLshort s, GLshort t, GLshort r, GLshort q))
#define glTexCoord4sv(v) glatter_glTexCoord4sv((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4sv, (const GLshort *v))
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glTexEnvf(target, pname, param) glatter_glTexEnvf((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvf, (GLenum target, GLenum pname, GLfloat param))
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexEnvi(target, pname, param) glatter_glTexEnvi((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvi, (GLenum target, GLenum pname, GLint param))
#define glTexEnviv(target, pname, params) glatter_glTexEnviv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexEnviv, (GLenum target, GLenum pname, const GLint *params))
#define glTexGend(coord, pname, param) glatter_glTexGend((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGend, (GLenum coord, GLenum pname, GLdouble param))
#define glTexGendv(coord, pname, params) glatter_glTexGendv((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGendv, (GLenum coord, GLenum pname, const GLdouble *params))
#define glTexGenf(coord, pname, param) glatter_glTexGenf((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGenf, (GLenum coord, GLenum pname, GLfloat param))
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGenfv, (GLenum coord, GLenum pname, const GLfloat *params))
#define glTexGeni(coord, pname, param) glatter_glTexGeni((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGeni, (GLenum coord, GLenum pname, GLint param))
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGeniv, (GLenum coord, GLenum pname, const GLint *params))
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D((target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage1D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glTranslated(x, y, z) glatter_glTranslated((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTranslated, (GLdouble x, GLdouble y, GLdouble z))
#define glTranslatef(x, y, z) glatter_glTranslatef((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTranslatef, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex2d(x, y) glatter_glVertex2d((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2d, (GLdouble x, GLdouble y))
#define glVertex2dv(v) glatter_glVertex2dv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2dv, (const GLdouble *v))
#define glVertex2f(x, y) glatter_glVertex2f((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2f, (GLfloat x, GLfloat y))
#define glVertex2fv(v) glatter_glVertex2fv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2fv, (const GLfloat *v))
#define glVertex2i(x, y) glatter_glVertex2i((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2i, (GLint x, GLint y))
#define glVertex2iv(v) glatter_glVertex2iv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2iv, (const GLint *v))
#define glVertex2s(x, y) glatter_glVertex2s((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2s, (GLshort x, GLshort y))
#define glVertex2sv(v) glatter_glVertex2sv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2sv, (const GLshort *v))
#define glVertex3d(x, y, z) glatter_glVertex3d((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3d, (GLdouble x, GLdouble y, GLdouble z))
#define glVertex3dv(v) glatter_glVertex3dv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3dv, (const GLdouble *v))
#define glVertex3f(x, y, z) glatter_glVertex3f((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3f, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex3fv(v) glatter_glVertex3fv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3fv, (const GLfloat *v))
#define glVertex3i(x, y, z) glatter_glVertex3i((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3i, (GLint x, GLint y, GLint z))
#define glVertex3iv(v) glatter_glVertex3iv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3iv, (const GLint *v))
#define glVertex3s(x, y, z) glatter_glVertex3s((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3s, (GLshort x, GLshort y, GLshort z))
#define glVertex3sv(v) glatter_glVertex3sv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3sv, (const GLshort *v))
#define glVertex4d(x, y, z, w) glatter_glVertex4d((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertex4dv(v) glatter_glVertex4dv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4dv, (const GLdouble *v))
#define glVertex4f(x, y, z, w) glatter_glVertex4f((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertex4fv(v) glatter_glVertex4fv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4fv, (const GLfloat *v))
#define glVertex4i(x, y, z, w) glatter_glVertex4i((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4i, (GLint x, GLint y, GLint z, GLint w))
#define glVertex4iv(v) glatter_glVertex4iv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4iv, (const GLint *v))
#define glVertex4s(x, y, z, w) glatter_glVertex4s((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertex4sv(v) glatter_glVertex4sv((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4sv, (const GLshort *v))
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(__gl_h_)
#endif // defined(__GL_H__)
#endif // !defined(GL_VERSION_ES_CM_1_0)
#if defined(GL_VERSION_ES_CM_1_0)
#if !defined(__GL_H__)
#if defined(__gl_h_)
#if defined(GL_OES_point_size_array)
#define glPointSizePointerOES(type, stride, pointer) glatter_glPointSizePointerOES((type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSizePointerOES, (GLenum type, GLsizei stride, const GLvoid *pointer))
#endif // defined(GL_OES_point_size_array)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAlphaFunc(func, ref) glatter_glAlphaFunc((func), (ref))
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFunc, (GLenum func, GLclampf ref))
#define glAlphaFuncx(func, ref) glatter_glAlphaFuncx((func), (ref))
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFuncx, (GLenum func, GLclampx ref))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glClearColorx(red, green, blue, alpha) glatter_glClearColorx((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColorx, (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha))
#define glClearDepthf(depth) glatter_glClearDepthf((depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLclampf depth))
#define glClearDepthx(depth) glatter_glClearDepthx((depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthx, (GLclampx depth))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glClientActiveTexture(texture) glatter_glClientActiveTexture((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glClientActiveTexture, (GLenum texture))
#define glClipPlanef(plane, equation) glatter_glClipPlanef((plane), (equation))
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanef, (GLenum plane, const GLfloat *equation))
#define glClipPlanex(plane, equation) glatter_glClipPlanex((plane), (equation))
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanex, (GLenum plane, const GLfixed *equation))
#define glColor4f(red, green, blue, alpha) glatter_glColor4f((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#define glColor4x(red, green, blue, alpha) glatter_glColor4x((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4x, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(zNear, zFar) glatter_glDepthRangef((zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLclampf zNear, GLclampf zFar))
#define glDepthRangex(zNear, zFar) glatter_glDepthRangex((zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangex, (GLclampx zNear, GLclampx zFar))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableClientState(array) glatter_glDisableClientState((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableClientState, (GLenum array))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableClientState(array) glatter_glEnableClientState((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableClientState, (GLenum array))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFogf(pname, param) glatter_glFogf((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogf, (GLenum pname, GLfloat param))
#define glFogfv(pname, params) glatter_glFogfv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogfv, (GLenum pname, const GLfloat *params))
#define glFogx(pname, param) glatter_glFogx((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogx, (GLenum pname, GLfixed param))
#define glFogxv(pname, params) glatter_glFogxv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogxv, (GLenum pname, const GLfixed *params))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glFrustumf(left, right, bottom, top, zNear, zFar) glatter_glFrustumf((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumf, (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar))
#define glFrustumx(left, right, bottom, top, zNear, zFar) glatter_glFrustumx((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumx, (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetBooleanv(pname, params) glatter_glGetBooleanv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *params))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetClipPlanef(pname, eqn) glatter_glGetClipPlanef((pname), (eqn))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanef, (GLenum pname, GLfloat eqn[4]))
#define glGetClipPlanex(pname, eqn) glatter_glGetClipPlanex((pname), (eqn))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanex, (GLenum pname, GLfixed eqn[4]))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFixedv(pname, params) glatter_glGetFixedv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFixedv, (GLenum pname, GLfixed *params))
#define glGetFloatv(pname, params) glatter_glGetFloatv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *params))
#define glGetIntegerv(pname, params) glatter_glGetIntegerv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *params))
#define glGetLightfv(light, pname, params) glatter_glGetLightfv((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetLightfv, (GLenum light, GLenum pname, GLfloat *params))
#define glGetLightxv(light, pname, params) glatter_glGetLightxv((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetLightxv, (GLenum light, GLenum pname, GLfixed *params))
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat *params))
#define glGetMaterialxv(face, pname, params) glatter_glGetMaterialxv((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMaterialxv, (GLenum face, GLenum pname, GLfixed *params))
#define glGetPointerv(pname, params) glatter_glGetPointerv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPointerv, (GLenum pname, GLvoid **params))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexEnvfv(env, pname, params) glatter_glGetTexEnvfv((env), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnvfv, (GLenum env, GLenum pname, GLfloat *params))
#define glGetTexEnviv(env, pname, params) glatter_glGetTexEnviv((env), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnviv, (GLenum env, GLenum pname, GLint *params))
#define glGetTexEnvxv(env, pname, params) glatter_glGetTexEnvxv((env), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnvxv, (GLenum env, GLenum pname, GLfixed *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterxv(target, pname, params) glatter_glGetTexParameterxv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterxv, (GLenum target, GLenum pname, GLfixed *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLightModelf(pname, param) glatter_glLightModelf((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelf, (GLenum pname, GLfloat param))
#define glLightModelfv(pname, params) glatter_glLightModelfv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelfv, (GLenum pname, const GLfloat *params))
#define glLightModelx(pname, param) glatter_glLightModelx((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelx, (GLenum pname, GLfixed param))
#define glLightModelxv(pname, params) glatter_glLightModelxv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelxv, (GLenum pname, const GLfixed *params))
#define glLightf(light, pname, param) glatter_glLightf((light), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightf, (GLenum light, GLenum pname, GLfloat param))
#define glLightfv(light, pname, params) glatter_glLightfv((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightfv, (GLenum light, GLenum pname, const GLfloat *params))
#define glLightx(light, pname, param) glatter_glLightx((light), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightx, (GLenum light, GLenum pname, GLfixed param))
#define glLightxv(light, pname, params) glatter_glLightxv((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightxv, (GLenum light, GLenum pname, const GLfixed *params))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLineWidthx(width) glatter_glLineWidthx((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidthx, (GLfixed width))
#define glLoadIdentity() glatter_glLoadIdentity()
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadIdentity, (void))
#define glLoadMatrixf(m) glatter_glLoadMatrixf((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadMatrixf, (const GLfloat *m))
#define glLoadMatrixx(m) glatter_glLoadMatrixx((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadMatrixx, (const GLfixed *m))
#define glLogicOp(opcode) glatter_glLogicOp((opcode))
GLATTER_UBLOCK(void, GL_APIENTRY, glLogicOp, (GLenum opcode))
#define glMaterialf(face, pname, param) glatter_glMaterialf((face), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialf, (GLenum face, GLenum pname, GLfloat param))
#define glMaterialfv(face, pname, params) glatter_glMaterialfv((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialfv, (GLenum face, GLenum pname, const GLfloat *params))
#define glMaterialx(face, pname, param) glatter_glMaterialx((face), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialx, (GLenum face, GLenum pname, GLfixed param))
#define glMaterialxv(face, pname, params) glatter_glMaterialxv((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialxv, (GLenum face, GLenum pname, const GLfixed *params))
#define glMatrixMode(mode) glatter_glMatrixMode((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMode, (GLenum mode))
#define glMultMatrixf(m) glatter_glMultMatrixf((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultMatrixf, (const GLfloat *m))
#define glMultMatrixx(m) glatter_glMultMatrixx((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultMatrixx, (const GLfixed *m))
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4x(target, s, t, r, q) glatter_glMultiTexCoord4x((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiTexCoord4x, (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glNormal3f(nx, ny, nz) glatter_glNormal3f((nx), (ny), (nz))
GLATTER_UBLOCK(void, GL_APIENTRY, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormal3x(nx, ny, nz) glatter_glNormal3x((nx), (ny), (nz))
GLATTER_UBLOCK(void, GL_APIENTRY, glNormal3x, (GLfixed nx, GLfixed ny, GLfixed nz))
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer((type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glNormalPointer, (GLenum type, GLsizei stride, const GLvoid *pointer))
#define glOrthof(left, right, bottom, top, zNear, zFar) glatter_glOrthof((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthof, (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar))
#define glOrthox(left, right, bottom, top, zNear, zFar) glatter_glOrthox((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthox, (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPointParameterf(pname, param) glatter_glPointParameterf((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#define glPointParameterfv(pname, params) glatter_glPointParameterfv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#define glPointParameterx(pname, param) glatter_glPointParameterx((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterx, (GLenum pname, GLfixed param))
#define glPointParameterxv(pname, params) glatter_glPointParameterxv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterxv, (GLenum pname, const GLfixed *params))
#define glPointSize(size) glatter_glPointSize((size))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSize, (GLfloat size))
#define glPointSizex(size) glatter_glPointSizex((size))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSizex, (GLfixed size))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glPolygonOffsetx(factor, units) glatter_glPolygonOffsetx((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffsetx, (GLfixed factor, GLfixed units))
#define glPopMatrix() glatter_glPopMatrix()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopMatrix, (void))
#define glPushMatrix() glatter_glPushMatrix()
GLATTER_UBLOCK(void, GL_APIENTRY, glPushMatrix, (void))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels))
#define glRotatef(angle, x, y, z) glatter_glRotatef((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glRotatex(angle, x, y, z) glatter_glRotatex((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glRotatex, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLclampf value, GLboolean invert))
#define glSampleCoveragex(value, invert) glatter_glSampleCoveragex((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoveragex, (GLclampx value, GLboolean invert))
#define glScalef(x, y, z) glatter_glScalef((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glScalef, (GLfloat x, GLfloat y, GLfloat z))
#define glScalex(x, y, z) glatter_glScalex((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glScalex, (GLfixed x, GLfixed y, GLfixed z))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShadeModel(mode) glatter_glShadeModel((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glShadeModel, (GLenum mode))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glTexEnvf(target, pname, param) glatter_glTexEnvf((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvf, (GLenum target, GLenum pname, GLfloat param))
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexEnvi(target, pname, param) glatter_glTexEnvi((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvi, (GLenum target, GLenum pname, GLint param))
#define glTexEnviv(target, pname, params) glatter_glTexEnviv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnviv, (GLenum target, GLenum pname, const GLint *params))
#define glTexEnvx(target, pname, param) glatter_glTexEnvx((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvx, (GLenum target, GLenum pname, GLfixed param))
#define glTexEnvxv(target, pname, params) glatter_glTexEnvxv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvxv, (GLenum target, GLenum pname, const GLfixed *params))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterx(target, pname, param) glatter_glTexParameterx((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterx, (GLenum target, GLenum pname, GLfixed param))
#define glTexParameterxv(target, pname, params) glatter_glTexParameterxv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterxv, (GLenum target, GLenum pname, const GLfixed *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glTranslatef(x, y, z) glatter_glTranslatef((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glTranslatef, (GLfloat x, GLfloat y, GLfloat z))
#define glTranslatex(x, y, z) glatter_glTranslatex((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glTranslatex, (GLfixed x, GLfixed y, GLfixed z))
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(__gl_h_)
#endif // !defined(__GL_H__)
#endif // defined(GL_VERSION_ES_CM_1_0)
#if defined(__gl2_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#endif // defined(__gl2_h_)
#if defined(__gl2ext_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD((monitor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginPerfMonitorAMD, (GLuint monitor))
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD((n), (monitors))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeletePerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD((monitor))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndPerfMonitorAMD, (GLuint monitor))
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD((n), (monitors))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenPerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD((monitor), (pname), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten))
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD((group), (counter), (pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void *data))
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD((group), (counter), (bufSize), (length), (counterString))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString))
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD((group), (numCounters), (maxActiveCounters), (counterSize), (counters))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCountersAMD, (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters))
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD((group), (bufSize), (length), (groupString))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString))
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD((numGroups), (groupsSize), (groups))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorGroupsAMD, (GLint *numGroups, GLsizei groupsSize, GLuint *groups))
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD((monitor), (enable), (group), (numCounters), (counterList))
GLATTER_UBLOCK(void, GL_APIENTRY, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList))
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ANGLE_framebuffer_blit)
#define glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferANGLE((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebufferANGLE, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_ANGLE_framebuffer_blit)
#if defined(GL_ANGLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleANGLE((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleANGLE, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_ANGLE_framebuffer_multisample)
#if defined(GL_ANGLE_instanced_arrays)
#define glDrawArraysInstancedANGLE(mode, first, count, primcount) glatter_glDrawArraysInstancedANGLE((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedANGLE, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedANGLE((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedANGLE, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#define glVertexAttribDivisorANGLE(index, divisor) glatter_glVertexAttribDivisorANGLE((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisorANGLE, (GLuint index, GLuint divisor))
#endif // defined(GL_ANGLE_instanced_arrays)
#if defined(GL_ANGLE_translated_shader_source)
#define glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source) glatter_glGetTranslatedShaderSourceANGLE((shader), (bufsize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTranslatedShaderSourceANGLE, (GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source))
#endif // defined(GL_ANGLE_translated_shader_source)
#if defined(GL_APPLE_copy_texture_levels)
#define glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) glatter_glCopyTextureLevelsAPPLE((destinationTexture), (sourceTexture), (sourceBaseLevel), (sourceLevelCount))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTextureLevelsAPPLE, (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount))
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAPPLE((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleAPPLE, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResolveMultisampleFramebufferAPPLE() glatter_glResolveMultisampleFramebufferAPPLE()
GLATTER_UBLOCK(void, GL_APIENTRY, glResolveMultisampleFramebufferAPPLE, (void))
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
#define glClientWaitSyncAPPLE(sync, flags, timeout) glatter_glClientWaitSyncAPPLE((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glDeleteSyncAPPLE(sync) glatter_glDeleteSyncAPPLE((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSyncAPPLE, (GLsync sync))
#define glFenceSyncAPPLE(condition, flags) glatter_glFenceSyncAPPLE((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSyncAPPLE, (GLenum condition, GLbitfield flags))
#define glGetInteger64vAPPLE(pname, params) glatter_glGetInteger64vAPPLE((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64vAPPLE, (GLenum pname, GLint64 *params))
#define glGetSyncivAPPLE(sync, pname, bufSize, length, values) glatter_glGetSyncivAPPLE((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSyncivAPPLE, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glIsSyncAPPLE(sync) glatter_glIsSyncAPPLE((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSyncAPPLE, (GLsync sync))
#define glWaitSyncAPPLE(sync, flags, timeout) glatter_glWaitSyncAPPLE((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_base_instance)
#define glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstanceEXT((mode), (first), (count), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedBaseInstanceEXT, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstanceEXT((mode), (count), (type), (indices), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseInstanceEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertexBaseInstanceEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#endif // defined(GL_EXT_base_instance)
#if defined(GL_EXT_blend_func_extended)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT((program), (color), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFragDataLocationEXT, (GLuint program, GLuint color, const GLchar *name))
#define glBindFragDataLocationIndexedEXT(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexedEXT((program), (colorNumber), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFragDataLocationIndexedEXT, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#define glGetFragDataIndexEXT(program, name) glatter_glGetFragDataIndexEXT((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataIndexEXT, (GLuint program, const GLchar *name))
#define glGetProgramResourceLocationIndexEXT(program, programInterface, name) glatter_glGetProgramResourceLocationIndexEXT((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetProgramResourceLocationIndexEXT, (GLuint program, GLenum programInterface, const GLchar *name))
#endif // defined(GL_EXT_blend_func_extended)
#if defined(GL_EXT_buffer_storage)
#define glBufferStorageEXT(target, size, data, flags) glatter_glBufferStorageEXT((target), (size), (data), (flags))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferStorageEXT, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#endif // defined(GL_EXT_buffer_storage)
#if defined(GL_EXT_clear_texture)
#define glClearTexImageEXT(texture, level, format, type, data) glatter_glClearTexImageEXT((texture), (level), (format), (type), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearTexImageEXT, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#define glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImageEXT((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearTexSubImageEXT, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_EXT_clear_texture)
#if defined(GL_EXT_copy_image)
#define glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataEXT((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyImageSubDataEXT, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#endif // defined(GL_EXT_copy_image)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT((type), (object), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT((type), (object), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar *label))
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT((length), (marker))
GLATTER_UBLOCK(void, GL_APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopGroupMarkerEXT, (void))
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT((length), (marker))
GLATTER_UBLOCK(void, GL_APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
#define glDiscardFramebufferEXT(target, numAttachments, attachments) glatter_glDiscardFramebufferEXT((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glDiscardFramebufferEXT, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_disjoint_timer_query)
#define glBeginQueryEXT(target, id) glatter_glBeginQueryEXT((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQueryEXT, (GLenum target, GLuint id))
#define glDeleteQueriesEXT(n, ids) glatter_glDeleteQueriesEXT((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueriesEXT, (GLsizei n, const GLuint *ids))
#define glEndQueryEXT(target) glatter_glEndQueryEXT((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQueryEXT, (GLenum target))
#define glGenQueriesEXT(n, ids) glatter_glGenQueriesEXT((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueriesEXT, (GLsizei n, GLuint *ids))
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjecti64vEXT, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectivEXT(id, pname, params) glatter_glGetQueryObjectivEXT((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectivEXT, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectui64vEXT, (GLuint id, GLenum pname, GLuint64 *params))
#define glGetQueryObjectuivEXT(id, pname, params) glatter_glGetQueryObjectuivEXT((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuivEXT, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryivEXT(target, pname, params) glatter_glGetQueryivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryivEXT, (GLenum target, GLenum pname, GLint *params))
#define glIsQueryEXT(id) glatter_glIsQueryEXT((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQueryEXT, (GLuint id))
#define glQueryCounterEXT(id, target) glatter_glQueryCounterEXT((id), (target))
GLATTER_UBLOCK(void, GL_APIENTRY, glQueryCounterEXT, (GLuint id, GLenum target))
#endif // defined(GL_EXT_disjoint_timer_query)
#if defined(GL_EXT_draw_buffers)
#define glDrawBuffersEXT(n, bufs) glatter_glDrawBuffersEXT((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffersEXT, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_EXT_draw_buffers)
#if defined(GL_EXT_draw_buffers_indexed)
#define glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiEXT((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparateiEXT, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiEXT(buf, mode) glatter_glBlendEquationiEXT((buf), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationiEXT, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiEXT((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparateiEXT, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciEXT(buf, src, dst) glatter_glBlendFunciEXT((buf), (src), (dst))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunciEXT, (GLuint buf, GLenum src, GLenum dst))
#define glColorMaskiEXT(index, r, g, b, a) glatter_glColorMaskiEXT((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMaskiEXT, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDisableiEXT(target, index) glatter_glDisableiEXT((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableiEXT, (GLenum target, GLuint index))
#define glEnableiEXT(target, index) glatter_glEnableiEXT((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableiEXT, (GLenum target, GLuint index))
#define glIsEnablediEXT(target, index) glatter_glIsEnablediEXT((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnablediEXT, (GLenum target, GLuint index))
#endif // defined(GL_EXT_draw_buffers_indexed)
#if defined(GL_EXT_draw_elements_base_vertex)
#define glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexEXT((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsBaseVertexEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexEXT((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertexEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexEXT((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElementsBaseVertexEXT, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexEXT((mode), (count), (type), (indices), (primcount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsBaseVertexEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex))
#endif // defined(GL_EXT_draw_elements_base_vertex)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT((mode), (start), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_transform_feedback)
#define glDrawTransformFeedbackEXT(mode, id) glatter_glDrawTransformFeedbackEXT((mode), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTransformFeedbackEXT, (GLenum mode, GLuint id))
#define glDrawTransformFeedbackInstancedEXT(mode, id, instancecount) glatter_glDrawTransformFeedbackInstancedEXT((mode), (id), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTransformFeedbackInstancedEXT, (GLenum mode, GLuint id, GLsizei instancecount))
#endif // defined(GL_EXT_draw_transform_feedback)
#if defined(GL_EXT_geometry_shader)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#endif // defined(GL_EXT_geometry_shader)
#if defined(GL_EXT_instanced_arrays)
#define glVertexAttribDivisorEXT(index, divisor) glatter_glVertexAttribDivisorEXT((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisorEXT, (GLuint index, GLuint divisor))
#endif // defined(GL_EXT_instanced_arrays)
#if defined(GL_EXT_map_buffer_range)
#define glFlushMappedBufferRangeEXT(target, offset, length) glatter_glFlushMappedBufferRangeEXT((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glMapBufferRangeEXT(target, offset, length, access) glatter_glMapBufferRangeEXT((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawArraysEXT, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount))
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multi_draw_indirect)
#define glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirectEXT((mode), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawArraysIndirectEXT, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirectEXT((mode), (type), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsIndirectEXT, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#endif // defined(GL_EXT_multi_draw_indirect)
#if defined(GL_EXT_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleEXT((target), (attachment), (textarget), (texture), (level), (samples))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DMultisampleEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_multiview_draw_buffers)
#define glDrawBuffersIndexedEXT(n, location, indices) glatter_glDrawBuffersIndexedEXT((n), (location), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffersIndexedEXT, (GLint n, const GLenum *location, const GLint *indices))
#define glGetIntegeri_vEXT(target, index, data) glatter_glGetIntegeri_vEXT((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_vEXT, (GLenum target, GLuint index, GLint *data))
#define glReadBufferIndexedEXT(src, index) glatter_glReadBufferIndexedEXT((src), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBufferIndexedEXT, (GLenum src, GLint index))
#endif // defined(GL_EXT_multiview_draw_buffers)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT((factor), (units), (clamp))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp))
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_primitive_bounding_box)
#define glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxEXT((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, GL_APIENTRY, glPrimitiveBoundingBoxEXT, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_EXT_primitive_bounding_box)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT((samples), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations))
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_robustness)
#define glGetGraphicsResetStatusEXT() glatter_glGetGraphicsResetStatusEXT()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetGraphicsResetStatusEXT, (void))
#define glGetnUniformfvEXT(program, location, bufSize, params) glatter_glGetnUniformfvEXT((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformfvEXT, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivEXT(program, location, bufSize, params) glatter_glGetnUniformivEXT((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformivEXT, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsEXT((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadnPixelsEXT, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveShaderProgramEXT(pipeline, program) glatter_glActiveShaderProgramEXT((pipeline), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveShaderProgramEXT, (GLuint pipeline, GLuint program))
#define glBindProgramPipelineEXT(pipeline) glatter_glBindProgramPipelineEXT((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindProgramPipelineEXT, (GLuint pipeline))
#define glCreateShaderProgramvEXT(type, count, strings) glatter_glCreateShaderProgramvEXT((type), (count), (strings))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShaderProgramvEXT, (GLenum type, GLsizei count, const GLchar **strings))
#define glDeleteProgramPipelinesEXT(n, pipelines) glatter_glDeleteProgramPipelinesEXT((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgramPipelinesEXT, (GLsizei n, const GLuint *pipelines))
#define glGenProgramPipelinesEXT(n, pipelines) glatter_glGenProgramPipelinesEXT((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenProgramPipelinesEXT, (GLsizei n, GLuint *pipelines))
#define glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLogEXT((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineInfoLogEXT, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineivEXT(pipeline, pname, params) glatter_glGetProgramPipelineivEXT((pipeline), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineivEXT, (GLuint pipeline, GLenum pname, GLint *params))
#define glIsProgramPipelineEXT(pipeline) glatter_glIsProgramPipelineEXT((pipeline))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgramPipelineEXT, (GLuint pipeline))
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteriEXT, (GLuint program, GLenum pname, GLint value))
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fEXT, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1iEXT, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uiEXT, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2iEXT, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgramStagesEXT(pipeline, stages, program) glatter_glUseProgramStagesEXT((pipeline), (stages), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgramStagesEXT, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipelineEXT(pipeline) glatter_glValidateProgramPipelineEXT((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgramPipelineEXT, (GLuint pipeline))
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_pixel_local_storage2)
#define glClearPixelLocalStorageuiEXT(offset, n, values) glatter_glClearPixelLocalStorageuiEXT((offset), (n), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearPixelLocalStorageuiEXT, (GLsizei offset, GLsizei n, const GLuint *values))
#define glFramebufferPixelLocalStorageSizeEXT(target, size) glatter_glFramebufferPixelLocalStorageSizeEXT((target), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferPixelLocalStorageSizeEXT, (GLuint target, GLsizei size))
#define glGetFramebufferPixelLocalStorageSizeEXT(target) glatter_glGetFramebufferPixelLocalStorageSizeEXT((target))
GLATTER_UBLOCK(GLsizei, GL_APIENTRY, glGetFramebufferPixelLocalStorageSizeEXT, (GLuint target))
#endif // defined(GL_EXT_shader_pixel_local_storage2)
#if defined(GL_EXT_sparse_texture)
#define glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentEXT((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexPageCommitmentEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#endif // defined(GL_EXT_sparse_texture)
#if defined(GL_EXT_tessellation_shader)
#define glPatchParameteriEXT(pname, value) glatter_glPatchParameteriEXT((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPatchParameteriEXT, (GLenum pname, GLint value))
#endif // defined(GL_EXT_tessellation_shader)
#if defined(GL_EXT_texture_border_clamp)
#define glGetSamplerParameterIivEXT(sampler, pname, params) glatter_glGetSamplerParameterIivEXT((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIivEXT, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuivEXT(sampler, pname, params) glatter_glGetSamplerParameterIuivEXT((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIuivEXT, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIuivEXT, (GLenum target, GLenum pname, GLuint *params))
#define glSamplerParameterIivEXT(sampler, pname, param) glatter_glSamplerParameterIivEXT((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIivEXT, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuivEXT(sampler, pname, param) glatter_glSamplerParameterIuivEXT((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIuivEXT, (GLuint sampler, GLenum pname, const GLuint *param))
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIivEXT, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIuivEXT, (GLenum target, GLenum pname, const GLuint *params))
#endif // defined(GL_EXT_texture_border_clamp)
#if defined(GL_EXT_texture_buffer)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferEXT, (GLenum target, GLenum internalformat, GLuint buffer))
#define glTexBufferRangeEXT(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeEXT((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferRangeEXT, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#endif // defined(GL_EXT_texture_buffer)
#if defined(GL_EXT_texture_storage)
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT((target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage1DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT((texture), (target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT((texture), (target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT((texture), (target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_EXT_texture_view)
#define glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewEXT((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureViewEXT, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#endif // defined(GL_EXT_texture_view)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT((mode), (count), (box))
GLATTER_UBLOCK(void, GL_APIENTRY, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint *box))
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_IMG_bindless_texture)
#define glGetTextureHandleIMG(texture) glatter_glGetTextureHandleIMG((texture))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureHandleIMG, (GLuint texture))
#define glGetTextureSamplerHandleIMG(texture, sampler) glatter_glGetTextureSamplerHandleIMG((texture), (sampler))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureSamplerHandleIMG, (GLuint texture, GLuint sampler))
#define glProgramUniformHandleui64IMG(program, location, value) glatter_glProgramUniformHandleui64IMG((program), (location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64IMG, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vIMG(program, location, count, values) glatter_glProgramUniformHandleui64vIMG((program), (location), (count), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64vIMG, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64IMG(location, value) glatter_glUniformHandleui64IMG((location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64IMG, (GLint location, GLuint64 value))
#define glUniformHandleui64vIMG(location, count, value) glatter_glUniformHandleui64vIMG((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64vIMG, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_IMG_bindless_texture)
#if defined(GL_IMG_framebuffer_downsample)
#define glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale) glatter_glFramebufferTexture2DDownsampleIMG((target), (attachment), (textarget), (texture), (level), (xscale), (yscale))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DDownsampleIMG, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale))
#define glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale) glatter_glFramebufferTextureLayerDownsampleIMG((target), (attachment), (texture), (level), (layer), (xscale), (yscale))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayerDownsampleIMG, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale))
#endif // defined(GL_IMG_framebuffer_downsample)
#if defined(GL_IMG_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleIMG((target), (attachment), (textarget), (texture), (level), (samples))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DMultisampleIMG, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#define glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleIMG((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleIMG, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL()
GLATTER_UBLOCK(void, GL_APIENTRY, glApplyFramebufferAttachmentCMAAINTEL, (void))
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginPerfQueryINTEL, (GLuint queryHandle))
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL((queryId), (queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glCreatePerfQueryINTEL, (GLuint queryId, GLuint *queryHandle))
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeletePerfQueryINTEL, (GLuint queryHandle))
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndPerfQueryINTEL, (GLuint queryHandle))
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL((queryId))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFirstPerfQueryIdINTEL, (GLuint *queryId))
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL((queryId), (nextQueryId))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint *nextQueryId))
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue))
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL((queryHandle), (flags), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten))
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL((queryName), (queryId))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfQueryIdByNameINTEL, (GLchar *queryName, GLuint *queryId))
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask))
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR()
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendBarrierKHR, (void))
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_debug)
#define glDebugMessageCallbackKHR(callback, userParam) glatter_glDebugMessageCallbackKHR((callback), (userParam))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageCallbackKHR, (GLDEBUGPROCKHR callback, const void *userParam))
#define glDebugMessageControlKHR(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlKHR((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageControlKHR, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertKHR(source, type, id, severity, length, buf) glatter_glDebugMessageInsertKHR((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageInsertKHR, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogKHR((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetDebugMessageLogKHR, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetObjectLabelKHR(identifier, name, bufSize, length, label) glatter_glGetObjectLabelKHR((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectLabelKHR, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabelKHR(ptr, bufSize, length, label) glatter_glGetObjectPtrLabelKHR((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectPtrLabelKHR, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetPointervKHR(pname, params) glatter_glGetPointervKHR((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPointervKHR, (GLenum pname, void **params))
#define glObjectLabelKHR(identifier, name, length, label) glatter_glObjectLabelKHR((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectLabelKHR, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabelKHR(ptr, length, label) glatter_glObjectPtrLabelKHR((ptr), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectPtrLabelKHR, (const void *ptr, GLsizei length, const GLchar *label))
#define glPopDebugGroupKHR() glatter_glPopDebugGroupKHR()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopDebugGroupKHR, (void))
#define glPushDebugGroupKHR(source, id, length, message) glatter_glPushDebugGroupKHR((source), (id), (length), (message))
GLATTER_UBLOCK(void, GL_APIENTRY, glPushDebugGroupKHR, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#endif // defined(GL_KHR_debug)
#if defined(GL_KHR_robustness)
#define glGetGraphicsResetStatusKHR() glatter_glGetGraphicsResetStatusKHR()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetGraphicsResetStatusKHR, (void))
#define glGetnUniformfvKHR(program, location, bufSize, params) glatter_glGetnUniformfvKHR((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformfvKHR, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivKHR(program, location, bufSize, params) glatter_glGetnUniformivKHR((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformivKHR, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuivKHR(program, location, bufSize, params) glatter_glGetnUniformuivKHR((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformuivKHR, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsKHR((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadnPixelsKHR, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_KHR_robustness)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV((texture))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureHandleNV, (GLuint texture))
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV((texture), (sampler))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler))
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV((handle))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsImageHandleResidentNV, (GLuint64 handle))
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV((handle))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTextureHandleResidentNV, (GLuint64 handle))
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV((handle))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeImageHandleNonResidentNV, (GLuint64 handle))
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV((handle), (access))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV((handle))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeTextureHandleNonResidentNV, (GLuint64 handle))
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV((handle))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeTextureHandleResidentNV, (GLuint64 handle))
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV((program), (location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV((program), (location), (count), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV((location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64NV, (GLint location, GLuint64 value))
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV()
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendBarrierNV, (void))
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendParameteriNV, (GLenum pname, GLint value))
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV((id), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginConditionalRenderNV, (GLuint id, GLenum mode))
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndConditionalRenderNV, (void))
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV((xbits), (ybits))
GLATTER_UBLOCK(void, GL_APIENTRY, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits))
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glConservativeRasterParameteriNV, (GLenum pname, GLint param))
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_buffer)
#define glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubDataNV((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubDataNV, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#endif // defined(GL_NV_copy_buffer)
#if defined(GL_NV_coverage_sample)
#define glCoverageMaskNV(mask) glatter_glCoverageMaskNV((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageMaskNV, (GLboolean mask))
#define glCoverageOperationNV(operation) glatter_glCoverageOperationNV((operation))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageOperationNV, (GLenum operation))
#endif // defined(GL_NV_coverage_sample)
#if defined(GL_NV_draw_buffers)
#define glDrawBuffersNV(n, bufs) glatter_glDrawBuffersNV((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffersNV, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_NV_draw_buffers)
#if defined(GL_NV_draw_instanced)
#define glDrawArraysInstancedNV(mode, first, count, primcount) glatter_glDrawArraysInstancedNV((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedNV, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedNV(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedNV((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedNV, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_NV_draw_instanced)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV((n), (fences))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFencesNV, (GLsizei n, const GLuint *fences))
#define glFinishFenceNV(fence) glatter_glFinishFenceNV((fence))
GLATTER_UBLOCK(void, GL_APIENTRY, glFinishFenceNV, (GLuint fence))
#define glGenFencesNV(n, fences) glatter_glGenFencesNV((n), (fences))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFencesNV, (GLsizei n, GLuint *fences))
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV((fence), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFenceivNV, (GLuint fence, GLenum pname, GLint *params))
#define glIsFenceNV(fence) glatter_glIsFenceNV((fence))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFenceNV, (GLuint fence))
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV((fence), (condition))
GLATTER_UBLOCK(void, GL_APIENTRY, glSetFenceNV, (GLuint fence, GLenum condition))
#define glTestFenceNV(fence) glatter_glTestFenceNV((fence))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glTestFenceNV, (GLuint fence))
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV((color))
GLATTER_UBLOCK(void, GL_APIENTRY, glFragmentCoverageColorNV, (GLuint color))
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_blit)
#define glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferNV((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebufferNV, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_NV_framebuffer_blit)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV((components))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageModulationNV, (GLenum components))
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV((n), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageModulationTableNV, (GLsizei n, const GLfloat *v))
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV((bufsize), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetCoverageModulationTableNV, (GLsizei bufsize, GLfloat *v))
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample)
#define glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleNV((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleNV, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_NV_framebuffer_multisample)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT *params))
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV((program), (location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x))
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV((program), (location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x))
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV((program), (location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y))
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV((program), (location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y))
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV((location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i64NV, (GLint location, GLint64EXT x))
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV((location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui64NV, (GLint location, GLuint64EXT x))
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV((location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y))
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV((location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y))
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV((location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV((location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_instanced_arrays)
#define glVertexAttribDivisorNV(index, divisor) glatter_glVertexAttribDivisorNV((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisorNV, (GLuint index, GLuint divisor))
#endif // defined(GL_NV_instanced_arrays)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV((target), (internalformat), (samples), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params))
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_non_square_matrices)
#define glUniformMatrix2x3fvNV(location, count, transpose, value) glatter_glUniformMatrix2x3fvNV((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fvNV(location, count, transpose, value) glatter_glUniformMatrix2x4fvNV((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fvNV(location, count, transpose, value) glatter_glUniformMatrix3x2fvNV((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fvNV(location, count, transpose, value) glatter_glUniformMatrix3x4fvNV((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fvNV(location, count, transpose, value) glatter_glUniformMatrix4x2fvNV((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fvNV(location, count, transpose, value) glatter_glUniformMatrix4x3fvNV((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_NV_non_square_matrices)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV((resultPath), (srcPath))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyPathNV, (GLuint resultPath, GLuint srcPath))
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV((path), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverFillPathNV, (GLuint path, GLenum coverMode))
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV((path), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverStrokePathNV, (GLuint path, GLenum coverMode))
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV((path), (range))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeletePathsNV, (GLuint path, GLsizei range))
#define glGenPathsNV(range) glatter_glGenPathsNV((range))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGenPathsNV, (GLsizei range))
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV((path), (commands))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathCommandsNV, (GLuint path, GLubyte *commands))
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV((path), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathCoordsNV, (GLuint path, GLfloat *coords))
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV((path), (dashArray))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathDashArrayNV, (GLuint path, GLfloat *dashArray))
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV((path), (startSegment), (numSegments))
GLATTER_UBLOCK(GLfloat, GL_APIENTRY, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments))
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics))
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics))
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat *value))
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint *value))
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing))
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params))
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV((resultPath), (pathA), (pathB), (weight))
GLATTER_UBLOCK(void, GL_APIENTRY, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight))
#define glIsPathNV(path) glatter_glIsPathNV((path))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsPathNV, (GLuint path))
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV((path), (mask), (x), (y))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y))
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV((path), (x), (y))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y))
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV((path), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV((path), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathCoverDepthFuncNV, (GLenum func))
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV((path), (dashCount), (dashArray))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat *dashArray))
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]))
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value))
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat *value))
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameteriNV, (GLuint path, GLenum pname, GLint value))
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameterivNV, (GLuint path, GLenum pname, const GLint *value))
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units))
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask))
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV((path), (format), (length), (pathString))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void *pathString))
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV((path), (coordStart), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY))
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV((program), (location), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV((path), (fillMode), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask))
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV((path), (reference), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask))
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV((path), (fillMode), (mask), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode))
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV((path), (reference), (mask), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode))
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV((resultPath), (srcPath), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues))
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV((resultPath), (numPaths), (paths), (weights))
GLATTER_UBLOCK(void, GL_APIENTRY, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights))
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_polygon_mode)
#define glPolygonModeNV(face, mode) glatter_glPolygonModeNV((face), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonModeNV, (GLenum face, GLenum mode))
#endif // defined(GL_NV_polygon_mode)
#if defined(GL_NV_read_buffer)
#define glReadBufferNV(mode) glatter_glReadBufferNV((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBufferNV, (GLenum mode))
#endif // defined(GL_NV_read_buffer)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV((target), (start), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV()
GLATTER_UBLOCK(void, GL_APIENTRY, glResolveDepthValuesNV, (void))
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_viewport_array)
#define glDepthRangeArrayfvNV(first, count, v) glatter_glDepthRangeArrayfvNV((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeArrayfvNV, (GLuint first, GLsizei count, const GLfloat *v))
#define glDepthRangeIndexedfNV(index, n, f) glatter_glDepthRangeIndexedfNV((index), (n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeIndexedfNV, (GLuint index, GLfloat n, GLfloat f))
#define glDisableiNV(target, index) glatter_glDisableiNV((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableiNV, (GLenum target, GLuint index))
#define glEnableiNV(target, index) glatter_glEnableiNV((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableiNV, (GLenum target, GLuint index))
#define glGetFloati_vNV(target, index, data) glatter_glGetFloati_vNV((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloati_vNV, (GLenum target, GLuint index, GLfloat *data))
#define glIsEnablediNV(target, index) glatter_glIsEnablediNV((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnablediNV, (GLenum target, GLuint index))
#define glScissorArrayvNV(first, count, v) glatter_glScissorArrayvNV((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorArrayvNV, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexedNV(index, left, bottom, width, height) glatter_glScissorIndexedNV((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedNV, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedvNV(index, v) glatter_glScissorIndexedvNV((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedvNV, (GLuint index, const GLint *v))
#define glViewportArrayvNV(first, count, v) glatter_glViewportArrayvNV((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportArrayvNV, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedfNV(index, x, y, w, h) glatter_glViewportIndexedfNV((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfNV, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfvNV(index, v) glatter_glViewportIndexedfvNV((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfvNV, (GLuint index, const GLfloat *v))
#endif // defined(GL_NV_viewport_array)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV((index), (swizzlex), (swizzley), (swizzlez), (swizzlew))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew))
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES((target), (image))
GLATTER_UBLOCK(void, GL_APIENTRY, glEGLImageTargetRenderbufferStorageOES, (GLenum target, GLeglImageOES image))
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES((target), (image))
GLATTER_UBLOCK(void, GL_APIENTRY, glEGLImageTargetTexture2DOES, (GLenum target, GLeglImageOES image))
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_copy_image)
#define glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataOES((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyImageSubDataOES, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#endif // defined(GL_OES_copy_image)
#if defined(GL_OES_draw_buffers_indexed)
#define glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiOES((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparateiOES, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiOES(buf, mode) glatter_glBlendEquationiOES((buf), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationiOES, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiOES((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparateiOES, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciOES(buf, src, dst) glatter_glBlendFunciOES((buf), (src), (dst))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunciOES, (GLuint buf, GLenum src, GLenum dst))
#define glColorMaskiOES(index, r, g, b, a) glatter_glColorMaskiOES((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMaskiOES, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDisableiOES(target, index) glatter_glDisableiOES((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableiOES, (GLenum target, GLuint index))
#define glEnableiOES(target, index) glatter_glEnableiOES((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableiOES, (GLenum target, GLuint index))
#define glIsEnablediOES(target, index) glatter_glIsEnablediOES((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnablediOES, (GLenum target, GLuint index))
#endif // defined(GL_OES_draw_buffers_indexed)
#if defined(GL_OES_draw_elements_base_vertex)
#define glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexOES((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsBaseVertexOES, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexOES((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertexOES, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexOES((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElementsBaseVertexOES, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glMultiDrawElementsBaseVertexOES(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexOES((mode), (count), (type), (indices), (primcount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsBaseVertexOES, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex))
#endif // defined(GL_OES_draw_elements_base_vertex)
#if defined(GL_OES_geometry_shader)
#define glFramebufferTextureOES(target, attachment, texture, level) glatter_glFramebufferTextureOES((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureOES, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#endif // defined(GL_OES_geometry_shader)
#if defined(GL_OES_get_program_binary)
#define glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinaryOES((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinaryOES, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glProgramBinaryOES(program, binaryFormat, binary, length) glatter_glProgramBinaryOES((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinaryOES, (GLuint program, GLenum binaryFormat, const void *binary, GLint length))
#endif // defined(GL_OES_get_program_binary)
#if defined(GL_OES_mapbuffer)
#define glGetBufferPointervOES(target, pname, params) glatter_glGetBufferPointervOES((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointervOES, (GLenum target, GLenum pname, void **params))
#define glMapBufferOES(target, access) glatter_glMapBufferOES((target), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferOES, (GLenum target, GLenum access))
#define glUnmapBufferOES(target) glatter_glUnmapBufferOES((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBufferOES, (GLenum target))
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_primitive_bounding_box)
#define glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxOES((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, GL_APIENTRY, glPrimitiveBoundingBoxOES, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_OES_primitive_bounding_box)
#if defined(GL_OES_sample_shading)
#define glMinSampleShadingOES(value) glatter_glMinSampleShadingOES((value))
GLATTER_UBLOCK(void, GL_APIENTRY, glMinSampleShadingOES, (GLfloat value))
#endif // defined(GL_OES_sample_shading)
#if defined(GL_OES_tessellation_shader)
#define glPatchParameteriOES(pname, value) glatter_glPatchParameteriOES((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPatchParameteriOES, (GLenum pname, GLint value))
#endif // defined(GL_OES_tessellation_shader)
#if defined(GL_OES_texture_3D)
#define glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DOES((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3DOES, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DOES((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DOES((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DOES((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture3DOES, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DOES((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3DOES, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DOES((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_OES_texture_3D)
#if defined(GL_OES_texture_border_clamp)
#define glGetSamplerParameterIivOES(sampler, pname, params) glatter_glGetSamplerParameterIivOES((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIivOES, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuivOES(sampler, pname, params) glatter_glGetSamplerParameterIuivOES((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIuivOES, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetTexParameterIivOES(target, pname, params) glatter_glGetTexParameterIivOES((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIivOES, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuivOES(target, pname, params) glatter_glGetTexParameterIuivOES((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIuivOES, (GLenum target, GLenum pname, GLuint *params))
#define glSamplerParameterIivOES(sampler, pname, param) glatter_glSamplerParameterIivOES((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIivOES, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuivOES(sampler, pname, param) glatter_glSamplerParameterIuivOES((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIuivOES, (GLuint sampler, GLenum pname, const GLuint *param))
#define glTexParameterIivOES(target, pname, params) glatter_glTexParameterIivOES((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIivOES, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuivOES(target, pname, params) glatter_glTexParameterIuivOES((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIuivOES, (GLenum target, GLenum pname, const GLuint *params))
#endif // defined(GL_OES_texture_border_clamp)
#if defined(GL_OES_texture_buffer)
#define glTexBufferOES(target, internalformat, buffer) glatter_glTexBufferOES((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferOES, (GLenum target, GLenum internalformat, GLuint buffer))
#define glTexBufferRangeOES(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeOES((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferRangeOES, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#endif // defined(GL_OES_texture_buffer)
#if defined(GL_OES_texture_storage_multisample_2d_array)
#define glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisampleOES((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3DMultisampleOES, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#endif // defined(GL_OES_texture_storage_multisample_2d_array)
#if defined(GL_OES_texture_view)
#define glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewOES((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureViewOES, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#endif // defined(GL_OES_texture_view)
#if defined(GL_OES_vertex_array_object)
#define glBindVertexArrayOES(array) glatter_glBindVertexArrayOES((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArrayOES, (GLuint array))
#define glDeleteVertexArraysOES(n, arrays) glatter_glDeleteVertexArraysOES((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArraysOES, (GLsizei n, const GLuint *arrays))
#define glGenVertexArraysOES(n, arrays) glatter_glGenVertexArraysOES((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArraysOES, (GLsizei n, GLuint *arrays))
#define glIsVertexArrayOES(array) glatter_glIsVertexArrayOES((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArrayOES, (GLuint array))
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_OES_viewport_array)
#define glDepthRangeArrayfvOES(first, count, v) glatter_glDepthRangeArrayfvOES((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeArrayfvOES, (GLuint first, GLsizei count, const GLfloat *v))
#define glDepthRangeIndexedfOES(index, n, f) glatter_glDepthRangeIndexedfOES((index), (n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeIndexedfOES, (GLuint index, GLfloat n, GLfloat f))
#define glGetFloati_vOES(target, index, data) glatter_glGetFloati_vOES((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloati_vOES, (GLenum target, GLuint index, GLfloat *data))
#define glScissorArrayvOES(first, count, v) glatter_glScissorArrayvOES((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorArrayvOES, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexedOES(index, left, bottom, width, height) glatter_glScissorIndexedOES((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedOES, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedvOES(index, v) glatter_glScissorIndexedvOES((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedvOES, (GLuint index, const GLint *v))
#define glViewportArrayvOES(first, count, v) glatter_glViewportArrayvOES((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportArrayvOES, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedfOES(index, x, y, w, h) glatter_glViewportIndexedfOES((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfOES, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfvOES(index, v) glatter_glViewportIndexedfvOES((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfvOES, (GLuint index, const GLfloat *v))
#endif // defined(GL_OES_viewport_array)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR((target), (attachment), (texture), (level), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview)
#if defined(GL_OVR_multiview_multisampled_render_to_texture)
#define glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews) glatter_glFramebufferTextureMultisampleMultiviewOVR((target), (attachment), (texture), (level), (samples), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureMultisampleMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview_multisampled_render_to_texture)
#if defined(GL_QCOM_alpha_test)
#define glAlphaFuncQCOM(func, ref) glatter_glAlphaFuncQCOM((func), (ref))
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFuncQCOM, (GLenum func, GLclampf ref))
#endif // defined(GL_QCOM_alpha_test)
#if defined(GL_QCOM_driver_control)
#define glDisableDriverControlQCOM(driverControl) glatter_glDisableDriverControlQCOM((driverControl))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableDriverControlQCOM, (GLuint driverControl))
#define glEnableDriverControlQCOM(driverControl) glatter_glEnableDriverControlQCOM((driverControl))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableDriverControlQCOM, (GLuint driverControl))
#define glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) glatter_glGetDriverControlStringQCOM((driverControl), (bufSize), (length), (driverControlString))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetDriverControlStringQCOM, (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString))
#define glGetDriverControlsQCOM(num, size, driverControls) glatter_glGetDriverControlsQCOM((num), (size), (driverControls))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetDriverControlsQCOM, (GLint *num, GLsizei size, GLuint *driverControls))
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
#define glExtGetBufferPointervQCOM(target, params) glatter_glExtGetBufferPointervQCOM((target), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetBufferPointervQCOM, (GLenum target, void **params))
#define glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) glatter_glExtGetBuffersQCOM((buffers), (maxBuffers), (numBuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetBuffersQCOM, (GLuint *buffers, GLint maxBuffers, GLint *numBuffers))
#define glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) glatter_glExtGetFramebuffersQCOM((framebuffers), (maxFramebuffers), (numFramebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetFramebuffersQCOM, (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers))
#define glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) glatter_glExtGetRenderbuffersQCOM((renderbuffers), (maxRenderbuffers), (numRenderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetRenderbuffersQCOM, (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers))
#define glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) glatter_glExtGetTexLevelParameterivQCOM((texture), (face), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexLevelParameterivQCOM, (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params))
#define glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels) glatter_glExtGetTexSubImageQCOM((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (texels))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexSubImageQCOM, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels))
#define glExtGetTexturesQCOM(textures, maxTextures, numTextures) glatter_glExtGetTexturesQCOM((textures), (maxTextures), (numTextures))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexturesQCOM, (GLuint *textures, GLint maxTextures, GLint *numTextures))
#define glExtTexObjectStateOverrideiQCOM(target, pname, param) glatter_glExtTexObjectStateOverrideiQCOM((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtTexObjectStateOverrideiQCOM, (GLenum target, GLenum pname, GLint param))
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
#define glExtGetProgramBinarySourceQCOM(program, shadertype, source, length) glatter_glExtGetProgramBinarySourceQCOM((program), (shadertype), (source), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetProgramBinarySourceQCOM, (GLuint program, GLenum shadertype, GLchar *source, GLint *length))
#define glExtGetProgramsQCOM(programs, maxPrograms, numPrograms) glatter_glExtGetProgramsQCOM((programs), (maxPrograms), (numPrograms))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetProgramsQCOM, (GLuint *programs, GLint maxPrograms, GLint *numPrograms))
#define glExtGetShadersQCOM(shaders, maxShaders, numShaders) glatter_glExtGetShadersQCOM((shaders), (maxShaders), (numShaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetShadersQCOM, (GLuint *shaders, GLint maxShaders, GLint *numShaders))
#define glExtIsProgramBinaryQCOM(program) glatter_glExtIsProgramBinaryQCOM((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glExtIsProgramBinaryQCOM, (GLuint program))
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_tiled_rendering)
#define glEndTilingQCOM(preserveMask) glatter_glEndTilingQCOM((preserveMask))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTilingQCOM, (GLbitfield preserveMask))
#define glStartTilingQCOM(x, y, width, height, preserveMask) glatter_glStartTilingQCOM((x), (y), (width), (height), (preserveMask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStartTilingQCOM, (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask))
#endif // defined(GL_QCOM_tiled_rendering)
#endif // defined(__gl2ext_h_)
#if defined(__gl31_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback((primitiveMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase((target), (index), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindSampler(unit, sampler) glatter_glBindSampler((unit), (sampler))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBindVertexArray(array) glatter_glBindVertexArray((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glDeleteSync(sync) glatter_glDeleteSync((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSync, (GLsync sync))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glEndQuery(target) glatter_glEndQuery((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQuery, (GLenum target))
#define glEndTransformFeedback() glatter_glEndTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTransformFeedback, (void))
#define glFenceSync(condition, flags) glatter_glFenceSync((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenQueries(n, ids) glatter_glGenQueries((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGenSamplers(count, samplers) glatter_glGenSamplers((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi((name), (index))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glIsQuery(id) glatter_glIsQuery((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQuery, (GLuint id))
#define glIsSampler(sampler) glatter_glIsSampler((sampler))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSampler, (GLuint sampler))
#define glIsSync(sync) glatter_glIsSync((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSync, (GLsync sync))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTransformFeedback, (GLuint id))
#define glIsVertexArray(array) glatter_glIsVertexArray((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glPauseTransformFeedback, (void))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glReadBuffer(mode) glatter_glReadBuffer((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBuffer, (GLenum mode))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glResumeTransformFeedback, (void))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUnmapBuffer(target) glatter_glUnmapBuffer((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBuffer, (GLenum target))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram((pipeline), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv((type), (count), (strings))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect((indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect((mode), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect((mode), (type), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv((pname), (index), (val))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv((pipeline), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline((pipeline))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski((maskNumber), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages((pipeline), (stages), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding((attribindex), (bindingindex))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor((bindingindex), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_ES_VERSION_3_1)
#endif // defined(__gl31_h_)
#if defined(__gl32_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback((primitiveMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase((target), (index), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindSampler(unit, sampler) glatter_glBindSampler((unit), (sampler))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBindVertexArray(array) glatter_glBindVertexArray((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glDeleteSync(sync) glatter_glDeleteSync((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSync, (GLsync sync))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glEndQuery(target) glatter_glEndQuery((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQuery, (GLenum target))
#define glEndTransformFeedback() glatter_glEndTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTransformFeedback, (void))
#define glFenceSync(condition, flags) glatter_glFenceSync((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenQueries(n, ids) glatter_glGenQueries((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGenSamplers(count, samplers) glatter_glGenSamplers((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi((name), (index))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glIsQuery(id) glatter_glIsQuery((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQuery, (GLuint id))
#define glIsSampler(sampler) glatter_glIsSampler((sampler))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSampler, (GLuint sampler))
#define glIsSync(sync) glatter_glIsSync((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSync, (GLsync sync))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTransformFeedback, (GLuint id))
#define glIsVertexArray(array) glatter_glIsVertexArray((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glPauseTransformFeedback, (void))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glReadBuffer(src) glatter_glReadBuffer((src))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBuffer, (GLenum src))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glResumeTransformFeedback, (void))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUnmapBuffer(target) glatter_glUnmapBuffer((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBuffer, (GLenum target))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram((pipeline), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv((type), (count), (strings))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect((indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect((mode), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect((mode), (type), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv((pname), (index), (val))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv((pipeline), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline((pipeline))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski((maskNumber), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages((pipeline), (stages), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding((attribindex), (bindingindex))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor((bindingindex), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_ES_VERSION_3_1)
#if defined(GL_ES_VERSION_3_2)
#define glBlendBarrier() glatter_glBlendBarrier()
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendBarrier, (void))
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi((buf), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci((buf), (src), (dst))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback((callback), (userParam))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glDisablei(target, index) glatter_glDisablei((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisablei, (GLenum target, GLuint index))
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glEnablei(target, index) glatter_glEnablei((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnablei, (GLenum target, GLuint index))
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetGraphicsResetStatus, (void))
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetPointerv(pname, params) glatter_glGetPointerv((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPointerv, (GLenum pname, void **params))
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glIsEnabledi(target, index) glatter_glIsEnabledi((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#define glMinSampleShading(value) glatter_glMinSampleShading((value))
GLATTER_UBLOCK(void, GL_APIENTRY, glMinSampleShading, (GLfloat value))
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel((ptr), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#define glPatchParameteri(pname, value) glatter_glPatchParameteri((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#define glPopDebugGroup() glatter_glPopDebugGroup()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopDebugGroup, (void))
#define glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBox((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, GL_APIENTRY, glPrimitiveBoundingBox, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup((source), (id), (length), (message))
GLATTER_UBLOCK(void, GL_APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#endif // defined(GL_ES_VERSION_3_2)
#endif // defined(__gl32_h_)
#if defined(__gl3_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback((primitiveMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase((target), (index), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindSampler(unit, sampler) glatter_glBindSampler((unit), (sampler))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBindVertexArray(array) glatter_glBindVertexArray((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glDeleteSync(sync) glatter_glDeleteSync((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSync, (GLsync sync))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glEndQuery(target) glatter_glEndQuery((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQuery, (GLenum target))
#define glEndTransformFeedback() glatter_glEndTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTransformFeedback, (void))
#define glFenceSync(condition, flags) glatter_glFenceSync((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenQueries(n, ids) glatter_glGenQueries((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGenSamplers(count, samplers) glatter_glGenSamplers((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi((name), (index))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glIsQuery(id) glatter_glIsQuery((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQuery, (GLuint id))
#define glIsSampler(sampler) glatter_glIsSampler((sampler))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSampler, (GLuint sampler))
#define glIsSync(sync) glatter_glIsSync((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSync, (GLsync sync))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTransformFeedback, (GLuint id))
#define glIsVertexArray(array) glatter_glIsVertexArray((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glPauseTransformFeedback, (void))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glReadBuffer(mode) glatter_glReadBuffer((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBuffer, (GLenum mode))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback()
GLATTER_UBLOCK(void, GL_APIENTRY, glResumeTransformFeedback, (void))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUnmapBuffer(target) glatter_glUnmapBuffer((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBuffer, (GLenum target))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_ES_VERSION_3_0)
#endif // defined(__gl3_h_)
#if defined(__gl_glcorearb_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD((monitor))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfMonitorAMD, (GLuint monitor))
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD((monitor))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfMonitorAMD, (GLuint monitor))
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glGenPerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD((monitor), (pname), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten))
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD((group), (counter), (pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void *data))
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD((group), (counter), (bufSize), (length), (counterString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString))
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD((group), (numCounters), (maxActiveCounters), (counterSize), (counters))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCountersAMD, (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters))
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD((group), (bufSize), (length), (groupString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString))
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD((numGroups), (groupsSize), (groups))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupsAMD, (GLint *numGroups, GLsizei groupsSize, GLuint *groups))
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD((monitor), (enable), (group), (numCounters), (counterList))
GLATTER_UBLOCK(void, APIENTRY, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList))
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ARB_ES3_2_compatibility)
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxARB((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveBoundingBoxARB, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_ARB_ES3_2_compatibility)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleARB, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleARB, (GLuint texture))
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleARB, (GLuint texture, GLuint sampler))
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vARB, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentARB, (GLuint64 handle))
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentARB, (GLuint64 handle))
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentARB, (GLuint64 handle))
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentARB, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentARB, (GLuint64 handle))
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentARB, (GLuint64 handle))
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64ARB, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64ARB, (GLint location, GLuint64 value))
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64ARB, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vARB, (GLuint index, const GLuint64EXT *v))
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB((context), (event), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glCreateSyncFromCLeventARB, (struct _cl_context *context, struct _cl_event *event, GLbitfield flags))
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeGroupSizeARB, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z))
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackARB, (GLDEBUGPROCARB callback, const void *userParam))
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControlARB, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertARB, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogARB, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateiARB, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationiARB, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateiARB, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunciARB, (GLuint buf, GLenum src, GLenum dst))
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_draw_instanced)
#define glDrawArraysInstancedARB(mode, first, count, primcount) glatter_glDrawArraysInstancedARB((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedARB, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedARB((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedARB, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_ARB_draw_instanced)
#if defined(GL_ARB_geometry_shader4)
#define glFramebufferTextureARB(target, attachment, texture, level) glatter_glFramebufferTextureARB((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureARB, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceARB((target), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureFaceARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerARB((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayerARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glProgramParameteriARB(program, pname, value) glatter_glProgramParameteriARB((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteriARB, (GLuint program, GLenum pname, GLint value))
#endif // defined(GL_ARB_geometry_shader4)
#if defined(GL_ARB_gl_spirv)
#define glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShaderARB((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue))
GLATTER_UBLOCK(void, APIENTRY, glSpecializeShaderARB, (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue))
#endif // defined(GL_ARB_gl_spirv)
#if defined(GL_ARB_gpu_shader_int64)
#define glGetUniformi64vARB(program, location, params) glatter_glGetUniformi64vARB((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vARB, (GLuint program, GLint location, GLint64 *params))
#define glGetUniformui64vARB(program, location, params) glatter_glGetUniformui64vARB((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vARB, (GLuint program, GLint location, GLuint64 *params))
#define glGetnUniformi64vARB(program, location, bufSize, params) glatter_glGetnUniformi64vARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformi64vARB, (GLuint program, GLint location, GLsizei bufSize, GLint64 *params))
#define glGetnUniformui64vARB(program, location, bufSize, params) glatter_glGetnUniformui64vARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformui64vARB, (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params))
#define glProgramUniform1i64ARB(program, location, x) glatter_glProgramUniform1i64ARB((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64ARB, (GLuint program, GLint location, GLint64 x))
#define glProgramUniform1i64vARB(program, location, count, value) glatter_glProgramUniform1i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform1ui64ARB(program, location, x) glatter_glProgramUniform1ui64ARB((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64ARB, (GLuint program, GLint location, GLuint64 x))
#define glProgramUniform1ui64vARB(program, location, count, value) glatter_glProgramUniform1ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform2i64ARB(program, location, x, y) glatter_glProgramUniform2i64ARB((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y))
#define glProgramUniform2i64vARB(program, location, count, value) glatter_glProgramUniform2i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform2ui64ARB(program, location, x, y) glatter_glProgramUniform2ui64ARB((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y))
#define glProgramUniform2ui64vARB(program, location, count, value) glatter_glProgramUniform2ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform3i64ARB(program, location, x, y, z) glatter_glProgramUniform3i64ARB((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z))
#define glProgramUniform3i64vARB(program, location, count, value) glatter_glProgramUniform3i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform3ui64ARB(program, location, x, y, z) glatter_glProgramUniform3ui64ARB((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#define glProgramUniform3ui64vARB(program, location, count, value) glatter_glProgramUniform3ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform4i64ARB(program, location, x, y, z, w) glatter_glProgramUniform4i64ARB((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#define glProgramUniform4i64vARB(program, location, count, value) glatter_glProgramUniform4i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) glatter_glProgramUniform4ui64ARB((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#define glProgramUniform4ui64vARB(program, location, count, value) glatter_glProgramUniform4ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glUniform1i64ARB(location, x) glatter_glUniform1i64ARB((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64ARB, (GLint location, GLint64 x))
#define glUniform1i64vARB(location, count, value) glatter_glUniform1i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform1ui64ARB(location, x) glatter_glUniform1ui64ARB((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64ARB, (GLint location, GLuint64 x))
#define glUniform1ui64vARB(location, count, value) glatter_glUniform1ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform2i64ARB(location, x, y) glatter_glUniform2i64ARB((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64ARB, (GLint location, GLint64 x, GLint64 y))
#define glUniform2i64vARB(location, count, value) glatter_glUniform2i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform2ui64ARB(location, x, y) glatter_glUniform2ui64ARB((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64ARB, (GLint location, GLuint64 x, GLuint64 y))
#define glUniform2ui64vARB(location, count, value) glatter_glUniform2ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform3i64ARB(location, x, y, z) glatter_glUniform3i64ARB((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z))
#define glUniform3i64vARB(location, count, value) glatter_glUniform3i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform3ui64ARB(location, x, y, z) glatter_glUniform3ui64ARB((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#define glUniform3ui64vARB(location, count, value) glatter_glUniform3ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform4i64ARB(location, x, y, z, w) glatter_glUniform4i64ARB((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#define glUniform4i64vARB(location, count, value) glatter_glUniform4i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform4ui64ARB(location, x, y, z, w) glatter_glUniform4ui64ARB((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#define glUniform4ui64vARB(location, count, value) glatter_glUniform4ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_ARB_gpu_shader_int64)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB((mode), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCountARB, (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCountARB, (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_instanced_arrays)
#define glVertexAttribDivisorARB(index, divisor) glatter_glVertexAttribDivisorARB((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisorARB, (GLuint index, GLuint divisor))
#endif // defined(GL_ARB_instanced_arrays)
#if defined(GL_ARB_parallel_shader_compile)
#define glMaxShaderCompilerThreadsARB(count) glatter_glMaxShaderCompilerThreadsARB((count))
GLATTER_UBLOCK(void, APIENTRY, glMaxShaderCompilerThreadsARB, (GLuint count))
#endif // defined(GL_ARB_parallel_shader_compile)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatusARB, (void))
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB((target), (lod), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImageARB, (GLenum target, GLint lod, GLsizei bufSize, void *img))
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB((target), (level), (format), (type), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImageARB, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img))
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdvARB, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfvARB, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformivARB, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuivARB, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixelsARB, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_locations)
#define glEvaluateDepthValuesARB() glatter_glEvaluateDepthValuesARB()
GLATTER_UBLOCK(void, APIENTRY, glEvaluateDepthValuesARB, (void))
#define glFramebufferSampleLocationsfvARB(target, start, count, v) glatter_glFramebufferSampleLocationsfvARB((target), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvARB, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvARB((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvARB, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#endif // defined(GL_ARB_sample_locations)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShadingARB, (GLfloat value))
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB((shader), (count), (path), (length))
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderIncludeARB, (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length))
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB((namelen), (name))
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamedStringARB, (GLint namelen, const GLchar *name))
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB((namelen), (name), (bufSize), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringARB, (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string))
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB((namelen), (name), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringivARB, (GLint namelen, const GLchar *name, GLenum pname, GLint *params))
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB((namelen), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedStringARB, (GLint namelen, const GLchar *name))
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB((type), (namelen), (name), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedStringARB, (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string))
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB((target), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glBufferPageCommitmentARB, (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit))
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentARB, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentARB((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, APIENTRY, glTexPageCommitmentARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_ARB_texture_buffer_object)
#define glTexBufferARB(target, internalformat, buffer) glatter_glTexBufferARB((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferARB, (GLenum target, GLenum internalformat, GLuint buffer))
#endif // defined(GL_ARB_texture_buffer_object)
#if defined(GL_EXT_EGL_image_storage)
#define glEGLImageTargetTexStorageEXT(target, image, attrib_list) glatter_glEGLImageTargetTexStorageEXT((target), (image), (attrib_list))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTexStorageEXT, (GLenum target, GLeglImageOES image, const GLint* attrib_list))
#define glEGLImageTargetTextureStorageEXT(texture, image, attrib_list) glatter_glEGLImageTargetTextureStorageEXT((texture), (image), (attrib_list))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTextureStorageEXT, (GLuint texture, GLeglImageOES image, const GLint* attrib_list))
#endif // defined(GL_EXT_EGL_image_storage)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT((type), (object), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT((type), (object), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar *label))
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT()
GLATTER_UBLOCK(void, APIENTRY, glPopGroupMarkerEXT, (void))
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_direct_state_access)
#define glBindMultiTextureEXT(texunit, target, texture) glatter_glBindMultiTextureEXT((texunit), (target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindMultiTextureEXT, (GLenum texunit, GLenum target, GLuint texture))
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) glatter_glCheckNamedFramebufferStatusEXT((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatusEXT, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) glatter_glClearNamedBufferDataEXT((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferDataEXT, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubDataEXT((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubDataEXT, (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glClientAttribDefaultEXT(mask) glatter_glClientAttribDefaultEXT((mask))
GLATTER_UBLOCK(void, APIENTRY, glClientAttribDefaultEXT, (GLbitfield mask))
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedMultiTexImage3DEXT((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedTextureImage1DEXT((texture), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedTextureImage2DEXT((texture), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedTextureImage3DEXT((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedTextureSubImage1DEXT((texture), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) glatter_glCopyMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) glatter_glCopyMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) glatter_glCopyMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) glatter_glCopyTextureImage1DEXT((texture), (target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) glatter_glCopyTextureImage2DEXT((texture), (target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1DEXT((texture), (target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDisableClientStateIndexedEXT(array, index) glatter_glDisableClientStateIndexedEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateIndexedEXT, (GLenum array, GLuint index))
#define glDisableClientStateiEXT(array, index) glatter_glDisableClientStateiEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateiEXT, (GLenum array, GLuint index))
#define glDisableIndexedEXT(target, index) glatter_glDisableIndexedEXT((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableIndexedEXT, (GLenum target, GLuint index))
#define glDisableVertexArrayAttribEXT(vaobj, index) glatter_glDisableVertexArrayAttribEXT((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#define glDisableVertexArrayEXT(vaobj, array) glatter_glDisableVertexArrayEXT((vaobj), (array))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayEXT, (GLuint vaobj, GLenum array))
#define glEnableClientStateIndexedEXT(array, index) glatter_glEnableClientStateIndexedEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateIndexedEXT, (GLenum array, GLuint index))
#define glEnableClientStateiEXT(array, index) glatter_glEnableClientStateiEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateiEXT, (GLenum array, GLuint index))
#define glEnableIndexedEXT(target, index) glatter_glEnableIndexedEXT((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableIndexedEXT, (GLenum target, GLuint index))
#define glEnableVertexArrayAttribEXT(vaobj, index) glatter_glEnableVertexArrayAttribEXT((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayEXT(vaobj, array) glatter_glEnableVertexArrayEXT((vaobj), (array))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayEXT, (GLuint vaobj, GLenum array))
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) glatter_glFlushMappedNamedBufferRangeEXT((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glFramebufferDrawBufferEXT(framebuffer, mode) glatter_glFramebufferDrawBufferEXT((framebuffer), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBufferEXT, (GLuint framebuffer, GLenum mode))
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) glatter_glFramebufferDrawBuffersEXT((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBuffersEXT, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glFramebufferReadBufferEXT(framebuffer, mode) glatter_glFramebufferReadBufferEXT((framebuffer), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferReadBufferEXT, (GLuint framebuffer, GLenum mode))
#define glGenerateMultiTexMipmapEXT(texunit, target) glatter_glGenerateMultiTexMipmapEXT((texunit), (target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMultiTexMipmapEXT, (GLenum texunit, GLenum target))
#define glGenerateTextureMipmapEXT(texture, target) glatter_glGenerateTextureMipmapEXT((texture), (target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmapEXT, (GLuint texture, GLenum target))
#define glGetBooleanIndexedvEXT(target, index, data) glatter_glGetBooleanIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanIndexedvEXT, (GLenum target, GLuint index, GLboolean *data))
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) glatter_glGetCompressedMultiTexImageEXT((texunit), (target), (lod), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedMultiTexImageEXT, (GLenum texunit, GLenum target, GLint lod, void *img))
#define glGetCompressedTextureImageEXT(texture, target, lod, img) glatter_glGetCompressedTextureImageEXT((texture), (target), (lod), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImageEXT, (GLuint texture, GLenum target, GLint lod, void *img))
#define glGetDoubleIndexedvEXT(target, index, data) glatter_glGetDoubleIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoubleIndexedvEXT, (GLenum target, GLuint index, GLdouble *data))
#define glGetDoublei_vEXT(pname, index, params) glatter_glGetDoublei_vEXT((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_vEXT, (GLenum pname, GLuint index, GLdouble *params))
#define glGetFloatIndexedvEXT(target, index, data) glatter_glGetFloatIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatIndexedvEXT, (GLenum target, GLuint index, GLfloat *data))
#define glGetFloati_vEXT(pname, index, params) glatter_glGetFloati_vEXT((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_vEXT, (GLenum pname, GLuint index, GLfloat *params))
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetFramebufferParameterivEXT((framebuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#define glGetIntegerIndexedvEXT(target, index, data) glatter_glGetIntegerIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerIndexedvEXT, (GLenum target, GLuint index, GLint *data))
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGendvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params))
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenfvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params))
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenivEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint *params))
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) glatter_glGetMultiTexImageEXT((texunit), (target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexImageEXT, (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterfvEXT((texunit), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterfvEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterivEXT((texunit), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterivEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIuivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, GLuint *params))
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetNamedBufferParameterivEXT(buffer, pname, params) glatter_glGetNamedBufferParameterivEXT((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterivEXT, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointervEXT(buffer, pname, params) glatter_glGetNamedBufferPointervEXT((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointervEXT, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glGetNamedBufferSubDataEXT((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameterivEXT((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameterivEXT, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetNamedFramebufferParameterivEXT((framebuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIivEXT, (GLuint program, GLenum target, GLuint index, GLint *params))
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIuivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIuivEXT, (GLuint program, GLenum target, GLuint index, GLuint *params))
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterdvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterdvEXT, (GLuint program, GLenum target, GLuint index, GLdouble *params))
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterfvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterfvEXT, (GLuint program, GLenum target, GLuint index, GLfloat *params))
#define glGetNamedProgramStringEXT(program, target, pname, string) glatter_glGetNamedProgramStringEXT((program), (target), (pname), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramStringEXT, (GLuint program, GLenum target, GLenum pname, void *string))
#define glGetNamedProgramivEXT(program, target, pname, params) glatter_glGetNamedProgramivEXT((program), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramivEXT, (GLuint program, GLenum target, GLenum pname, GLint *params))
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameterivEXT((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameterivEXT, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetPointerIndexedvEXT(target, index, data) glatter_glGetPointerIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerIndexedvEXT, (GLenum target, GLuint index, void **data))
#define glGetPointeri_vEXT(pname, index, params) glatter_glGetPointeri_vEXT((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointeri_vEXT, (GLenum pname, GLuint index, void **params))
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) glatter_glGetTextureImageEXT((texture), (target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImageEXT, (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterfvEXT((texture), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfvEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterivEXT((texture), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterivEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIivEXT(texture, target, pname, params) glatter_glGetTextureParameterIivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#define glGetTextureParameterIuivEXT(texture, target, pname, params) glatter_glGetTextureParameterIuivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, GLuint *params))
#define glGetTextureParameterfvEXT(texture, target, pname, params) glatter_glGetTextureParameterfvEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat *params))
#define glGetTextureParameterivEXT(texture, target, pname, params) glatter_glGetTextureParameterivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayIntegeri_vEXT((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) glatter_glGetVertexArrayIntegervEXT((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegervEXT, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayPointeri_vEXT((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, void **param))
#define glGetVertexArrayPointervEXT(vaobj, pname, param) glatter_glGetVertexArrayPointervEXT((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointervEXT, (GLuint vaobj, GLenum pname, void **param))
#define glIsEnabledIndexedEXT(target, index) glatter_glIsEnabledIndexedEXT((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledIndexedEXT, (GLenum target, GLuint index))
#define glMapNamedBufferEXT(buffer, access) glatter_glMapNamedBufferEXT((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferEXT, (GLuint buffer, GLenum access))
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) glatter_glMapNamedBufferRangeEXT((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT((mode), (left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glMatrixFrustumEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadIdentityEXT, (GLenum mode))
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposedEXT, (GLenum mode, const GLdouble *m))
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposefEXT, (GLenum mode, const GLfloat *m))
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoaddEXT, (GLenum mode, const GLdouble *m))
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadfEXT, (GLenum mode, const GLfloat *m))
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposedEXT, (GLenum mode, const GLdouble *m))
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposefEXT, (GLenum mode, const GLfloat *m))
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultdEXT, (GLenum mode, const GLdouble *m))
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultfEXT, (GLenum mode, const GLfloat *m))
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT((mode), (left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glMatrixOrthoEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixPopEXT, (GLenum mode))
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixPushEXT, (GLenum mode))
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT((mode), (angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatedEXT, (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT((mode), (angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatefEXT, (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixScaledEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixScalefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatedEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) glatter_glMultiTexBufferEXT((texunit), (target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexBufferEXT, (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer))
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) glatter_glMultiTexCoordPointerEXT((texunit), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordPointerEXT, (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glMultiTexEnvfEXT(texunit, target, pname, param) glatter_glMultiTexEnvfEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#define glMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glMultiTexEnvfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#define glMultiTexEnviEXT(texunit, target, pname, param) glatter_glMultiTexEnviEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnviEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#define glMultiTexEnvivEXT(texunit, target, pname, params) glatter_glMultiTexEnvivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexGendEXT(texunit, coord, pname, param) glatter_glMultiTexGendEXT((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble param))
#define glMultiTexGendvEXT(texunit, coord, pname, params) glatter_glMultiTexGendvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params))
#define glMultiTexGenfEXT(texunit, coord, pname, param) glatter_glMultiTexGenfEXT((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat param))
#define glMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glMultiTexGenfvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params))
#define glMultiTexGeniEXT(texunit, coord, pname, param) glatter_glMultiTexGeniEXT((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGeniEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint param))
#define glMultiTexGenivEXT(texunit, coord, pname, params) glatter_glMultiTexGenivEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLint *params))
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) glatter_glMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) glatter_glMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glMultiTexImage3DEXT((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIuivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLuint *params))
#define glMultiTexParameterfEXT(texunit, target, pname, param) glatter_glMultiTexParameterfEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#define glMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glMultiTexParameterfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#define glMultiTexParameteriEXT(texunit, target, pname, param) glatter_glMultiTexParameteriEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameteriEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#define glMultiTexParameterivEXT(texunit, target, pname, params) glatter_glMultiTexParameterivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) glatter_glMultiTexRenderbufferEXT((texunit), (target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexRenderbufferEXT, (GLenum texunit, GLenum target, GLuint renderbuffer))
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) glatter_glMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glNamedBufferDataEXT(buffer, size, data, usage) glatter_glNamedBufferDataEXT((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferDataEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#define glNamedBufferStorageEXT(buffer, size, data, flags) glatter_glNamedBufferStorageEXT((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#define glNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glNamedBufferSubDataEXT((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glNamedCopyBufferSubDataEXT((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glNamedCopyBufferSubDataEXT, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) glatter_glNamedFramebufferParameteriEXT((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteriEXT, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbufferEXT((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbufferEXT, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture1DEXT((framebuffer), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture1DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture2DEXT((framebuffer), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture2DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) glatter_glNamedFramebufferTexture3DEXT((framebuffer), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture3DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTextureEXT((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) glatter_glNamedFramebufferTextureFaceEXT((framebuffer), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureFaceEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayerEXT((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayerEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4dEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dEXT, (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4dvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dvEXT, (GLuint program, GLenum target, GLuint index, const GLdouble *params))
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4fEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fEXT, (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4fvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fvEXT, (GLuint program, GLenum target, GLuint index, const GLfloat *params))
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4iEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4iEXT, (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4ivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4ivEXT, (GLuint program, GLenum target, GLuint index, const GLint *params))
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4uiEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uiEXT, (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4uivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uivEXT, (GLuint program, GLenum target, GLuint index, const GLuint *params))
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) glatter_glNamedProgramLocalParameters4fvEXT((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameters4fvEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4ivEXT((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4ivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params))
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4uivEXT((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4uivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params))
#define glNamedProgramStringEXT(program, target, format, len, string) glatter_glNamedProgramStringEXT((program), (target), (format), (len), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramStringEXT, (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string))
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorageEXT((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageEXT, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleCoverageEXT((renderbuffer), (coverageSamples), (colorSamples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleCoverageEXT, (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleEXT((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleEXT, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glProgramUniform1dEXT(program, location, x) glatter_glProgramUniform1dEXT((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dEXT, (GLuint program, GLint location, GLdouble x))
#define glProgramUniform1dvEXT(program, location, count, value) glatter_glProgramUniform1dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fEXT, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iEXT, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiEXT, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2dEXT(program, location, x, y) glatter_glProgramUniform2dEXT((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y))
#define glProgramUniform2dvEXT(program, location, count, value) glatter_glProgramUniform2dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iEXT, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3dEXT(program, location, x, y, z) glatter_glProgramUniform3dEXT((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glProgramUniform3dvEXT(program, location, count, value) glatter_glProgramUniform3dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4dEXT(program, location, x, y, z, w) glatter_glProgramUniform4dEXT((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramUniform4dvEXT(program, location, count, value) glatter_glProgramUniform4dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glPushClientAttribDefaultEXT(mask) glatter_glPushClientAttribDefaultEXT((mask))
GLATTER_UBLOCK(void, APIENTRY, glPushClientAttribDefaultEXT, (GLbitfield mask))
#define glTextureBufferEXT(texture, target, internalformat, buffer) glatter_glTextureBufferEXT((texture), (target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer))
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) glatter_glTextureBufferRangeEXT((texture), (target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRangeEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) glatter_glTextureImage1DEXT((texture), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) glatter_glTextureImage2DEXT((texture), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTextureImage3DEXT((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexturePageCommitmentEXT((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, APIENTRY, glTexturePageCommitmentEXT, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#define glTextureParameterIivEXT(texture, target, pname, params) glatter_glTextureParameterIivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#define glTextureParameterIuivEXT(texture, target, pname, params) glatter_glTextureParameterIuivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, const GLuint *params))
#define glTextureParameterfEXT(texture, target, pname, param) glatter_glTextureParameterfEXT((texture), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat param))
#define glTextureParameterfvEXT(texture, target, pname, params) glatter_glTextureParameterfvEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, const GLfloat *params))
#define glTextureParameteriEXT(texture, target, pname, param) glatter_glTextureParameteriEXT((texture), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriEXT, (GLuint texture, GLenum target, GLenum pname, GLint param))
#define glTextureParameterivEXT(texture, target, pname, params) glatter_glTextureParameterivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#define glTextureRenderbufferEXT(texture, target, renderbuffer) glatter_glTextureRenderbufferEXT((texture), (target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureRenderbufferEXT, (GLuint texture, GLenum target, GLuint renderbuffer))
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT((texture), (target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT((texture), (target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisampleEXT((texture), (target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT((texture), (target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisampleEXT((texture), (target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1DEXT((texture), (target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glUnmapNamedBufferEXT(buffer) glatter_glUnmapNamedBufferEXT((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBufferEXT, (GLuint buffer))
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayBindVertexBufferEXT((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindVertexBufferEXT, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayColorOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) glatter_glVertexArrayEdgeFlagOffsetEXT((vaobj), (buffer), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayEdgeFlagOffsetEXT, (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset))
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayFogCoordOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayFogCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayIndexOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayIndexOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) glatter_glVertexArrayMultiTexCoordOffsetEXT((vaobj), (buffer), (texunit), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayMultiTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayNormalOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayNormalOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArraySecondaryColorOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArraySecondaryColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayTexCoordOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) glatter_glVertexArrayVertexAttribBindingEXT((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribBindingEXT, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) glatter_glVertexArrayVertexAttribDivisorEXT((vaobj), (index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribDivisorEXT, (GLuint vaobj, GLuint index, GLuint divisor))
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayVertexAttribFormatEXT((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribIFormatEXT((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribIOffsetEXT((vaobj), (buffer), (index), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribLFormatEXT((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribLOffsetEXT((vaobj), (buffer), (index), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) glatter_glVertexArrayVertexAttribOffsetEXT((vaobj), (buffer), (index), (size), (type), (normalized), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) glatter_glVertexArrayVertexBindingDivisorEXT((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBindingDivisorEXT, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayVertexOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#endif // defined(GL_EXT_direct_state_access)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT((mode), (start), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT((factor), (units), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp))
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT((samples), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations))
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT((program))
GLATTER_UBLOCK(void, APIENTRY, glActiveProgramEXT, (GLuint program))
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT((type), (string))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramEXT, (GLenum type, const GLchar *string))
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT((type), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseShaderProgramEXT, (GLenum type, GLuint program))
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#define glFramebufferFetchBarrierEXT() glatter_glFramebufferFetchBarrierEXT()
GLATTER_UBLOCK(void, APIENTRY, glFramebufferFetchBarrierEXT, (void))
#endif // defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT((mode), (count), (box))
GLATTER_UBLOCK(void, APIENTRY, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint *box))
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL()
GLATTER_UBLOCK(void, APIENTRY, glApplyFramebufferAttachmentCMAAINTEL, (void))
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfQueryINTEL, (GLuint queryHandle))
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL((queryId), (queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glCreatePerfQueryINTEL, (GLuint queryId, GLuint *queryHandle))
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfQueryINTEL, (GLuint queryHandle))
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfQueryINTEL, (GLuint queryHandle))
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL((queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetFirstPerfQueryIdINTEL, (GLuint *queryId))
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL((queryId), (nextQueryId))
GLATTER_UBLOCK(void, APIENTRY, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint *nextQueryId))
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue))
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL((queryHandle), (flags), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten))
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL((queryName), (queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryIdByNameINTEL, (GLchar *queryName, GLuint *queryId))
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask))
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierKHR, (void))
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_parallel_shader_compile)
#define glMaxShaderCompilerThreadsKHR(count) glatter_glMaxShaderCompilerThreadsKHR((count))
GLATTER_UBLOCK(void, APIENTRY, glMaxShaderCompilerThreadsKHR, (GLuint count))
#endif // defined(GL_KHR_parallel_shader_compile)
#if defined(GL_NV_bindless_multi_draw_indirect)
#define glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessNV((mode), (indirect), (drawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#define glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessNV((mode), (type), (indirect), (drawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect)
#if defined(GL_NV_bindless_multi_draw_indirect_count)
#define glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessCountNV((mode), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessCountNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#define glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessCountNV((mode), (type), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessCountNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect_count)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleNV, (GLuint texture))
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler))
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentNV, (GLuint64 handle))
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentNV, (GLuint64 handle))
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentNV, (GLuint64 handle))
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentNV, (GLuint64 handle))
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentNV, (GLuint64 handle))
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64NV, (GLint location, GLuint64 value))
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierNV, (void))
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glBlendParameteriNV, (GLenum pname, GLint value))
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV((index), (xcoeff), (ycoeff))
GLATTER_UBLOCK(void, APIENTRY, glViewportPositionWScaleNV, (GLuint index, GLfloat xcoeff, GLfloat ycoeff))
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_command_list)
#define glCallCommandListNV(list) glatter_glCallCommandListNV((list))
GLATTER_UBLOCK(void, APIENTRY, glCallCommandListNV, (GLuint list))
#define glCommandListSegmentsNV(list, segments) glatter_glCommandListSegmentsNV((list), (segments))
GLATTER_UBLOCK(void, APIENTRY, glCommandListSegmentsNV, (GLuint list, GLuint segments))
#define glCompileCommandListNV(list) glatter_glCompileCommandListNV((list))
GLATTER_UBLOCK(void, APIENTRY, glCompileCommandListNV, (GLuint list))
#define glCreateCommandListsNV(n, lists) glatter_glCreateCommandListsNV((n), (lists))
GLATTER_UBLOCK(void, APIENTRY, glCreateCommandListsNV, (GLsizei n, GLuint *lists))
#define glCreateStatesNV(n, states) glatter_glCreateStatesNV((n), (states))
GLATTER_UBLOCK(void, APIENTRY, glCreateStatesNV, (GLsizei n, GLuint *states))
#define glDeleteCommandListsNV(n, lists) glatter_glDeleteCommandListsNV((n), (lists))
GLATTER_UBLOCK(void, APIENTRY, glDeleteCommandListsNV, (GLsizei n, const GLuint *lists))
#define glDeleteStatesNV(n, states) glatter_glDeleteStatesNV((n), (states))
GLATTER_UBLOCK(void, APIENTRY, glDeleteStatesNV, (GLsizei n, const GLuint *states))
#define glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count) glatter_glDrawCommandsAddressNV((primitiveMode), (indirects), (sizes), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsAddressNV, (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count))
#define glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count) glatter_glDrawCommandsNV((primitiveMode), (buffer), (indirects), (sizes), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsNV, (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count))
#define glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesAddressNV((indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesAddressNV, (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesNV((buffer), (indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesNV, (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glGetCommandHeaderNV(tokenID, size) glatter_glGetCommandHeaderNV((tokenID), (size))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetCommandHeaderNV, (GLenum tokenID, GLuint size))
#define glGetStageIndexNV(shadertype) glatter_glGetStageIndexNV((shadertype))
GLATTER_UBLOCK(GLushort, APIENTRY, glGetStageIndexNV, (GLenum shadertype))
#define glIsCommandListNV(list) glatter_glIsCommandListNV((list))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsCommandListNV, (GLuint list))
#define glIsStateNV(state) glatter_glIsStateNV((state))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsStateNV, (GLuint state))
#define glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count) glatter_glListDrawCommandsStatesClientNV((list), (segment), (indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glListDrawCommandsStatesClientNV, (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glStateCaptureNV(state, mode) glatter_glStateCaptureNV((state), (mode))
GLATTER_UBLOCK(void, APIENTRY, glStateCaptureNV, (GLuint state, GLenum mode))
#endif // defined(GL_NV_command_list)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNV, (GLuint id, GLenum mode))
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNV, (void))
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV((xbits), (ybits))
GLATTER_UBLOCK(void, APIENTRY, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits))
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_dilate)
#define glConservativeRasterParameterfNV(pname, value) glatter_glConservativeRasterParameterfNV((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameterfNV, (GLenum pname, GLfloat value))
#endif // defined(GL_NV_conservative_raster_dilate)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameteriNV, (GLenum pname, GLint param))
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_draw_vulkan_image)
#define glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawVkImageNV((vkImage), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1))
GLATTER_UBLOCK(void, APIENTRY, glDrawVkImageNV, (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1))
#define glGetVkProcAddrNV(name) glatter_glGetVkProcAddrNV((name))
GLATTER_UBLOCK(GLVULKANPROCNV, APIENTRY, glGetVkProcAddrNV, (const GLchar *name))
#define glSignalVkFenceNV(vkFence) glatter_glSignalVkFenceNV((vkFence))
GLATTER_UBLOCK(void, APIENTRY, glSignalVkFenceNV, (GLuint64 vkFence))
#define glSignalVkSemaphoreNV(vkSemaphore) glatter_glSignalVkSemaphoreNV((vkSemaphore))
GLATTER_UBLOCK(void, APIENTRY, glSignalVkSemaphoreNV, (GLuint64 vkSemaphore))
#define glWaitVkSemaphoreNV(vkSemaphore) glatter_glWaitVkSemaphoreNV((vkSemaphore))
GLATTER_UBLOCK(void, APIENTRY, glWaitVkSemaphoreNV, (GLuint64 vkSemaphore))
#endif // defined(GL_NV_draw_vulkan_image)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV((color))
GLATTER_UBLOCK(void, APIENTRY, glFragmentCoverageColorNV, (GLuint color))
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV((components))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationNV, (GLenum components))
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV((n), (v))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationTableNV, (GLsizei n, const GLfloat *v))
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV((bufsize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetCoverageModulationTableNV, (GLsizei bufsize, GLfloat *v))
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample_coverage)
#define glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleCoverageNV((target), (coverageSamples), (colorSamples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_NV_framebuffer_multisample_coverage)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT *params))
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x))
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x))
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y))
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y))
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64NV, (GLint location, GLint64EXT x))
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64NV, (GLint location, GLuint64EXT x))
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y))
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y))
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV((target), (internalformat), (samples), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params))
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV((resultPath), (srcPath))
GLATTER_UBLOCK(void, APIENTRY, glCopyPathNV, (GLuint resultPath, GLuint srcPath))
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathNV, (GLuint path, GLenum coverMode))
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathNV, (GLuint path, GLenum coverMode))
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV((path), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeletePathsNV, (GLuint path, GLsizei range))
#define glGenPathsNV(range) glatter_glGenPathsNV((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenPathsNV, (GLsizei range))
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV((path), (commands))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCommandsNV, (GLuint path, GLubyte *commands))
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV((path), (coords))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCoordsNV, (GLuint path, GLfloat *coords))
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV((path), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glGetPathDashArrayNV, (GLuint path, GLfloat *dashArray))
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV((path), (startSegment), (numSegments))
GLATTER_UBLOCK(GLfloat, APIENTRY, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments))
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics))
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics))
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat *value))
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint *value))
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing))
GLATTER_UBLOCK(void, APIENTRY, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing))
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params))
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV((resultPath), (pathA), (pathB), (weight))
GLATTER_UBLOCK(void, APIENTRY, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight))
#define glIsPathNV(path) glatter_glIsPathNV((path))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPathNV, (GLuint path))
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV((path), (mask), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y))
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV((path), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y))
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV((path), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV((path), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV((func))
GLATTER_UBLOCK(void, APIENTRY, glPathCoverDepthFuncNV, (GLenum func))
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV((path), (dashCount), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat *dashArray))
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]))
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value))
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat *value))
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameteriNV, (GLuint path, GLenum pname, GLint value))
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterivNV, (GLuint path, GLenum pname, const GLint *value))
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units))
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask))
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV((path), (format), (length), (pathString))
GLATTER_UBLOCK(void, APIENTRY, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void *pathString))
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV((path), (coordStart), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY))
GLATTER_UBLOCK(GLboolean, APIENTRY, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY))
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV((program), (location), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV((path), (fillMode), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask))
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV((path), (reference), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask))
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV((path), (fillMode), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode))
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV((path), (reference), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode))
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV((resultPath), (srcPath), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues))
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV((resultPath), (numPaths), (paths), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights))
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV((target), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV()
GLATTER_UBLOCK(void, APIENTRY, glResolveDepthValuesNV, (void))
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_shader_buffer_load)
#define glGetBufferParameterui64vNV(target, pname, params) glatter_glGetBufferParameterui64vNV((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameterui64vNV, (GLenum target, GLenum pname, GLuint64EXT *params))
#define glGetIntegerui64vNV(value, result) glatter_glGetIntegerui64vNV((value), (result))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64vNV, (GLenum value, GLuint64EXT *result))
#define glGetNamedBufferParameterui64vNV(buffer, pname, params) glatter_glGetNamedBufferParameterui64vNV((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterui64vNV, (GLuint buffer, GLenum pname, GLuint64EXT *params))
#define glGetUniformui64vNV(program, location, params) glatter_glGetUniformui64vNV((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vNV, (GLuint program, GLint location, GLuint64EXT *params))
#define glIsBufferResidentNV(target) glatter_glIsBufferResidentNV((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBufferResidentNV, (GLenum target))
#define glIsNamedBufferResidentNV(buffer) glatter_glIsNamedBufferResidentNV((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedBufferResidentNV, (GLuint buffer))
#define glMakeBufferNonResidentNV(target) glatter_glMakeBufferNonResidentNV((target))
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferNonResidentNV, (GLenum target))
#define glMakeBufferResidentNV(target, access) glatter_glMakeBufferResidentNV((target), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferResidentNV, (GLenum target, GLenum access))
#define glMakeNamedBufferNonResidentNV(buffer) glatter_glMakeNamedBufferNonResidentNV((buffer))
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferNonResidentNV, (GLuint buffer))
#define glMakeNamedBufferResidentNV(buffer, access) glatter_glMakeNamedBufferResidentNV((buffer), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferResidentNV, (GLuint buffer, GLenum access))
#define glProgramUniformui64NV(program, location, value) glatter_glProgramUniformui64NV((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64NV, (GLuint program, GLint location, GLuint64EXT value))
#define glProgramUniformui64vNV(program, location, count, value) glatter_glProgramUniformui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniformui64NV(location, value) glatter_glUniformui64NV((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformui64NV, (GLint location, GLuint64EXT value))
#define glUniformui64vNV(location, count, value) glatter_glUniformui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_shader_buffer_load)
#if defined(GL_NV_texture_barrier)
#define glTextureBarrierNV() glatter_glTextureBarrierNV()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrierNV, (void))
#endif // defined(GL_NV_texture_barrier)
#if defined(GL_NV_vertex_attrib_integer_64bit)
#define glGetVertexAttribLi64vNV(index, pname, params) glatter_glGetVertexAttribLi64vNV((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLi64vNV, (GLuint index, GLenum pname, GLint64EXT *params))
#define glGetVertexAttribLui64vNV(index, pname, params) glatter_glGetVertexAttribLui64vNV((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vNV, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glVertexAttribL1i64NV(index, x) glatter_glVertexAttribL1i64NV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64NV, (GLuint index, GLint64EXT x))
#define glVertexAttribL1i64vNV(index, v) glatter_glVertexAttribL1i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL1ui64NV(index, x) glatter_glVertexAttribL1ui64NV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64NV, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vNV(index, v) glatter_glVertexAttribL1ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL2i64NV(index, x, y) glatter_glVertexAttribL2i64NV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64NV, (GLuint index, GLint64EXT x, GLint64EXT y))
#define glVertexAttribL2i64vNV(index, v) glatter_glVertexAttribL2i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL2ui64NV(index, x, y) glatter_glVertexAttribL2ui64NV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y))
#define glVertexAttribL2ui64vNV(index, v) glatter_glVertexAttribL2ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL3i64NV(index, x, y, z) glatter_glVertexAttribL3i64NV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glVertexAttribL3i64vNV(index, v) glatter_glVertexAttribL3i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL3ui64NV(index, x, y, z) glatter_glVertexAttribL3ui64NV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glVertexAttribL3ui64vNV(index, v) glatter_glVertexAttribL3ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL4i64NV(index, x, y, z, w) glatter_glVertexAttribL4i64NV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glVertexAttribL4i64vNV(index, v) glatter_glVertexAttribL4i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL4ui64NV(index, x, y, z, w) glatter_glVertexAttribL4ui64NV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glVertexAttribL4ui64vNV(index, v) glatter_glVertexAttribL4ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribLFormatNV(index, size, type, stride) glatter_glVertexAttribLFormatNV((index), (size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_attrib_integer_64bit)
#if defined(GL_NV_vertex_buffer_unified_memory)
#define glBufferAddressRangeNV(pname, index, address, length) glatter_glBufferAddressRangeNV((pname), (index), (address), (length))
GLATTER_UBLOCK(void, APIENTRY, glBufferAddressRangeNV, (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length))
#define glColorFormatNV(size, type, stride) glatter_glColorFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glEdgeFlagFormatNV(stride) glatter_glEdgeFlagFormatNV((stride))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagFormatNV, (GLsizei stride))
#define glFogCoordFormatNV(type, stride) glatter_glFogCoordFormatNV((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordFormatNV, (GLenum type, GLsizei stride))
#define glGetIntegerui64i_vNV(value, index, result) glatter_glGetIntegerui64i_vNV((value), (index), (result))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64i_vNV, (GLenum value, GLuint index, GLuint64EXT *result))
#define glIndexFormatNV(type, stride) glatter_glIndexFormatNV((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glIndexFormatNV, (GLenum type, GLsizei stride))
#define glNormalFormatNV(type, stride) glatter_glNormalFormatNV((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glNormalFormatNV, (GLenum type, GLsizei stride))
#define glSecondaryColorFormatNV(size, type, stride) glatter_glSecondaryColorFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glTexCoordFormatNV(size, type, stride) glatter_glTexCoordFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glVertexAttribFormatNV(index, size, type, normalized, stride) glatter_glVertexAttribFormatNV((index), (size), (type), (normalized), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormatNV, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride))
#define glVertexAttribIFormatNV(index, size, type, stride) glatter_glVertexAttribIFormatNV((index), (size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#define glVertexFormatNV(size, type, stride) glatter_glVertexFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexFormatNV, (GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_buffer_unified_memory)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV((index), (swizzlex), (swizzley), (swizzlez), (swizzlew))
GLATTER_UBLOCK(void, APIENTRY, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew))
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR((target), (attachment), (texture), (level), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview)
#if defined(GL_VERSION_1_0)
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepth(depth) glatter_glClearDepth((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepth, (GLdouble depth))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, APIENTRY, glCullFace, (GLenum mode))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRange(n, f) glatter_glDepthRange((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRange, (GLdouble n, GLdouble f))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, APIENTRY, glDisable, (GLenum cap))
#define glDrawBuffer(buf) glatter_glDrawBuffer((buf))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffer, (GLenum buf))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, APIENTRY, glEnable, (GLenum cap))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, APIENTRY, glFlush, (void))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, APIENTRY, glFrontFace, (GLenum mode))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetDoublev(pname, data) glatter_glGetDoublev((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublev, (GLenum pname, GLdouble *data))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetString, (GLenum name))
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage((target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabled, (GLenum cap))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, APIENTRY, glLineWidth, (GLfloat width))
#define glLogicOp(opcode) glatter_glLogicOp((opcode))
GLATTER_UBLOCK(void, APIENTRY, glLogicOp, (GLenum opcode))
#define glPixelStoref(pname, param) glatter_glPixelStoref((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStoref, (GLenum pname, GLfloat param))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPointSize(size) glatter_glPointSize((size))
GLATTER_UBLOCK(void, APIENTRY, glPointSize, (GLfloat size))
#define glPolygonMode(face, mode) glatter_glPolygonMode((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glPolygonMode, (GLenum face, GLenum mode))
#define glReadBuffer(src) glatter_glReadBuffer((src))
GLATTER_UBLOCK(void, APIENTRY, glReadBuffer, (GLenum src))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D((target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage1D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_VERSION_1_0)
#if defined(GL_VERSION_1_1)
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D((target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetPointerv(pname, params) glatter_glGetPointerv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerv, (GLenum pname, void **params))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTexture, (GLuint texture))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_1)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, APIENTRY, glActiveTexture, (GLenum texture))
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage((target), (level), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImage, (GLenum target, GLint level, void *img))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays((mode), (first), (count), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArrays, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount))
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements((mode), (count), (type), (indices), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElements, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount))
#define glPointParameterf(pname, param) glatter_glPointParameterf((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#define glPointParameterfv(pname, params) glatter_glPointParameterfv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#define glPointParameteri(pname, param) glatter_glPointParameteri((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteri, (GLenum pname, GLint param))
#define glPointParameteriv(pname, params) glatter_glPointParameteriv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriv, (GLenum pname, const GLint *params))
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glEndQuery(target) glatter_glEndQuery((target))
GLATTER_UBLOCK(void, APIENTRY, glEndQuery, (GLenum target))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenQueries(n, ids) glatter_glGenQueries((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, void *data))
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectiv, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsQuery(id) glatter_glIsQuery((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQuery, (GLuint id))
#define glMapBuffer(target, access) glatter_glMapBuffer((target), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBuffer, (GLenum target, GLenum access))
#define glUnmapBuffer(target) glatter_glUnmapBuffer((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBuffer, (GLenum target))
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glCompileShader(shader) glatter_glCompileShader((shader))
GLATTER_UBLOCK(void, APIENTRY, glCompileShader, (GLuint shader))
#define glCreateProgram() glatter_glCreateProgram()
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader((type))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShader, (GLenum type))
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
GLATTER_UBLOCK(void, APIENTRY, glDeleteShader, (GLuint shader))
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdv, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glIsProgram(program) glatter_glIsProgram((program))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgram, (GLuint program))
#define glIsShader(shader) glatter_glIsShader((shader))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsShader, (GLuint shader))
#define glLinkProgram(program) glatter_glLinkProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glLinkProgram, (GLuint program))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1d, (GLuint index, GLdouble x))
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1s, (GLuint index, GLshort x))
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sv, (GLuint index, const GLshort *v))
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2s, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sv, (GLuint index, const GLshort *v))
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3s, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nbv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Niv, (GLuint index, const GLint *v))
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nsv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nub, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nuiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nusv, (GLuint index, const GLushort *v))
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4iv, (GLuint index, const GLint *v))
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4s, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usv, (GLuint index, const GLushort *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRender, (GLuint id, GLenum mode))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation((program), (color), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocation, (GLuint program, GLuint color, const GLchar *name))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindVertexArray(array) glatter_glBindVertexArray((array))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClampColor(target, clamp) glatter_glClampColor((target), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glClampColor, (GLenum target, GLenum clamp))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDisablei(target, index) glatter_glDisablei((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisablei, (GLenum target, GLuint index))
#define glEnablei(target, index) glatter_glEnablei((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnablei, (GLenum target, GLuint index))
#define glEndConditionalRender() glatter_glEndConditionalRender()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRender, (void))
#define glEndTransformFeedback() glatter_glEndTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedback, (void))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange((target), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi((name), (index))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glIsEnabledi(target, index) glatter_glIsEnabledi((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsVertexArray(array) glatter_glIsVertexArray((array))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1i, (GLuint index, GLint x))
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iv, (GLuint index, const GLint *v))
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ui, (GLuint index, GLuint x))
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2i, (GLuint index, GLint x, GLint y))
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iv, (GLuint index, const GLint *v))
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ui, (GLuint index, GLuint x, GLuint y))
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3i, (GLuint index, GLint x, GLint y, GLint z))
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iv, (GLuint index, const GLint *v))
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ui, (GLuint index, GLuint x, GLuint y, GLuint z))
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bv, (GLuint index, const GLbyte *v))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4sv, (GLuint index, const GLshort *v))
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usv, (GLuint index, const GLushort *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName((program), (uniformIndex), (bufSize), (length), (uniformName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformName, (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex((index))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndex, (GLuint index))
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glDeleteSync(sync) glatter_glDeleteSync((sync))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSync, (GLsync sync))
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glFenceSync(condition, flags) glatter_glFenceSync((condition), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glIsSync(sync) glatter_glIsSync((sync))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSync, (GLsync sync))
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex((mode), (count), (type), (indices), (drawcount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsBaseVertex, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex))
#define glProvokingVertex(mode) glatter_glProvokingVertex((mode))
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertex, (GLenum mode))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski((maskNumber), (mask))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(void, APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed((program), (colorNumber), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationIndexed, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#define glBindSampler(unit, sampler) glatter_glBindSampler((unit), (sampler))
GLATTER_UBLOCK(void, APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glGenSamplers(count, samplers) glatter_glGenSamplers((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataIndex, (GLuint program, const GLchar *name))
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64v, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64v, (GLuint id, GLenum pname, GLuint64 *params))
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glIsSampler(sampler) glatter_glIsSampler((sampler))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSampler, (GLuint sampler))
#define glQueryCounter(id, target) glatter_glQueryCounter((id), (target))
GLATTER_UBLOCK(void, APIENTRY, glQueryCounter, (GLuint id, GLenum target))
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed((target), (index), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryIndexed, (GLenum target, GLuint index, GLuint id))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect((mode), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect((mode), (type), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback((mode), (id))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedback, (GLenum mode, GLuint id))
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream((mode), (id), (stream))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStream, (GLenum mode, GLuint id, GLuint stream))
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEndQueryIndexed, (GLenum target, GLuint index))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv((program), (shadertype), (index), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformiv, (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values))
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv((program), (shadertype), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStageiv, (GLuint program, GLenum shadertype, GLenum pname, GLint *values))
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryIndexediv, (GLenum target, GLuint index, GLenum pname, GLint *params))
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex((program), (shadertype), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetSubroutineIndex, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation((program), (shadertype), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetSubroutineUniformLocation, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv((shadertype), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformSubroutineuiv, (GLenum shadertype, GLint location, GLuint *params))
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformdv, (GLuint program, GLint location, GLdouble *params))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedback, (GLuint id))
#define glMinSampleShading(value) glatter_glMinSampleShading((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShading, (GLfloat value))
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv((pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameterfv, (GLenum pname, const GLfloat *values))
#define glPatchParameteri(pname, value) glatter_glPatchParameteri((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedback, (void))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedback, (void))
#define glUniform1d(location, x) glatter_glUniform1d((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1d, (GLint location, GLdouble x))
#define glUniform1dv(location, count, value) glatter_glUniform1dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform2d(location, x, y) glatter_glUniform2d((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2d, (GLint location, GLdouble x, GLdouble y))
#define glUniform2dv(location, count, value) glatter_glUniform2dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform3d(location, x, y, z) glatter_glUniform3d((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3d, (GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glUniform3dv(location, count, value) glatter_glUniform3dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4d, (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glUniform4dv(location, count, value) glatter_glUniform4dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv((shadertype), (count), (indices))
GLATTER_UBLOCK(void, APIENTRY, glUniformSubroutinesuiv, (GLenum shadertype, GLsizei count, const GLuint *indices))
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram((pipeline), (program))
GLATTER_UBLOCK(void, APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glClearDepthf(d) glatter_glClearDepthf((d))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthf, (GLfloat d))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv((type), (count), (strings))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeArrayv, (GLuint first, GLsizei count, const GLdouble *v))
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed((index), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeIndexed, (GLuint index, GLdouble n, GLdouble f))
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_v, (GLenum target, GLuint index, GLdouble *data))
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_v, (GLenum target, GLuint index, GLfloat *data))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv((pipeline), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdv, (GLuint index, GLenum pname, GLdouble *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline((pipeline))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1d, (GLuint program, GLint location, GLdouble v0))
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2d, (GLuint program, GLint location, GLdouble v0, GLdouble v1))
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2))
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3))
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
GLATTER_UBLOCK(void, APIENTRY, glReleaseShaderCompiler, (void))
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorArrayv, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexed, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexedv, (GLuint index, const GLint *v))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages((pipeline), (stages), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1d, (GLuint index, GLdouble x))
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dv, (GLuint index, const GLdouble *v))
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportArrayv, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedf, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedfv, (GLuint index, const GLfloat *v))
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance((mode), (first), (count), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedBaseInstance, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance((mode), (count), (type), (indices), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertexBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced((mode), (id), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackInstanced, (GLenum mode, GLuint id, GLsizei instancecount))
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced((mode), (id), (stream), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStreamInstanced, (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount))
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv((program), (bufferIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAtomicCounterBufferiv, (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D((target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage1D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData((target), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferData, (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData((target), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferSubData, (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect((indirect))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformati64v, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params))
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocationIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData((buffer))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferData, (GLuint buffer))
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage((texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexImage, (GLuint texture, GLint level))
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth))
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect((mode), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirect, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect((mode), (type), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel((ptr), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#define glPopDebugGroup() glatter_glPopDebugGroup()
GLATTER_UBLOCK(void, APIENTRY, glPopDebugGroup, (void))
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup((source), (id), (length), (message))
GLATTER_UBLOCK(void, APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding((program), (storageBlockIndex), (storageBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glShaderStorageBlockBinding, (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding))
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, APIENTRY, glTextureView, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding((attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor((bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase((target), (first), (count), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersBase, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers))
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange((target), (first), (count), (buffers), (offsets), (sizes))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersRange, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes))
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers((first), (count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glBindSamplers, (GLuint first, GLsizei count, const GLuint *samplers))
#define glBindTextures(first, count, textures) glatter_glBindTextures((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers((first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffers, (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage((target), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glBufferStorage, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage((texture), (level), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexImage, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit((unit), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTextureUnit, (GLuint unit, GLuint texture))
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitNamedFramebuffer, (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatus, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferData, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubData, (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) glatter_glClearNamedFramebufferfi((framebuffer), (buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfi, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferuiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClipControl(origin, depth) glatter_glClipControl((origin), (depth))
GLATTER_UBLOCK(void, APIENTRY, glClipControl, (GLenum origin, GLenum depth))
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D((texture), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyNamedBufferSubData, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D((texture), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateBuffers, (GLsizei n, GLuint *buffers))
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glCreateProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glCreateQueries(target, n, ids) glatter_glCreateQueries((target), (n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateQueries, (GLenum target, GLsizei n, GLuint *ids))
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers((n), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glCreateSamplers, (GLsizei n, GLuint *samplers))
#define glCreateTextures(target, n, textures) glatter_glCreateTextures((target), (n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glCreateTextures, (GLenum target, GLsizei n, GLuint *textures))
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glCreateVertexArrays, (GLsizei n, GLuint *arrays))
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap((texture))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmap, (GLuint texture))
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage((texture), (level), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImage, (GLuint texture, GLint level, GLsizei bufSize, void *pixels))
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels))
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatus, (void))
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteri64v, (GLuint buffer, GLenum pname, GLint64 *params))
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteriv, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointerv, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameteriv, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameteriv, (GLuint framebuffer, GLenum pname, GLint *param))
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameteriv, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjecti64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectui64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectuiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage((texture), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImage, (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfv, (GLuint texture, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameteriv, (GLuint texture, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIiv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuiv, (GLuint texture, GLenum pname, GLuint *params))
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfv, (GLuint texture, GLenum pname, GLfloat *params))
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameteriv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki64_v, (GLuint xfb, GLenum pname, GLuint index, GLint64 *param))
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki_v, (GLuint xfb, GLenum pname, GLuint index, GLint *param))
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv((xfb), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackiv, (GLuint xfb, GLenum pname, GLint *param))
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexed64iv, (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param))
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexediv, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayiv, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage((target), (lod), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImage, (GLenum target, GLint lod, GLsizei bufSize, void *pixels))
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage((target), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdv, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData((framebuffer), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferSubData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBuffer, (GLuint buffer, GLenum access))
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferData, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorage, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer((framebuffer), (buf))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffer, (GLuint framebuffer, GLenum buf))
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffers, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteri, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer((framebuffer), (src))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferReadBuffer, (GLuint framebuffer, GLenum src))
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbuffer, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayer, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorage, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisample, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glTextureBarrier() glatter_glTextureBarrier()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrier, (void))
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer((texture), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBuffer, (GLuint texture, GLenum internalformat, GLuint buffer))
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange((texture), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRange, (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIiv, (GLuint texture, GLenum pname, const GLint *params))
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuiv, (GLuint texture, GLenum pname, const GLuint *params))
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterf, (GLuint texture, GLenum pname, GLfloat param))
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfv, (GLuint texture, GLenum pname, const GLfloat *param))
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteri, (GLuint texture, GLenum pname, GLint param))
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriv, (GLuint texture, GLenum pname, const GLint *param))
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D((texture), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D((texture), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D((texture), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D((texture), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase((xfb), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferBase, (GLuint xfb, GLuint index, GLuint buffer))
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange((xfb), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferRange, (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBuffer, (GLuint buffer))
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribBinding, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribIFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribLFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindingDivisor, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer((vaobj), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayElementBuffer, (GLuint vaobj, GLuint buffer))
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffer, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers((vaobj), (first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffers, (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#endif // defined(GL_VERSION_4_5)
#if defined(GL_VERSION_4_6)
#define glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCount((mode), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCount, (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCount((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCount, (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glPolygonOffsetClamp(factor, units, clamp) glatter_glPolygonOffsetClamp((factor), (units), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClamp, (GLfloat factor, GLfloat units, GLfloat clamp))
#define glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShader((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue))
GLATTER_UBLOCK(void, APIENTRY, glSpecializeShader, (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue))
#endif // defined(GL_VERSION_4_6)
#endif // defined(__gl_glcorearb_h_)
#if defined(__gl_glext_h_)
#if defined(GL_3DFX_tbuffer)
#define glTbufferMask3DFX(mask) glatter_glTbufferMask3DFX((mask))
GLATTER_UBLOCK(void, APIENTRY, glTbufferMask3DFX, (GLuint mask))
#endif // defined(GL_3DFX_tbuffer)
#if defined(GL_AMD_debug_output)
#define glDebugMessageCallbackAMD(callback, userParam) glatter_glDebugMessageCallbackAMD((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackAMD, (GLDEBUGPROCAMD callback, void *userParam))
#define glDebugMessageEnableAMD(category, severity, count, ids, enabled) glatter_glDebugMessageEnableAMD((category), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageEnableAMD, (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertAMD(category, severity, id, length, buf) glatter_glDebugMessageInsertAMD((category), (severity), (id), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertAMD, (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message) glatter_glGetDebugMessageLogAMD((count), (bufsize), (categories), (severities), (ids), (lengths), (message))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogAMD, (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message))
#endif // defined(GL_AMD_debug_output)
#if defined(GL_AMD_draw_buffers_blend)
#define glBlendEquationIndexedAMD(buf, mode) glatter_glBlendEquationIndexedAMD((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationIndexedAMD, (GLuint buf, GLenum mode))
#define glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateIndexedAMD((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateIndexedAMD, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendFuncIndexedAMD(buf, src, dst) glatter_glBlendFuncIndexedAMD((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncIndexedAMD, (GLuint buf, GLenum src, GLenum dst))
#define glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateIndexedAMD((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateIndexedAMD, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#endif // defined(GL_AMD_draw_buffers_blend)
#if defined(GL_AMD_framebuffer_sample_positions)
#define glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values) glatter_glFramebufferSamplePositionsfvAMD((target), (numsamples), (pixelindex), (values))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSamplePositionsfvAMD, (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values))
#define glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values) glatter_glGetFramebufferParameterfvAMD((target), (pname), (numsamples), (pixelindex), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterfvAMD, (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values))
#define glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values) glatter_glGetNamedFramebufferParameterfvAMD((framebuffer), (pname), (numsamples), (pixelindex), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameterfvAMD, (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values))
#define glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values) glatter_glNamedFramebufferSamplePositionsfvAMD((framebuffer), (numsamples), (pixelindex), (values))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSamplePositionsfvAMD, (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values))
#endif // defined(GL_AMD_framebuffer_sample_positions)
#if defined(GL_AMD_gpu_shader_int64)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT *params))
#define glGetUniformui64vNV(program, location, params) glatter_glGetUniformui64vNV((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vNV, (GLuint program, GLint location, GLuint64EXT *params))
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x))
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x))
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y))
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y))
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64NV, (GLint location, GLint64EXT x))
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64NV, (GLint location, GLuint64EXT x))
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y))
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y))
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_AMD_gpu_shader_int64)
#if defined(GL_AMD_interleaved_elements)
#define glVertexAttribParameteriAMD(index, pname, param) glatter_glVertexAttribParameteriAMD((index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribParameteriAMD, (GLuint index, GLenum pname, GLint param))
#endif // defined(GL_AMD_interleaved_elements)
#if defined(GL_AMD_multi_draw_indirect)
#define glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride) glatter_glMultiDrawArraysIndirectAMD((mode), (indirect), (primcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectAMD, (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride))
#define glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride) glatter_glMultiDrawElementsIndirectAMD((mode), (type), (indirect), (primcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectAMD, (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride))
#endif // defined(GL_AMD_multi_draw_indirect)
#if defined(GL_AMD_name_gen_delete)
#define glDeleteNamesAMD(identifier, num, names) glatter_glDeleteNamesAMD((identifier), (num), (names))
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamesAMD, (GLenum identifier, GLuint num, const GLuint *names))
#define glGenNamesAMD(identifier, num, names) glatter_glGenNamesAMD((identifier), (num), (names))
GLATTER_UBLOCK(void, APIENTRY, glGenNamesAMD, (GLenum identifier, GLuint num, GLuint *names))
#define glIsNameAMD(identifier, name) glatter_glIsNameAMD((identifier), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNameAMD, (GLenum identifier, GLuint name))
#endif // defined(GL_AMD_name_gen_delete)
#if defined(GL_AMD_occlusion_query_event)
#define glQueryObjectParameteruiAMD(target, id, pname, param) glatter_glQueryObjectParameteruiAMD((target), (id), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glQueryObjectParameteruiAMD, (GLenum target, GLuint id, GLenum pname, GLuint param))
#endif // defined(GL_AMD_occlusion_query_event)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD((monitor))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfMonitorAMD, (GLuint monitor))
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD((monitor))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfMonitorAMD, (GLuint monitor))
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glGenPerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD((monitor), (pname), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten))
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD((group), (counter), (pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void *data))
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD((group), (counter), (bufSize), (length), (counterString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString))
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD((group), (numCounters), (maxActiveCounters), (counterSize), (counters))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCountersAMD, (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters))
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD((group), (bufSize), (length), (groupString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString))
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD((numGroups), (groupsSize), (groups))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupsAMD, (GLint *numGroups, GLsizei groupsSize, GLuint *groups))
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD((monitor), (enable), (group), (numCounters), (counterList))
GLATTER_UBLOCK(void, APIENTRY, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList))
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_AMD_sample_positions)
#define glSetMultisamplefvAMD(pname, index, val) glatter_glSetMultisamplefvAMD((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glSetMultisamplefvAMD, (GLenum pname, GLuint index, const GLfloat *val))
#endif // defined(GL_AMD_sample_positions)
#if defined(GL_AMD_sparse_texture)
#define glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) glatter_glTexStorageSparseAMD((target), (internalFormat), (width), (height), (depth), (layers), (flags))
GLATTER_UBLOCK(void, APIENTRY, glTexStorageSparseAMD, (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags))
#define glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) glatter_glTextureStorageSparseAMD((texture), (target), (internalFormat), (width), (height), (depth), (layers), (flags))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageSparseAMD, (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags))
#endif // defined(GL_AMD_sparse_texture)
#if defined(GL_AMD_stencil_operation_extended)
#define glStencilOpValueAMD(face, value) glatter_glStencilOpValueAMD((face), (value))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpValueAMD, (GLenum face, GLuint value))
#endif // defined(GL_AMD_stencil_operation_extended)
#if defined(GL_AMD_vertex_shader_tessellator)
#define glTessellationFactorAMD(factor) glatter_glTessellationFactorAMD((factor))
GLATTER_UBLOCK(void, APIENTRY, glTessellationFactorAMD, (GLfloat factor))
#define glTessellationModeAMD(mode) glatter_glTessellationModeAMD((mode))
GLATTER_UBLOCK(void, APIENTRY, glTessellationModeAMD, (GLenum mode))
#endif // defined(GL_AMD_vertex_shader_tessellator)
#if defined(GL_APPLE_element_array)
#define glDrawElementArrayAPPLE(mode, first, count) glatter_glDrawElementArrayAPPLE((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementArrayAPPLE, (GLenum mode, GLint first, GLsizei count))
#define glDrawRangeElementArrayAPPLE(mode, start, end, first, count) glatter_glDrawRangeElementArrayAPPLE((mode), (start), (end), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count))
#define glElementPointerAPPLE(type, pointer) glatter_glElementPointerAPPLE((type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glElementPointerAPPLE, (GLenum type, const void *pointer))
#define glMultiDrawElementArrayAPPLE(mode, first, count, primcount) glatter_glMultiDrawElementArrayAPPLE((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementArrayAPPLE, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#define glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount) glatter_glMultiDrawRangeElementArrayAPPLE((mode), (start), (end), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount))
#endif // defined(GL_APPLE_element_array)
#if defined(GL_APPLE_fence)
#define glDeleteFencesAPPLE(n, fences) glatter_glDeleteFencesAPPLE((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFencesAPPLE, (GLsizei n, const GLuint *fences))
#define glFinishFenceAPPLE(fence) glatter_glFinishFenceAPPLE((fence))
GLATTER_UBLOCK(void, APIENTRY, glFinishFenceAPPLE, (GLuint fence))
#define glFinishObjectAPPLE(object, name) glatter_glFinishObjectAPPLE((object), (name))
GLATTER_UBLOCK(void, APIENTRY, glFinishObjectAPPLE, (GLenum object, GLint name))
#define glGenFencesAPPLE(n, fences) glatter_glGenFencesAPPLE((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glGenFencesAPPLE, (GLsizei n, GLuint *fences))
#define glIsFenceAPPLE(fence) glatter_glIsFenceAPPLE((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFenceAPPLE, (GLuint fence))
#define glSetFenceAPPLE(fence) glatter_glSetFenceAPPLE((fence))
GLATTER_UBLOCK(void, APIENTRY, glSetFenceAPPLE, (GLuint fence))
#define glTestFenceAPPLE(fence) glatter_glTestFenceAPPLE((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestFenceAPPLE, (GLuint fence))
#define glTestObjectAPPLE(object, name) glatter_glTestObjectAPPLE((object), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestObjectAPPLE, (GLenum object, GLuint name))
#endif // defined(GL_APPLE_fence)
#if defined(GL_APPLE_flush_buffer_range)
#define glBufferParameteriAPPLE(target, pname, param) glatter_glBufferParameteriAPPLE((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glBufferParameteriAPPLE, (GLenum target, GLenum pname, GLint param))
#define glFlushMappedBufferRangeAPPLE(target, offset, size) glatter_glFlushMappedBufferRangeAPPLE((target), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRangeAPPLE, (GLenum target, GLintptr offset, GLsizeiptr size))
#endif // defined(GL_APPLE_flush_buffer_range)
#if defined(GL_APPLE_object_purgeable)
#define glGetObjectParameterivAPPLE(objectType, name, pname, params) glatter_glGetObjectParameterivAPPLE((objectType), (name), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterivAPPLE, (GLenum objectType, GLuint name, GLenum pname, GLint *params))
#define glObjectPurgeableAPPLE(objectType, name, option) glatter_glObjectPurgeableAPPLE((objectType), (name), (option))
GLATTER_UBLOCK(GLenum, APIENTRY, glObjectPurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option))
#define glObjectUnpurgeableAPPLE(objectType, name, option) glatter_glObjectUnpurgeableAPPLE((objectType), (name), (option))
GLATTER_UBLOCK(GLenum, APIENTRY, glObjectUnpurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option))
#endif // defined(GL_APPLE_object_purgeable)
#if defined(GL_APPLE_texture_range)
#define glGetTexParameterPointervAPPLE(target, pname, params) glatter_glGetTexParameterPointervAPPLE((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterPointervAPPLE, (GLenum target, GLenum pname, void **params))
#define glTextureRangeAPPLE(target, length, pointer) glatter_glTextureRangeAPPLE((target), (length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTextureRangeAPPLE, (GLenum target, GLsizei length, const void *pointer))
#endif // defined(GL_APPLE_texture_range)
#if defined(GL_APPLE_vertex_array_object)
#define glBindVertexArrayAPPLE(array) glatter_glBindVertexArrayAPPLE((array))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArrayAPPLE, (GLuint array))
#define glDeleteVertexArraysAPPLE(n, arrays) glatter_glDeleteVertexArraysAPPLE((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArraysAPPLE, (GLsizei n, const GLuint *arrays))
#define glGenVertexArraysAPPLE(n, arrays) glatter_glGenVertexArraysAPPLE((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArraysAPPLE, (GLsizei n, GLuint *arrays))
#define glIsVertexArrayAPPLE(array) glatter_glIsVertexArrayAPPLE((array))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArrayAPPLE, (GLuint array))
#endif // defined(GL_APPLE_vertex_array_object)
#if defined(GL_APPLE_vertex_array_range)
#define glFlushVertexArrayRangeAPPLE(length, pointer) glatter_glFlushVertexArrayRangeAPPLE((length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glFlushVertexArrayRangeAPPLE, (GLsizei length, void *pointer))
#define glVertexArrayParameteriAPPLE(pname, param) glatter_glVertexArrayParameteriAPPLE((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayParameteriAPPLE, (GLenum pname, GLint param))
#define glVertexArrayRangeAPPLE(length, pointer) glatter_glVertexArrayRangeAPPLE((length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayRangeAPPLE, (GLsizei length, void *pointer))
#endif // defined(GL_APPLE_vertex_array_range)
#if defined(GL_APPLE_vertex_program_evaluators)
#define glDisableVertexAttribAPPLE(index, pname) glatter_glDisableVertexAttribAPPLE((index), (pname))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribAPPLE, (GLuint index, GLenum pname))
#define glEnableVertexAttribAPPLE(index, pname) glatter_glEnableVertexAttribAPPLE((index), (pname))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribAPPLE, (GLuint index, GLenum pname))
#define glIsVertexAttribEnabledAPPLE(index, pname) glatter_glIsVertexAttribEnabledAPPLE((index), (pname))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexAttribEnabledAPPLE, (GLuint index, GLenum pname))
#define glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1dAPPLE((index), (size), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib1dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points))
#define glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1fAPPLE((index), (size), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib1fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points))
#define glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2dAPPLE((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib2dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points))
#define glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2fAPPLE((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib2fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points))
#endif // defined(GL_APPLE_vertex_program_evaluators)
#if defined(GL_ARB_ES3_2_compatibility)
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxARB((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveBoundingBoxARB, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_ARB_ES3_2_compatibility)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleARB, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleARB, (GLuint texture))
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleARB, (GLuint texture, GLuint sampler))
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vARB, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentARB, (GLuint64 handle))
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentARB, (GLuint64 handle))
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentARB, (GLuint64 handle))
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentARB, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentARB, (GLuint64 handle))
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentARB, (GLuint64 handle))
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64ARB, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64ARB, (GLint location, GLuint64 value))
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64ARB, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vARB, (GLuint index, const GLuint64EXT *v))
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB((context), (event), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glCreateSyncFromCLeventARB, (struct _cl_context *context, struct _cl_event *event, GLbitfield flags))
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_color_buffer_float)
#define glClampColorARB(target, clamp) glatter_glClampColorARB((target), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glClampColorARB, (GLenum target, GLenum clamp))
#endif // defined(GL_ARB_color_buffer_float)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeGroupSizeARB, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z))
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackARB, (GLDEBUGPROCARB callback, const void *userParam))
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControlARB, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertARB, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogARB, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers)
#define glDrawBuffersARB(n, bufs) glatter_glDrawBuffersARB((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffersARB, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_ARB_draw_buffers)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateiARB, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationiARB, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateiARB, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunciARB, (GLuint buf, GLenum src, GLenum dst))
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_draw_instanced)
#define glDrawArraysInstancedARB(mode, first, count, primcount) glatter_glDrawArraysInstancedARB((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedARB, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedARB((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedARB, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_ARB_draw_instanced)
#if defined(GL_ARB_fragment_program)
#define glBindProgramARB(target, program) glatter_glBindProgramARB((target), (program))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramARB, (GLenum target, GLuint program))
#define glDeleteProgramsARB(n, programs) glatter_glDeleteProgramsARB((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramsARB, (GLsizei n, const GLuint *programs))
#define glGenProgramsARB(n, programs) glatter_glGenProgramsARB((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramsARB, (GLsizei n, GLuint *programs))
#define glGetProgramEnvParameterdvARB(target, index, params) glatter_glGetProgramEnvParameterdvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterdvARB, (GLenum target, GLuint index, GLdouble *params))
#define glGetProgramEnvParameterfvARB(target, index, params) glatter_glGetProgramEnvParameterfvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterfvARB, (GLenum target, GLuint index, GLfloat *params))
#define glGetProgramLocalParameterdvARB(target, index, params) glatter_glGetProgramLocalParameterdvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterdvARB, (GLenum target, GLuint index, GLdouble *params))
#define glGetProgramLocalParameterfvARB(target, index, params) glatter_glGetProgramLocalParameterfvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterfvARB, (GLenum target, GLuint index, GLfloat *params))
#define glGetProgramStringARB(target, pname, string) glatter_glGetProgramStringARB((target), (pname), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStringARB, (GLenum target, GLenum pname, void *string))
#define glGetProgramivARB(target, pname, params) glatter_glGetProgramivARB((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramivARB, (GLenum target, GLenum pname, GLint *params))
#define glIsProgramARB(program) glatter_glIsProgramARB((program))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramARB, (GLuint program))
#define glProgramEnvParameter4dARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4dARB((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramEnvParameter4dvARB(target, index, params) glatter_glProgramEnvParameter4dvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4dvARB, (GLenum target, GLuint index, const GLdouble *params))
#define glProgramEnvParameter4fARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4fARB((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramEnvParameter4fvARB(target, index, params) glatter_glProgramEnvParameter4fvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4fvARB, (GLenum target, GLuint index, const GLfloat *params))
#define glProgramLocalParameter4dARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4dARB((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramLocalParameter4dvARB(target, index, params) glatter_glProgramLocalParameter4dvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4dvARB, (GLenum target, GLuint index, const GLdouble *params))
#define glProgramLocalParameter4fARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4fARB((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramLocalParameter4fvARB(target, index, params) glatter_glProgramLocalParameter4fvARB((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4fvARB, (GLenum target, GLuint index, const GLfloat *params))
#define glProgramStringARB(target, format, len, string) glatter_glProgramStringARB((target), (format), (len), (string))
GLATTER_UBLOCK(void, APIENTRY, glProgramStringARB, (GLenum target, GLenum format, GLsizei len, const void *string))
#endif // defined(GL_ARB_fragment_program)
#if defined(GL_ARB_geometry_shader4)
#define glFramebufferTextureARB(target, attachment, texture, level) glatter_glFramebufferTextureARB((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureARB, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceARB((target), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureFaceARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerARB((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayerARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glProgramParameteriARB(program, pname, value) glatter_glProgramParameteriARB((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteriARB, (GLuint program, GLenum pname, GLint value))
#endif // defined(GL_ARB_geometry_shader4)
#if defined(GL_ARB_gl_spirv)
#define glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShaderARB((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue))
GLATTER_UBLOCK(void, APIENTRY, glSpecializeShaderARB, (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue))
#endif // defined(GL_ARB_gl_spirv)
#if defined(GL_ARB_gpu_shader_int64)
#define glGetUniformi64vARB(program, location, params) glatter_glGetUniformi64vARB((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vARB, (GLuint program, GLint location, GLint64 *params))
#define glGetUniformui64vARB(program, location, params) glatter_glGetUniformui64vARB((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vARB, (GLuint program, GLint location, GLuint64 *params))
#define glGetnUniformi64vARB(program, location, bufSize, params) glatter_glGetnUniformi64vARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformi64vARB, (GLuint program, GLint location, GLsizei bufSize, GLint64 *params))
#define glGetnUniformui64vARB(program, location, bufSize, params) glatter_glGetnUniformui64vARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformui64vARB, (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params))
#define glProgramUniform1i64ARB(program, location, x) glatter_glProgramUniform1i64ARB((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64ARB, (GLuint program, GLint location, GLint64 x))
#define glProgramUniform1i64vARB(program, location, count, value) glatter_glProgramUniform1i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform1ui64ARB(program, location, x) glatter_glProgramUniform1ui64ARB((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64ARB, (GLuint program, GLint location, GLuint64 x))
#define glProgramUniform1ui64vARB(program, location, count, value) glatter_glProgramUniform1ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform2i64ARB(program, location, x, y) glatter_glProgramUniform2i64ARB((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y))
#define glProgramUniform2i64vARB(program, location, count, value) glatter_glProgramUniform2i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform2ui64ARB(program, location, x, y) glatter_glProgramUniform2ui64ARB((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y))
#define glProgramUniform2ui64vARB(program, location, count, value) glatter_glProgramUniform2ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform3i64ARB(program, location, x, y, z) glatter_glProgramUniform3i64ARB((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z))
#define glProgramUniform3i64vARB(program, location, count, value) glatter_glProgramUniform3i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform3ui64ARB(program, location, x, y, z) glatter_glProgramUniform3ui64ARB((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#define glProgramUniform3ui64vARB(program, location, count, value) glatter_glProgramUniform3ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform4i64ARB(program, location, x, y, z, w) glatter_glProgramUniform4i64ARB((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#define glProgramUniform4i64vARB(program, location, count, value) glatter_glProgramUniform4i64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) glatter_glProgramUniform4ui64ARB((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#define glProgramUniform4ui64vARB(program, location, count, value) glatter_glProgramUniform4ui64vARB((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glUniform1i64ARB(location, x) glatter_glUniform1i64ARB((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64ARB, (GLint location, GLint64 x))
#define glUniform1i64vARB(location, count, value) glatter_glUniform1i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform1ui64ARB(location, x) glatter_glUniform1ui64ARB((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64ARB, (GLint location, GLuint64 x))
#define glUniform1ui64vARB(location, count, value) glatter_glUniform1ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform2i64ARB(location, x, y) glatter_glUniform2i64ARB((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64ARB, (GLint location, GLint64 x, GLint64 y))
#define glUniform2i64vARB(location, count, value) glatter_glUniform2i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform2ui64ARB(location, x, y) glatter_glUniform2ui64ARB((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64ARB, (GLint location, GLuint64 x, GLuint64 y))
#define glUniform2ui64vARB(location, count, value) glatter_glUniform2ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform3i64ARB(location, x, y, z) glatter_glUniform3i64ARB((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z))
#define glUniform3i64vARB(location, count, value) glatter_glUniform3i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform3ui64ARB(location, x, y, z) glatter_glUniform3ui64ARB((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#define glUniform3ui64vARB(location, count, value) glatter_glUniform3ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform4i64ARB(location, x, y, z, w) glatter_glUniform4i64ARB((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#define glUniform4i64vARB(location, count, value) glatter_glUniform4i64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform4ui64ARB(location, x, y, z, w) glatter_glUniform4ui64ARB((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#define glUniform4ui64vARB(location, count, value) glatter_glUniform4ui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_ARB_gpu_shader_int64)
#if defined(GL_ARB_imaging)
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable((target), (start), (count), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glColorSubTable, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data))
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable((target), (internalformat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glColorTable, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table))
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D((target), (internalformat), (width), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter1D, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image))
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D((target), (internalformat), (width), (height), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image))
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterf, (GLenum target, GLenum pname, GLfloat params))
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteri, (GLenum target, GLenum pname, GLint params))
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable((target), (start), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorSubTable, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorTable, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter1D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D((target), (internalformat), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter2D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable((target), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTable, (GLenum target, GLenum format, GLenum type, void *table))
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter((target), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionFilter, (GLenum target, GLenum format, GLenum type, void *image))
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetMinmax(target, reset, format, type, values) glatter_glGetMinmax((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter((target), (format), (type), (row), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetSeparableFilter, (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span))
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram((target), (width), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glHistogram, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#define glMinmax(target, internalformat, sink) glatter_glMinmax((target), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glMinmax, (GLenum target, GLenum internalformat, GLboolean sink))
#define glResetHistogram(target) glatter_glResetHistogram((target))
GLATTER_UBLOCK(void, APIENTRY, glResetHistogram, (GLenum target))
#define glResetMinmax(target) glatter_glResetMinmax((target))
GLATTER_UBLOCK(void, APIENTRY, glResetMinmax, (GLenum target))
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D((target), (internalformat), (width), (height), (format), (type), (row), (column))
GLATTER_UBLOCK(void, APIENTRY, glSeparableFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column))
#endif // defined(GL_ARB_imaging)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB((mode), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCountARB, (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCountARB, (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_instanced_arrays)
#define glVertexAttribDivisorARB(index, divisor) glatter_glVertexAttribDivisorARB((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisorARB, (GLuint index, GLuint divisor))
#endif // defined(GL_ARB_instanced_arrays)
#if defined(GL_ARB_matrix_palette)
#define glCurrentPaletteMatrixARB(index) glatter_glCurrentPaletteMatrixARB((index))
GLATTER_UBLOCK(void, APIENTRY, glCurrentPaletteMatrixARB, (GLint index))
#define glMatrixIndexPointerARB(size, type, stride, pointer) glatter_glMatrixIndexPointerARB((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexPointerARB, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glMatrixIndexubvARB(size, indices) glatter_glMatrixIndexubvARB((size), (indices))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexubvARB, (GLint size, const GLubyte *indices))
#define glMatrixIndexuivARB(size, indices) glatter_glMatrixIndexuivARB((size), (indices))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexuivARB, (GLint size, const GLuint *indices))
#define glMatrixIndexusvARB(size, indices) glatter_glMatrixIndexusvARB((size), (indices))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexusvARB, (GLint size, const GLushort *indices))
#endif // defined(GL_ARB_matrix_palette)
#if defined(GL_ARB_multisample)
#define glSampleCoverageARB(value, invert) glatter_glSampleCoverageARB((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverageARB, (GLfloat value, GLboolean invert))
#endif // defined(GL_ARB_multisample)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB((texture))
GLATTER_UBLOCK(void, APIENTRY, glActiveTextureARB, (GLenum texture))
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB((texture))
GLATTER_UBLOCK(void, APIENTRY, glClientActiveTextureARB, (GLenum texture))
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dARB, (GLenum target, GLdouble s))
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fARB, (GLenum target, GLfloat s))
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1iARB, (GLenum target, GLint s))
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1sARB, (GLenum target, GLshort s))
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dARB, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fARB, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2iARB, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2sARB, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3iARB, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3sARB, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4iARB, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4sARB, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4svARB, (GLenum target, const GLshort *v))
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ARB_occlusion_query)
#define glBeginQueryARB(target, id) glatter_glBeginQueryARB((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryARB, (GLenum target, GLuint id))
#define glDeleteQueriesARB(n, ids) glatter_glDeleteQueriesARB((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueriesARB, (GLsizei n, const GLuint *ids))
#define glEndQueryARB(target) glatter_glEndQueryARB((target))
GLATTER_UBLOCK(void, APIENTRY, glEndQueryARB, (GLenum target))
#define glGenQueriesARB(n, ids) glatter_glGenQueriesARB((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenQueriesARB, (GLsizei n, GLuint *ids))
#define glGetQueryObjectivARB(id, pname, params) glatter_glGetQueryObjectivARB((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectivARB, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectuivARB(id, pname, params) glatter_glGetQueryObjectuivARB((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuivARB, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryivARB(target, pname, params) glatter_glGetQueryivARB((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryivARB, (GLenum target, GLenum pname, GLint *params))
#define glIsQueryARB(id) glatter_glIsQueryARB((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQueryARB, (GLuint id))
#endif // defined(GL_ARB_occlusion_query)
#if defined(GL_ARB_parallel_shader_compile)
#define glMaxShaderCompilerThreadsARB(count) glatter_glMaxShaderCompilerThreadsARB((count))
GLATTER_UBLOCK(void, APIENTRY, glMaxShaderCompilerThreadsARB, (GLuint count))
#endif // defined(GL_ARB_parallel_shader_compile)
#if defined(GL_ARB_point_parameters)
#define glPointParameterfARB(pname, param) glatter_glPointParameterfARB((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfARB, (GLenum pname, GLfloat param))
#define glPointParameterfvARB(pname, params) glatter_glPointParameterfvARB((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvARB, (GLenum pname, const GLfloat *params))
#endif // defined(GL_ARB_point_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatusARB, (void))
#define glGetnColorTableARB(target, format, type, bufSize, table) glatter_glGetnColorTableARB((target), (format), (type), (bufSize), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetnColorTableARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table))
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB((target), (lod), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImageARB, (GLenum target, GLint lod, GLsizei bufSize, void *img))
#define glGetnConvolutionFilterARB(target, format, type, bufSize, image) glatter_glGetnConvolutionFilterARB((target), (format), (type), (bufSize), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetnConvolutionFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image))
#define glGetnHistogramARB(target, reset, format, type, bufSize, values) glatter_glGetnHistogramARB((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnHistogramARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnMapdvARB(target, query, bufSize, v) glatter_glGetnMapdvARB((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapdvARB, (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v))
#define glGetnMapfvARB(target, query, bufSize, v) glatter_glGetnMapfvARB((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapfvARB, (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v))
#define glGetnMapivARB(target, query, bufSize, v) glatter_glGetnMapivARB((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapivARB, (GLenum target, GLenum query, GLsizei bufSize, GLint *v))
#define glGetnMinmaxARB(target, reset, format, type, bufSize, values) glatter_glGetnMinmaxARB((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnMinmaxARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnPixelMapfvARB(map, bufSize, values) glatter_glGetnPixelMapfvARB((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapfvARB, (GLenum map, GLsizei bufSize, GLfloat *values))
#define glGetnPixelMapuivARB(map, bufSize, values) glatter_glGetnPixelMapuivARB((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapuivARB, (GLenum map, GLsizei bufSize, GLuint *values))
#define glGetnPixelMapusvARB(map, bufSize, values) glatter_glGetnPixelMapusvARB((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapusvARB, (GLenum map, GLsizei bufSize, GLushort *values))
#define glGetnPolygonStippleARB(bufSize, pattern) glatter_glGetnPolygonStippleARB((bufSize), (pattern))
GLATTER_UBLOCK(void, APIENTRY, glGetnPolygonStippleARB, (GLsizei bufSize, GLubyte *pattern))
#define glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilterARB((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetnSeparableFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span))
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB((target), (level), (format), (type), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImageARB, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img))
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdvARB, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfvARB, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformivARB, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuivARB, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixelsARB, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_locations)
#define glEvaluateDepthValuesARB() glatter_glEvaluateDepthValuesARB()
GLATTER_UBLOCK(void, APIENTRY, glEvaluateDepthValuesARB, (void))
#define glFramebufferSampleLocationsfvARB(target, start, count, v) glatter_glFramebufferSampleLocationsfvARB((target), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvARB, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvARB((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvARB, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#endif // defined(GL_ARB_sample_locations)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShadingARB, (GLfloat value))
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shader_objects)
#define glAttachObjectARB(containerObj, obj) glatter_glAttachObjectARB((containerObj), (obj))
GLATTER_UBLOCK(void, APIENTRY, glAttachObjectARB, (GLhandleARB containerObj, GLhandleARB obj))
#define glCompileShaderARB(shaderObj) glatter_glCompileShaderARB((shaderObj))
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderARB, (GLhandleARB shaderObj))
#define glCreateProgramObjectARB() glatter_glCreateProgramObjectARB()
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glCreateProgramObjectARB, (void))
#define glCreateShaderObjectARB(shaderType) glatter_glCreateShaderObjectARB((shaderType))
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glCreateShaderObjectARB, (GLenum shaderType))
#define glDeleteObjectARB(obj) glatter_glDeleteObjectARB((obj))
GLATTER_UBLOCK(void, APIENTRY, glDeleteObjectARB, (GLhandleARB obj))
#define glDetachObjectARB(containerObj, attachedObj) glatter_glDetachObjectARB((containerObj), (attachedObj))
GLATTER_UBLOCK(void, APIENTRY, glDetachObjectARB, (GLhandleARB containerObj, GLhandleARB attachedObj))
#define glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveUniformARB((programObj), (index), (maxLength), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name))
#define glGetAttachedObjectsARB(containerObj, maxCount, count, obj) glatter_glGetAttachedObjectsARB((containerObj), (maxCount), (count), (obj))
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedObjectsARB, (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj))
#define glGetHandleARB(pname) glatter_glGetHandleARB((pname))
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glGetHandleARB, (GLenum pname))
#define glGetInfoLogARB(obj, maxLength, length, infoLog) glatter_glGetInfoLogARB((obj), (maxLength), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetInfoLogARB, (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog))
#define glGetObjectParameterfvARB(obj, pname, params) glatter_glGetObjectParameterfvARB((obj), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterfvARB, (GLhandleARB obj, GLenum pname, GLfloat *params))
#define glGetObjectParameterivARB(obj, pname, params) glatter_glGetObjectParameterivARB((obj), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterivARB, (GLhandleARB obj, GLenum pname, GLint *params))
#define glGetShaderSourceARB(obj, maxLength, length, source) glatter_glGetShaderSourceARB((obj), (maxLength), (length), (source))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSourceARB, (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source))
#define glGetUniformLocationARB(programObj, name) glatter_glGetUniformLocationARB((programObj), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocationARB, (GLhandleARB programObj, const GLcharARB *name))
#define glGetUniformfvARB(programObj, location, params) glatter_glGetUniformfvARB((programObj), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfvARB, (GLhandleARB programObj, GLint location, GLfloat *params))
#define glGetUniformivARB(programObj, location, params) glatter_glGetUniformivARB((programObj), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformivARB, (GLhandleARB programObj, GLint location, GLint *params))
#define glLinkProgramARB(programObj) glatter_glLinkProgramARB((programObj))
GLATTER_UBLOCK(void, APIENTRY, glLinkProgramARB, (GLhandleARB programObj))
#define glShaderSourceARB(shaderObj, count, string, length) glatter_glShaderSourceARB((shaderObj), (count), (string), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderSourceARB, (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length))
#define glUniform1fARB(location, v0) glatter_glUniform1fARB((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fARB, (GLint location, GLfloat v0))
#define glUniform1fvARB(location, count, value) glatter_glUniform1fvARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1iARB(location, v0) glatter_glUniform1iARB((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1iARB, (GLint location, GLint v0))
#define glUniform1ivARB(location, count, value) glatter_glUniform1ivARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniform2fARB(location, v0, v1) glatter_glUniform2fARB((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fARB, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fvARB(location, count, value) glatter_glUniform2fvARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2iARB(location, v0, v1) glatter_glUniform2iARB((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2iARB, (GLint location, GLint v0, GLint v1))
#define glUniform2ivARB(location, count, value) glatter_glUniform2ivARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniform3fARB(location, v0, v1, v2) glatter_glUniform3fARB((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fvARB(location, count, value) glatter_glUniform3fvARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3iARB(location, v0, v1, v2) glatter_glUniform3iARB((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3iARB, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3ivARB(location, count, value) glatter_glUniform3ivARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniform4fARB(location, v0, v1, v2, v3) glatter_glUniform4fARB((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fvARB(location, count, value) glatter_glUniform4fvARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4iARB(location, v0, v1, v2, v3) glatter_glUniform4iARB((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4iARB, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4ivARB(location, count, value) glatter_glUniform4ivARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fvARB(location, count, transpose, value) glatter_glUniformMatrix2fvARB((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fvARB(location, count, transpose, value) glatter_glUniformMatrix3fvARB((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fvARB(location, count, transpose, value) glatter_glUniformMatrix4fvARB((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgramObjectARB(programObj) glatter_glUseProgramObjectARB((programObj))
GLATTER_UBLOCK(void, APIENTRY, glUseProgramObjectARB, (GLhandleARB programObj))
#define glValidateProgramARB(programObj) glatter_glValidateProgramARB((programObj))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramARB, (GLhandleARB programObj))
#endif // defined(GL_ARB_shader_objects)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB((shader), (count), (path), (length))
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderIncludeARB, (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length))
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB((namelen), (name))
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamedStringARB, (GLint namelen, const GLchar *name))
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB((namelen), (name), (bufSize), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringARB, (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string))
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB((namelen), (name), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringivARB, (GLint namelen, const GLchar *name, GLenum pname, GLint *params))
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB((namelen), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedStringARB, (GLint namelen, const GLchar *name))
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB((type), (namelen), (name), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedStringARB, (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string))
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB((target), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glBufferPageCommitmentARB, (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit))
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentARB, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentARB((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, APIENTRY, glTexPageCommitmentARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_ARB_texture_buffer_object)
#define glTexBufferARB(target, internalformat, buffer) glatter_glTexBufferARB((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferARB, (GLenum target, GLenum internalformat, GLuint buffer))
#endif // defined(GL_ARB_texture_buffer_object)
#if defined(GL_ARB_texture_compression)
#define glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1DARB((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2DARB((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DARB((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1DARB((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1DARB, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2DARB((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DARB((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glGetCompressedTexImageARB(target, level, img) glatter_glGetCompressedTexImageARB((target), (level), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImageARB, (GLenum target, GLint level, void *img))
#endif // defined(GL_ARB_texture_compression)
#if defined(GL_ARB_transpose_matrix)
#define glLoadTransposeMatrixdARB(m) glatter_glLoadTransposeMatrixdARB((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixdARB, (const GLdouble *m))
#define glLoadTransposeMatrixfARB(m) glatter_glLoadTransposeMatrixfARB((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixfARB, (const GLfloat *m))
#define glMultTransposeMatrixdARB(m) glatter_glMultTransposeMatrixdARB((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixdARB, (const GLdouble *m))
#define glMultTransposeMatrixfARB(m) glatter_glMultTransposeMatrixfARB((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixfARB, (const GLfloat *m))
#endif // defined(GL_ARB_transpose_matrix)
#if defined(GL_ARB_vertex_blend)
#define glVertexBlendARB(count) glatter_glVertexBlendARB((count))
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendARB, (GLint count))
#define glWeightPointerARB(size, type, stride, pointer) glatter_glWeightPointerARB((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glWeightPointerARB, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWeightbvARB(size, weights) glatter_glWeightbvARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightbvARB, (GLint size, const GLbyte *weights))
#define glWeightdvARB(size, weights) glatter_glWeightdvARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightdvARB, (GLint size, const GLdouble *weights))
#define glWeightfvARB(size, weights) glatter_glWeightfvARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightfvARB, (GLint size, const GLfloat *weights))
#define glWeightivARB(size, weights) glatter_glWeightivARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightivARB, (GLint size, const GLint *weights))
#define glWeightsvARB(size, weights) glatter_glWeightsvARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightsvARB, (GLint size, const GLshort *weights))
#define glWeightubvARB(size, weights) glatter_glWeightubvARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightubvARB, (GLint size, const GLubyte *weights))
#define glWeightuivARB(size, weights) glatter_glWeightuivARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightuivARB, (GLint size, const GLuint *weights))
#define glWeightusvARB(size, weights) glatter_glWeightusvARB((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightusvARB, (GLint size, const GLushort *weights))
#endif // defined(GL_ARB_vertex_blend)
#if defined(GL_ARB_vertex_buffer_object)
#define glBindBufferARB(target, buffer) glatter_glBindBufferARB((target), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferARB, (GLenum target, GLuint buffer))
#define glBufferDataARB(target, size, data, usage) glatter_glBufferDataARB((target), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glBufferDataARB, (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage))
#define glBufferSubDataARB(target, offset, size, data) glatter_glBufferSubDataARB((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data))
#define glDeleteBuffersARB(n, buffers) glatter_glDeleteBuffersARB((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffersARB, (GLsizei n, const GLuint *buffers))
#define glGenBuffersARB(n, buffers) glatter_glGenBuffersARB((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glGenBuffersARB, (GLsizei n, GLuint *buffers))
#define glGetBufferParameterivARB(target, pname, params) glatter_glGetBufferParameterivARB((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameterivARB, (GLenum target, GLenum pname, GLint *params))
#define glGetBufferPointervARB(target, pname, params) glatter_glGetBufferPointervARB((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointervARB, (GLenum target, GLenum pname, void **params))
#define glGetBufferSubDataARB(target, offset, size, data) glatter_glGetBufferSubDataARB((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data))
#define glIsBufferARB(buffer) glatter_glIsBufferARB((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBufferARB, (GLuint buffer))
#define glMapBufferARB(target, access) glatter_glMapBufferARB((target), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferARB, (GLenum target, GLenum access))
#define glUnmapBufferARB(target) glatter_glUnmapBufferARB((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBufferARB, (GLenum target))
#endif // defined(GL_ARB_vertex_buffer_object)
#if defined(GL_ARB_vertex_program)
#define glDisableVertexAttribArrayARB(index) glatter_glDisableVertexAttribArrayARB((index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArrayARB, (GLuint index))
#define glEnableVertexAttribArrayARB(index) glatter_glEnableVertexAttribArrayARB((index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArrayARB, (GLuint index))
#define glGetVertexAttribPointervARB(index, pname, pointer) glatter_glGetVertexAttribPointervARB((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointervARB, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdvARB(index, pname, params) glatter_glGetVertexAttribdvARB((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdvARB, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfvARB(index, pname, params) glatter_glGetVertexAttribfvARB((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfvARB, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribivARB(index, pname, params) glatter_glGetVertexAttribivARB((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribivARB, (GLuint index, GLenum pname, GLint *params))
#define glVertexAttrib1dARB(index, x) glatter_glVertexAttrib1dARB((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dARB, (GLuint index, GLdouble x))
#define glVertexAttrib1dvARB(index, v) glatter_glVertexAttrib1dvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib1fARB(index, x) glatter_glVertexAttrib1fARB((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fARB, (GLuint index, GLfloat x))
#define glVertexAttrib1fvARB(index, v) glatter_glVertexAttrib1fvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib1sARB(index, x) glatter_glVertexAttrib1sARB((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sARB, (GLuint index, GLshort x))
#define glVertexAttrib1svARB(index, v) glatter_glVertexAttrib1svARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib2dARB(index, x, y) glatter_glVertexAttrib2dARB((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dARB, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dvARB(index, v) glatter_glVertexAttrib2dvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib2fARB(index, x, y) glatter_glVertexAttrib2fARB((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fARB, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fvARB(index, v) glatter_glVertexAttrib2fvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib2sARB(index, x, y) glatter_glVertexAttrib2sARB((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sARB, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2svARB(index, v) glatter_glVertexAttrib2svARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib3dARB(index, x, y, z) glatter_glVertexAttrib3dARB((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dvARB(index, v) glatter_glVertexAttrib3dvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib3fARB(index, x, y, z) glatter_glVertexAttrib3fARB((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fvARB(index, v) glatter_glVertexAttrib3fvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib3sARB(index, x, y, z) glatter_glVertexAttrib3sARB((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sARB, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3svARB(index, v) glatter_glVertexAttrib3svARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib4NbvARB(index, v) glatter_glVertexAttrib4NbvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NbvARB, (GLuint index, const GLbyte *v))
#define glVertexAttrib4NivARB(index, v) glatter_glVertexAttrib4NivARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NivARB, (GLuint index, const GLint *v))
#define glVertexAttrib4NsvARB(index, v) glatter_glVertexAttrib4NsvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NsvARB, (GLuint index, const GLshort *v))
#define glVertexAttrib4NubARB(index, x, y, z, w) glatter_glVertexAttrib4NubARB((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NubARB, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4NubvARB(index, v) glatter_glVertexAttrib4NubvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NubvARB, (GLuint index, const GLubyte *v))
#define glVertexAttrib4NuivARB(index, v) glatter_glVertexAttrib4NuivARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NuivARB, (GLuint index, const GLuint *v))
#define glVertexAttrib4NusvARB(index, v) glatter_glVertexAttrib4NusvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NusvARB, (GLuint index, const GLushort *v))
#define glVertexAttrib4bvARB(index, v) glatter_glVertexAttrib4bvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bvARB, (GLuint index, const GLbyte *v))
#define glVertexAttrib4dARB(index, x, y, z, w) glatter_glVertexAttrib4dARB((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dvARB(index, v) glatter_glVertexAttrib4dvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib4fARB(index, x, y, z, w) glatter_glVertexAttrib4fARB((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fvARB(index, v) glatter_glVertexAttrib4fvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib4ivARB(index, v) glatter_glVertexAttrib4ivARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ivARB, (GLuint index, const GLint *v))
#define glVertexAttrib4sARB(index, x, y, z, w) glatter_glVertexAttrib4sARB((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sARB, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4svARB(index, v) glatter_glVertexAttrib4svARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubvARB(index, v) glatter_glVertexAttrib4ubvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubvARB, (GLuint index, const GLubyte *v))
#define glVertexAttrib4uivARB(index, v) glatter_glVertexAttrib4uivARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uivARB, (GLuint index, const GLuint *v))
#define glVertexAttrib4usvARB(index, v) glatter_glVertexAttrib4usvARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usvARB, (GLuint index, const GLushort *v))
#define glVertexAttribPointerARB(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointerARB((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointerARB, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_ARB_vertex_program)
#if defined(GL_ARB_vertex_shader)
#define glBindAttribLocationARB(programObj, index, name) glatter_glBindAttribLocationARB((programObj), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocationARB, (GLhandleARB programObj, GLuint index, const GLcharARB *name))
#define glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveAttribARB((programObj), (index), (maxLength), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttribARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name))
#define glGetAttribLocationARB(programObj, name) glatter_glGetAttribLocationARB((programObj), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocationARB, (GLhandleARB programObj, const GLcharARB *name))
#endif // defined(GL_ARB_vertex_shader)
#if defined(GL_ARB_window_pos)
#define glWindowPos2dARB(x, y) glatter_glWindowPos2dARB((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dARB, (GLdouble x, GLdouble y))
#define glWindowPos2dvARB(v) glatter_glWindowPos2dvARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dvARB, (const GLdouble *v))
#define glWindowPos2fARB(x, y) glatter_glWindowPos2fARB((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fARB, (GLfloat x, GLfloat y))
#define glWindowPos2fvARB(v) glatter_glWindowPos2fvARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fvARB, (const GLfloat *v))
#define glWindowPos2iARB(x, y) glatter_glWindowPos2iARB((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iARB, (GLint x, GLint y))
#define glWindowPos2ivARB(v) glatter_glWindowPos2ivARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2ivARB, (const GLint *v))
#define glWindowPos2sARB(x, y) glatter_glWindowPos2sARB((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sARB, (GLshort x, GLshort y))
#define glWindowPos2svARB(v) glatter_glWindowPos2svARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2svARB, (const GLshort *v))
#define glWindowPos3dARB(x, y, z) glatter_glWindowPos3dARB((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dARB, (GLdouble x, GLdouble y, GLdouble z))
#define glWindowPos3dvARB(v) glatter_glWindowPos3dvARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dvARB, (const GLdouble *v))
#define glWindowPos3fARB(x, y, z) glatter_glWindowPos3fARB((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fARB, (GLfloat x, GLfloat y, GLfloat z))
#define glWindowPos3fvARB(v) glatter_glWindowPos3fvARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fvARB, (const GLfloat *v))
#define glWindowPos3iARB(x, y, z) glatter_glWindowPos3iARB((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iARB, (GLint x, GLint y, GLint z))
#define glWindowPos3ivARB(v) glatter_glWindowPos3ivARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3ivARB, (const GLint *v))
#define glWindowPos3sARB(x, y, z) glatter_glWindowPos3sARB((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sARB, (GLshort x, GLshort y, GLshort z))
#define glWindowPos3svARB(v) glatter_glWindowPos3svARB((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3svARB, (const GLshort *v))
#endif // defined(GL_ARB_window_pos)
#if defined(GL_ATI_draw_buffers)
#define glDrawBuffersATI(n, bufs) glatter_glDrawBuffersATI((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffersATI, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_ATI_draw_buffers)
#if defined(GL_ATI_element_array)
#define glDrawElementArrayATI(mode, count) glatter_glDrawElementArrayATI((mode), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementArrayATI, (GLenum mode, GLsizei count))
#define glDrawRangeElementArrayATI(mode, start, end, count) glatter_glDrawRangeElementArrayATI((mode), (start), (end), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementArrayATI, (GLenum mode, GLuint start, GLuint end, GLsizei count))
#define glElementPointerATI(type, pointer) glatter_glElementPointerATI((type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glElementPointerATI, (GLenum type, const void *pointer))
#endif // defined(GL_ATI_element_array)
#if defined(GL_ATI_envmap_bumpmap)
#define glGetTexBumpParameterfvATI(pname, param) glatter_glGetTexBumpParameterfvATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTexBumpParameterfvATI, (GLenum pname, GLfloat *param))
#define glGetTexBumpParameterivATI(pname, param) glatter_glGetTexBumpParameterivATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTexBumpParameterivATI, (GLenum pname, GLint *param))
#define glTexBumpParameterfvATI(pname, param) glatter_glTexBumpParameterfvATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexBumpParameterfvATI, (GLenum pname, const GLfloat *param))
#define glTexBumpParameterivATI(pname, param) glatter_glTexBumpParameterivATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexBumpParameterivATI, (GLenum pname, const GLint *param))
#endif // defined(GL_ATI_envmap_bumpmap)
#if defined(GL_ATI_fragment_shader)
#define glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) glatter_glAlphaFragmentOp1ATI((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod))
#define glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glAlphaFragmentOp2ATI((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod))
#define glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glAlphaFragmentOp3ATI((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod))
#define glBeginFragmentShaderATI() glatter_glBeginFragmentShaderATI()
GLATTER_UBLOCK(void, APIENTRY, glBeginFragmentShaderATI, (void))
#define glBindFragmentShaderATI(id) glatter_glBindFragmentShaderATI((id))
GLATTER_UBLOCK(void, APIENTRY, glBindFragmentShaderATI, (GLuint id))
#define glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) glatter_glColorFragmentOp1ATI((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod))
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod))
#define glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glColorFragmentOp2ATI((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod))
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod))
#define glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glColorFragmentOp3ATI((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod))
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod))
#define glDeleteFragmentShaderATI(id) glatter_glDeleteFragmentShaderATI((id))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFragmentShaderATI, (GLuint id))
#define glEndFragmentShaderATI() glatter_glEndFragmentShaderATI()
GLATTER_UBLOCK(void, APIENTRY, glEndFragmentShaderATI, (void))
#define glGenFragmentShadersATI(range) glatter_glGenFragmentShadersATI((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenFragmentShadersATI, (GLuint range))
#define glPassTexCoordATI(dst, coord, swizzle) glatter_glPassTexCoordATI((dst), (coord), (swizzle))
GLATTER_UBLOCK(void, APIENTRY, glPassTexCoordATI, (GLuint dst, GLuint coord, GLenum swizzle))
#define glSampleMapATI(dst, interp, swizzle) glatter_glSampleMapATI((dst), (interp), (swizzle))
GLATTER_UBLOCK(void, APIENTRY, glSampleMapATI, (GLuint dst, GLuint interp, GLenum swizzle))
#define glSetFragmentShaderConstantATI(dst, value) glatter_glSetFragmentShaderConstantATI((dst), (value))
GLATTER_UBLOCK(void, APIENTRY, glSetFragmentShaderConstantATI, (GLuint dst, const GLfloat *value))
#endif // defined(GL_ATI_fragment_shader)
#if defined(GL_ATI_map_object_buffer)
#define glMapObjectBufferATI(buffer) glatter_glMapObjectBufferATI((buffer))
GLATTER_UBLOCK(void *, APIENTRY, glMapObjectBufferATI, (GLuint buffer))
#define glUnmapObjectBufferATI(buffer) glatter_glUnmapObjectBufferATI((buffer))
GLATTER_UBLOCK(void, APIENTRY, glUnmapObjectBufferATI, (GLuint buffer))
#endif // defined(GL_ATI_map_object_buffer)
#if defined(GL_ATI_pn_triangles)
#define glPNTrianglesfATI(pname, param) glatter_glPNTrianglesfATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPNTrianglesfATI, (GLenum pname, GLfloat param))
#define glPNTrianglesiATI(pname, param) glatter_glPNTrianglesiATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPNTrianglesiATI, (GLenum pname, GLint param))
#endif // defined(GL_ATI_pn_triangles)
#if defined(GL_ATI_separate_stencil)
#define glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask) glatter_glStencilFuncSeparateATI((frontfunc), (backfunc), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparateATI, (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask))
#define glStencilOpSeparateATI(face, sfail, dpfail, dppass) glatter_glStencilOpSeparateATI((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparateATI, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#endif // defined(GL_ATI_separate_stencil)
#if defined(GL_ATI_vertex_array_object)
#define glArrayObjectATI(array, size, type, stride, buffer, offset) glatter_glArrayObjectATI((array), (size), (type), (stride), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glArrayObjectATI, (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset))
#define glFreeObjectBufferATI(buffer) glatter_glFreeObjectBufferATI((buffer))
GLATTER_UBLOCK(void, APIENTRY, glFreeObjectBufferATI, (GLuint buffer))
#define glGetArrayObjectfvATI(array, pname, params) glatter_glGetArrayObjectfvATI((array), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetArrayObjectfvATI, (GLenum array, GLenum pname, GLfloat *params))
#define glGetArrayObjectivATI(array, pname, params) glatter_glGetArrayObjectivATI((array), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetArrayObjectivATI, (GLenum array, GLenum pname, GLint *params))
#define glGetObjectBufferfvATI(buffer, pname, params) glatter_glGetObjectBufferfvATI((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectBufferfvATI, (GLuint buffer, GLenum pname, GLfloat *params))
#define glGetObjectBufferivATI(buffer, pname, params) glatter_glGetObjectBufferivATI((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectBufferivATI, (GLuint buffer, GLenum pname, GLint *params))
#define glGetVariantArrayObjectfvATI(id, pname, params) glatter_glGetVariantArrayObjectfvATI((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantArrayObjectfvATI, (GLuint id, GLenum pname, GLfloat *params))
#define glGetVariantArrayObjectivATI(id, pname, params) glatter_glGetVariantArrayObjectivATI((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantArrayObjectivATI, (GLuint id, GLenum pname, GLint *params))
#define glIsObjectBufferATI(buffer) glatter_glIsObjectBufferATI((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsObjectBufferATI, (GLuint buffer))
#define glNewObjectBufferATI(size, pointer, usage) glatter_glNewObjectBufferATI((size), (pointer), (usage))
GLATTER_UBLOCK(GLuint, APIENTRY, glNewObjectBufferATI, (GLsizei size, const void *pointer, GLenum usage))
#define glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve) glatter_glUpdateObjectBufferATI((buffer), (offset), (size), (pointer), (preserve))
GLATTER_UBLOCK(void, APIENTRY, glUpdateObjectBufferATI, (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve))
#define glVariantArrayObjectATI(id, type, stride, buffer, offset) glatter_glVariantArrayObjectATI((id), (type), (stride), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVariantArrayObjectATI, (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset))
#endif // defined(GL_ATI_vertex_array_object)
#if defined(GL_ATI_vertex_attrib_array_object)
#define glGetVertexAttribArrayObjectfvATI(index, pname, params) glatter_glGetVertexAttribArrayObjectfvATI((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribArrayObjectfvATI, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribArrayObjectivATI(index, pname, params) glatter_glGetVertexAttribArrayObjectivATI((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribArrayObjectivATI, (GLuint index, GLenum pname, GLint *params))
#define glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset) glatter_glVertexAttribArrayObjectATI((index), (size), (type), (normalized), (stride), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribArrayObjectATI, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset))
#endif // defined(GL_ATI_vertex_attrib_array_object)
#if defined(GL_ATI_vertex_streams)
#define glClientActiveVertexStreamATI(stream) glatter_glClientActiveVertexStreamATI((stream))
GLATTER_UBLOCK(void, APIENTRY, glClientActiveVertexStreamATI, (GLenum stream))
#define glNormalStream3bATI(stream, nx, ny, nz) glatter_glNormalStream3bATI((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3bATI, (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz))
#define glNormalStream3bvATI(stream, coords) glatter_glNormalStream3bvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3bvATI, (GLenum stream, const GLbyte *coords))
#define glNormalStream3dATI(stream, nx, ny, nz) glatter_glNormalStream3dATI((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3dATI, (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz))
#define glNormalStream3dvATI(stream, coords) glatter_glNormalStream3dvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3dvATI, (GLenum stream, const GLdouble *coords))
#define glNormalStream3fATI(stream, nx, ny, nz) glatter_glNormalStream3fATI((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3fATI, (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormalStream3fvATI(stream, coords) glatter_glNormalStream3fvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3fvATI, (GLenum stream, const GLfloat *coords))
#define glNormalStream3iATI(stream, nx, ny, nz) glatter_glNormalStream3iATI((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3iATI, (GLenum stream, GLint nx, GLint ny, GLint nz))
#define glNormalStream3ivATI(stream, coords) glatter_glNormalStream3ivATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3ivATI, (GLenum stream, const GLint *coords))
#define glNormalStream3sATI(stream, nx, ny, nz) glatter_glNormalStream3sATI((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3sATI, (GLenum stream, GLshort nx, GLshort ny, GLshort nz))
#define glNormalStream3svATI(stream, coords) glatter_glNormalStream3svATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3svATI, (GLenum stream, const GLshort *coords))
#define glVertexBlendEnvfATI(pname, param) glatter_glVertexBlendEnvfATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendEnvfATI, (GLenum pname, GLfloat param))
#define glVertexBlendEnviATI(pname, param) glatter_glVertexBlendEnviATI((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendEnviATI, (GLenum pname, GLint param))
#define glVertexStream1dATI(stream, x) glatter_glVertexStream1dATI((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1dATI, (GLenum stream, GLdouble x))
#define glVertexStream1dvATI(stream, coords) glatter_glVertexStream1dvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream1fATI(stream, x) glatter_glVertexStream1fATI((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1fATI, (GLenum stream, GLfloat x))
#define glVertexStream1fvATI(stream, coords) glatter_glVertexStream1fvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream1iATI(stream, x) glatter_glVertexStream1iATI((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1iATI, (GLenum stream, GLint x))
#define glVertexStream1ivATI(stream, coords) glatter_glVertexStream1ivATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream1sATI(stream, x) glatter_glVertexStream1sATI((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1sATI, (GLenum stream, GLshort x))
#define glVertexStream1svATI(stream, coords) glatter_glVertexStream1svATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1svATI, (GLenum stream, const GLshort *coords))
#define glVertexStream2dATI(stream, x, y) glatter_glVertexStream2dATI((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2dATI, (GLenum stream, GLdouble x, GLdouble y))
#define glVertexStream2dvATI(stream, coords) glatter_glVertexStream2dvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream2fATI(stream, x, y) glatter_glVertexStream2fATI((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2fATI, (GLenum stream, GLfloat x, GLfloat y))
#define glVertexStream2fvATI(stream, coords) glatter_glVertexStream2fvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream2iATI(stream, x, y) glatter_glVertexStream2iATI((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2iATI, (GLenum stream, GLint x, GLint y))
#define glVertexStream2ivATI(stream, coords) glatter_glVertexStream2ivATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream2sATI(stream, x, y) glatter_glVertexStream2sATI((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2sATI, (GLenum stream, GLshort x, GLshort y))
#define glVertexStream2svATI(stream, coords) glatter_glVertexStream2svATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2svATI, (GLenum stream, const GLshort *coords))
#define glVertexStream3dATI(stream, x, y, z) glatter_glVertexStream3dATI((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z))
#define glVertexStream3dvATI(stream, coords) glatter_glVertexStream3dvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream3fATI(stream, x, y, z) glatter_glVertexStream3fATI((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z))
#define glVertexStream3fvATI(stream, coords) glatter_glVertexStream3fvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream3iATI(stream, x, y, z) glatter_glVertexStream3iATI((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3iATI, (GLenum stream, GLint x, GLint y, GLint z))
#define glVertexStream3ivATI(stream, coords) glatter_glVertexStream3ivATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream3sATI(stream, x, y, z) glatter_glVertexStream3sATI((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3sATI, (GLenum stream, GLshort x, GLshort y, GLshort z))
#define glVertexStream3svATI(stream, coords) glatter_glVertexStream3svATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3svATI, (GLenum stream, const GLshort *coords))
#define glVertexStream4dATI(stream, x, y, z, w) glatter_glVertexStream4dATI((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexStream4dvATI(stream, coords) glatter_glVertexStream4dvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream4fATI(stream, x, y, z, w) glatter_glVertexStream4fATI((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexStream4fvATI(stream, coords) glatter_glVertexStream4fvATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream4iATI(stream, x, y, z, w) glatter_glVertexStream4iATI((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4iATI, (GLenum stream, GLint x, GLint y, GLint z, GLint w))
#define glVertexStream4ivATI(stream, coords) glatter_glVertexStream4ivATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream4sATI(stream, x, y, z, w) glatter_glVertexStream4sATI((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4sATI, (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexStream4svATI(stream, coords) glatter_glVertexStream4svATI((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4svATI, (GLenum stream, const GLshort *coords))
#endif // defined(GL_ATI_vertex_streams)
#if defined(GL_EXT_EGL_image_storage)
#define glEGLImageTargetTexStorageEXT(target, image, attrib_list) glatter_glEGLImageTargetTexStorageEXT((target), (image), (attrib_list))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTexStorageEXT, (GLenum target, GLeglImageOES image, const GLint* attrib_list))
#define glEGLImageTargetTextureStorageEXT(texture, image, attrib_list) glatter_glEGLImageTargetTextureStorageEXT((texture), (image), (attrib_list))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTextureStorageEXT, (GLuint texture, GLeglImageOES image, const GLint* attrib_list))
#endif // defined(GL_EXT_EGL_image_storage)
#if defined(GL_EXT_bindable_uniform)
#define glGetUniformBufferSizeEXT(program, location) glatter_glGetUniformBufferSizeEXT((program), (location))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformBufferSizeEXT, (GLuint program, GLint location))
#define glGetUniformOffsetEXT(program, location) glatter_glGetUniformOffsetEXT((program), (location))
GLATTER_UBLOCK(GLintptr, APIENTRY, glGetUniformOffsetEXT, (GLuint program, GLint location))
#define glUniformBufferEXT(program, location, buffer) glatter_glUniformBufferEXT((program), (location), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glUniformBufferEXT, (GLuint program, GLint location, GLuint buffer))
#endif // defined(GL_EXT_bindable_uniform)
#if defined(GL_EXT_blend_color)
#define glBlendColorEXT(red, green, blue, alpha) glatter_glBlendColorEXT((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColorEXT, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#endif // defined(GL_EXT_blend_color)
#if defined(GL_EXT_blend_equation_separate)
#define glBlendEquationSeparateEXT(modeRGB, modeAlpha) glatter_glBlendEquationSeparateEXT((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateEXT, (GLenum modeRGB, GLenum modeAlpha))
#endif // defined(GL_EXT_blend_equation_separate)
#if defined(GL_EXT_blend_func_separate)
#define glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateEXT((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateEXT, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#endif // defined(GL_EXT_blend_func_separate)
#if defined(GL_EXT_blend_minmax)
#define glBlendEquationEXT(mode) glatter_glBlendEquationEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationEXT, (GLenum mode))
#endif // defined(GL_EXT_blend_minmax)
#if defined(GL_EXT_color_subtable)
#define glColorSubTableEXT(target, start, count, format, type, data) glatter_glColorSubTableEXT((target), (start), (count), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glColorSubTableEXT, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data))
#define glCopyColorSubTableEXT(target, start, x, y, width) glatter_glCopyColorSubTableEXT((target), (start), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorSubTableEXT, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#endif // defined(GL_EXT_color_subtable)
#if defined(GL_EXT_compiled_vertex_array)
#define glLockArraysEXT(first, count) glatter_glLockArraysEXT((first), (count))
GLATTER_UBLOCK(void, APIENTRY, glLockArraysEXT, (GLint first, GLsizei count))
#define glUnlockArraysEXT() glatter_glUnlockArraysEXT()
GLATTER_UBLOCK(void, APIENTRY, glUnlockArraysEXT, (void))
#endif // defined(GL_EXT_compiled_vertex_array)
#if defined(GL_EXT_convolution)
#define glConvolutionFilter1DEXT(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1DEXT((target), (internalformat), (width), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image))
#define glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2DEXT((target), (internalformat), (width), (height), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image))
#define glConvolutionParameterfEXT(target, pname, params) glatter_glConvolutionParameterfEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfEXT, (GLenum target, GLenum pname, GLfloat params))
#define glConvolutionParameterfvEXT(target, pname, params) glatter_glConvolutionParameterfvEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfvEXT, (GLenum target, GLenum pname, const GLfloat *params))
#define glConvolutionParameteriEXT(target, pname, params) glatter_glConvolutionParameteriEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteriEXT, (GLenum target, GLenum pname, GLint params))
#define glConvolutionParameterivEXT(target, pname, params) glatter_glConvolutionParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterivEXT, (GLenum target, GLenum pname, const GLint *params))
#define glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1DEXT((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2DEXT((target), (internalformat), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#define glGetConvolutionFilterEXT(target, format, type, image) glatter_glGetConvolutionFilterEXT((target), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionFilterEXT, (GLenum target, GLenum format, GLenum type, void *image))
#define glGetConvolutionParameterfvEXT(target, pname, params) glatter_glGetConvolutionParameterfvEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetConvolutionParameterivEXT(target, pname, params) glatter_glGetConvolutionParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetSeparableFilterEXT(target, format, type, row, column, span) glatter_glGetSeparableFilterEXT((target), (format), (type), (row), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetSeparableFilterEXT, (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span))
#define glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2DEXT((target), (internalformat), (width), (height), (format), (type), (row), (column))
GLATTER_UBLOCK(void, APIENTRY, glSeparableFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column))
#endif // defined(GL_EXT_convolution)
#if defined(GL_EXT_coordinate_frame)
#define glBinormal3bEXT(bx, by, bz) glatter_glBinormal3bEXT((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3bEXT, (GLbyte bx, GLbyte by, GLbyte bz))
#define glBinormal3bvEXT(v) glatter_glBinormal3bvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3bvEXT, (const GLbyte *v))
#define glBinormal3dEXT(bx, by, bz) glatter_glBinormal3dEXT((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3dEXT, (GLdouble bx, GLdouble by, GLdouble bz))
#define glBinormal3dvEXT(v) glatter_glBinormal3dvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3dvEXT, (const GLdouble *v))
#define glBinormal3fEXT(bx, by, bz) glatter_glBinormal3fEXT((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3fEXT, (GLfloat bx, GLfloat by, GLfloat bz))
#define glBinormal3fvEXT(v) glatter_glBinormal3fvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3fvEXT, (const GLfloat *v))
#define glBinormal3iEXT(bx, by, bz) glatter_glBinormal3iEXT((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3iEXT, (GLint bx, GLint by, GLint bz))
#define glBinormal3ivEXT(v) glatter_glBinormal3ivEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3ivEXT, (const GLint *v))
#define glBinormal3sEXT(bx, by, bz) glatter_glBinormal3sEXT((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3sEXT, (GLshort bx, GLshort by, GLshort bz))
#define glBinormal3svEXT(v) glatter_glBinormal3svEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3svEXT, (const GLshort *v))
#define glBinormalPointerEXT(type, stride, pointer) glatter_glBinormalPointerEXT((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glBinormalPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#define glTangent3bEXT(tx, ty, tz) glatter_glTangent3bEXT((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3bEXT, (GLbyte tx, GLbyte ty, GLbyte tz))
#define glTangent3bvEXT(v) glatter_glTangent3bvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3bvEXT, (const GLbyte *v))
#define glTangent3dEXT(tx, ty, tz) glatter_glTangent3dEXT((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3dEXT, (GLdouble tx, GLdouble ty, GLdouble tz))
#define glTangent3dvEXT(v) glatter_glTangent3dvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3dvEXT, (const GLdouble *v))
#define glTangent3fEXT(tx, ty, tz) glatter_glTangent3fEXT((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3fEXT, (GLfloat tx, GLfloat ty, GLfloat tz))
#define glTangent3fvEXT(v) glatter_glTangent3fvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3fvEXT, (const GLfloat *v))
#define glTangent3iEXT(tx, ty, tz) glatter_glTangent3iEXT((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3iEXT, (GLint tx, GLint ty, GLint tz))
#define glTangent3ivEXT(v) glatter_glTangent3ivEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3ivEXT, (const GLint *v))
#define glTangent3sEXT(tx, ty, tz) glatter_glTangent3sEXT((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3sEXT, (GLshort tx, GLshort ty, GLshort tz))
#define glTangent3svEXT(v) glatter_glTangent3svEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3svEXT, (const GLshort *v))
#define glTangentPointerEXT(type, stride, pointer) glatter_glTangentPointerEXT((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTangentPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_coordinate_frame)
#if defined(GL_EXT_copy_texture)
#define glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1DEXT((target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2DEXT((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1DEXT((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2DEXT((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DEXT((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_copy_texture)
#if defined(GL_EXT_cull_vertex)
#define glCullParameterdvEXT(pname, params) glatter_glCullParameterdvEXT((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCullParameterdvEXT, (GLenum pname, GLdouble *params))
#define glCullParameterfvEXT(pname, params) glatter_glCullParameterfvEXT((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCullParameterfvEXT, (GLenum pname, GLfloat *params))
#endif // defined(GL_EXT_cull_vertex)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT((type), (object), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT((type), (object), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar *label))
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT()
GLATTER_UBLOCK(void, APIENTRY, glPopGroupMarkerEXT, (void))
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_depth_bounds_test)
#define glDepthBoundsEXT(zmin, zmax) glatter_glDepthBoundsEXT((zmin), (zmax))
GLATTER_UBLOCK(void, APIENTRY, glDepthBoundsEXT, (GLclampd zmin, GLclampd zmax))
#endif // defined(GL_EXT_depth_bounds_test)
#if defined(GL_EXT_direct_state_access)
#define glBindMultiTextureEXT(texunit, target, texture) glatter_glBindMultiTextureEXT((texunit), (target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindMultiTextureEXT, (GLenum texunit, GLenum target, GLuint texture))
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) glatter_glCheckNamedFramebufferStatusEXT((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatusEXT, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) glatter_glClearNamedBufferDataEXT((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferDataEXT, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubDataEXT((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubDataEXT, (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glClientAttribDefaultEXT(mask) glatter_glClientAttribDefaultEXT((mask))
GLATTER_UBLOCK(void, APIENTRY, glClientAttribDefaultEXT, (GLbitfield mask))
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedMultiTexImage3DEXT((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedTextureImage1DEXT((texture), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedTextureImage2DEXT((texture), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedTextureImage3DEXT((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedTextureSubImage1DEXT((texture), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) glatter_glCopyMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) glatter_glCopyMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) glatter_glCopyMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) glatter_glCopyTextureImage1DEXT((texture), (target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) glatter_glCopyTextureImage2DEXT((texture), (target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1DEXT((texture), (target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDisableClientStateIndexedEXT(array, index) glatter_glDisableClientStateIndexedEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateIndexedEXT, (GLenum array, GLuint index))
#define glDisableClientStateiEXT(array, index) glatter_glDisableClientStateiEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateiEXT, (GLenum array, GLuint index))
#define glDisableIndexedEXT(target, index) glatter_glDisableIndexedEXT((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableIndexedEXT, (GLenum target, GLuint index))
#define glDisableVertexArrayAttribEXT(vaobj, index) glatter_glDisableVertexArrayAttribEXT((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#define glDisableVertexArrayEXT(vaobj, array) glatter_glDisableVertexArrayEXT((vaobj), (array))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayEXT, (GLuint vaobj, GLenum array))
#define glEnableClientStateIndexedEXT(array, index) glatter_glEnableClientStateIndexedEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateIndexedEXT, (GLenum array, GLuint index))
#define glEnableClientStateiEXT(array, index) glatter_glEnableClientStateiEXT((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateiEXT, (GLenum array, GLuint index))
#define glEnableIndexedEXT(target, index) glatter_glEnableIndexedEXT((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableIndexedEXT, (GLenum target, GLuint index))
#define glEnableVertexArrayAttribEXT(vaobj, index) glatter_glEnableVertexArrayAttribEXT((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayEXT(vaobj, array) glatter_glEnableVertexArrayEXT((vaobj), (array))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayEXT, (GLuint vaobj, GLenum array))
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) glatter_glFlushMappedNamedBufferRangeEXT((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glFramebufferDrawBufferEXT(framebuffer, mode) glatter_glFramebufferDrawBufferEXT((framebuffer), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBufferEXT, (GLuint framebuffer, GLenum mode))
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) glatter_glFramebufferDrawBuffersEXT((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBuffersEXT, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glFramebufferReadBufferEXT(framebuffer, mode) glatter_glFramebufferReadBufferEXT((framebuffer), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferReadBufferEXT, (GLuint framebuffer, GLenum mode))
#define glGenerateMultiTexMipmapEXT(texunit, target) glatter_glGenerateMultiTexMipmapEXT((texunit), (target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMultiTexMipmapEXT, (GLenum texunit, GLenum target))
#define glGenerateTextureMipmapEXT(texture, target) glatter_glGenerateTextureMipmapEXT((texture), (target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmapEXT, (GLuint texture, GLenum target))
#define glGetBooleanIndexedvEXT(target, index, data) glatter_glGetBooleanIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanIndexedvEXT, (GLenum target, GLuint index, GLboolean *data))
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) glatter_glGetCompressedMultiTexImageEXT((texunit), (target), (lod), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedMultiTexImageEXT, (GLenum texunit, GLenum target, GLint lod, void *img))
#define glGetCompressedTextureImageEXT(texture, target, lod, img) glatter_glGetCompressedTextureImageEXT((texture), (target), (lod), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImageEXT, (GLuint texture, GLenum target, GLint lod, void *img))
#define glGetDoubleIndexedvEXT(target, index, data) glatter_glGetDoubleIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoubleIndexedvEXT, (GLenum target, GLuint index, GLdouble *data))
#define glGetDoublei_vEXT(pname, index, params) glatter_glGetDoublei_vEXT((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_vEXT, (GLenum pname, GLuint index, GLdouble *params))
#define glGetFloatIndexedvEXT(target, index, data) glatter_glGetFloatIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatIndexedvEXT, (GLenum target, GLuint index, GLfloat *data))
#define glGetFloati_vEXT(pname, index, params) glatter_glGetFloati_vEXT((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_vEXT, (GLenum pname, GLuint index, GLfloat *params))
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetFramebufferParameterivEXT((framebuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#define glGetIntegerIndexedvEXT(target, index, data) glatter_glGetIntegerIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerIndexedvEXT, (GLenum target, GLuint index, GLint *data))
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGendvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params))
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenfvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params))
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenivEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint *params))
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) glatter_glGetMultiTexImageEXT((texunit), (target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexImageEXT, (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterfvEXT((texunit), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterfvEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterivEXT((texunit), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterivEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIuivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, GLuint *params))
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetNamedBufferParameterivEXT(buffer, pname, params) glatter_glGetNamedBufferParameterivEXT((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterivEXT, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointervEXT(buffer, pname, params) glatter_glGetNamedBufferPointervEXT((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointervEXT, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glGetNamedBufferSubDataEXT((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameterivEXT((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameterivEXT, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetNamedFramebufferParameterivEXT((framebuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIivEXT, (GLuint program, GLenum target, GLuint index, GLint *params))
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIuivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIuivEXT, (GLuint program, GLenum target, GLuint index, GLuint *params))
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterdvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterdvEXT, (GLuint program, GLenum target, GLuint index, GLdouble *params))
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterfvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterfvEXT, (GLuint program, GLenum target, GLuint index, GLfloat *params))
#define glGetNamedProgramStringEXT(program, target, pname, string) glatter_glGetNamedProgramStringEXT((program), (target), (pname), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramStringEXT, (GLuint program, GLenum target, GLenum pname, void *string))
#define glGetNamedProgramivEXT(program, target, pname, params) glatter_glGetNamedProgramivEXT((program), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramivEXT, (GLuint program, GLenum target, GLenum pname, GLint *params))
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameterivEXT((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameterivEXT, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetPointerIndexedvEXT(target, index, data) glatter_glGetPointerIndexedvEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerIndexedvEXT, (GLenum target, GLuint index, void **data))
#define glGetPointeri_vEXT(pname, index, params) glatter_glGetPointeri_vEXT((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointeri_vEXT, (GLenum pname, GLuint index, void **params))
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) glatter_glGetTextureImageEXT((texture), (target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImageEXT, (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterfvEXT((texture), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfvEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterivEXT((texture), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterivEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIivEXT(texture, target, pname, params) glatter_glGetTextureParameterIivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#define glGetTextureParameterIuivEXT(texture, target, pname, params) glatter_glGetTextureParameterIuivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, GLuint *params))
#define glGetTextureParameterfvEXT(texture, target, pname, params) glatter_glGetTextureParameterfvEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat *params))
#define glGetTextureParameterivEXT(texture, target, pname, params) glatter_glGetTextureParameterivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayIntegeri_vEXT((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) glatter_glGetVertexArrayIntegervEXT((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegervEXT, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayPointeri_vEXT((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, void **param))
#define glGetVertexArrayPointervEXT(vaobj, pname, param) glatter_glGetVertexArrayPointervEXT((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointervEXT, (GLuint vaobj, GLenum pname, void **param))
#define glIsEnabledIndexedEXT(target, index) glatter_glIsEnabledIndexedEXT((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledIndexedEXT, (GLenum target, GLuint index))
#define glMapNamedBufferEXT(buffer, access) glatter_glMapNamedBufferEXT((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferEXT, (GLuint buffer, GLenum access))
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) glatter_glMapNamedBufferRangeEXT((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT((mode), (left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glMatrixFrustumEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadIdentityEXT, (GLenum mode))
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposedEXT, (GLenum mode, const GLdouble *m))
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposefEXT, (GLenum mode, const GLfloat *m))
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoaddEXT, (GLenum mode, const GLdouble *m))
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadfEXT, (GLenum mode, const GLfloat *m))
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposedEXT, (GLenum mode, const GLdouble *m))
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposefEXT, (GLenum mode, const GLfloat *m))
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultdEXT, (GLenum mode, const GLdouble *m))
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultfEXT, (GLenum mode, const GLfloat *m))
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT((mode), (left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glMatrixOrthoEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixPopEXT, (GLenum mode))
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixPushEXT, (GLenum mode))
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT((mode), (angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatedEXT, (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT((mode), (angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatefEXT, (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixScaledEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixScalefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatedEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) glatter_glMultiTexBufferEXT((texunit), (target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexBufferEXT, (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer))
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) glatter_glMultiTexCoordPointerEXT((texunit), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordPointerEXT, (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glMultiTexEnvfEXT(texunit, target, pname, param) glatter_glMultiTexEnvfEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#define glMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glMultiTexEnvfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#define glMultiTexEnviEXT(texunit, target, pname, param) glatter_glMultiTexEnviEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnviEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#define glMultiTexEnvivEXT(texunit, target, pname, params) glatter_glMultiTexEnvivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexGendEXT(texunit, coord, pname, param) glatter_glMultiTexGendEXT((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble param))
#define glMultiTexGendvEXT(texunit, coord, pname, params) glatter_glMultiTexGendvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params))
#define glMultiTexGenfEXT(texunit, coord, pname, param) glatter_glMultiTexGenfEXT((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat param))
#define glMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glMultiTexGenfvEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params))
#define glMultiTexGeniEXT(texunit, coord, pname, param) glatter_glMultiTexGeniEXT((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGeniEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint param))
#define glMultiTexGenivEXT(texunit, coord, pname, params) glatter_glMultiTexGenivEXT((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLint *params))
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) glatter_glMultiTexImage1DEXT((texunit), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) glatter_glMultiTexImage2DEXT((texunit), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glMultiTexImage3DEXT((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIuivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLuint *params))
#define glMultiTexParameterfEXT(texunit, target, pname, param) glatter_glMultiTexParameterfEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#define glMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glMultiTexParameterfvEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#define glMultiTexParameteriEXT(texunit, target, pname, param) glatter_glMultiTexParameteriEXT((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameteriEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#define glMultiTexParameterivEXT(texunit, target, pname, params) glatter_glMultiTexParameterivEXT((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) glatter_glMultiTexRenderbufferEXT((texunit), (target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexRenderbufferEXT, (GLenum texunit, GLenum target, GLuint renderbuffer))
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) glatter_glMultiTexSubImage1DEXT((texunit), (target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glMultiTexSubImage2DEXT((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glMultiTexSubImage3DEXT((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glNamedBufferDataEXT(buffer, size, data, usage) glatter_glNamedBufferDataEXT((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferDataEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#define glNamedBufferStorageEXT(buffer, size, data, flags) glatter_glNamedBufferStorageEXT((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#define glNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glNamedBufferSubDataEXT((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glNamedCopyBufferSubDataEXT((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glNamedCopyBufferSubDataEXT, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) glatter_glNamedFramebufferParameteriEXT((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteriEXT, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbufferEXT((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbufferEXT, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture1DEXT((framebuffer), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture1DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture2DEXT((framebuffer), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture2DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) glatter_glNamedFramebufferTexture3DEXT((framebuffer), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture3DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTextureEXT((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) glatter_glNamedFramebufferTextureFaceEXT((framebuffer), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureFaceEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayerEXT((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayerEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4dEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dEXT, (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4dvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dvEXT, (GLuint program, GLenum target, GLuint index, const GLdouble *params))
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4fEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fEXT, (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4fvEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fvEXT, (GLuint program, GLenum target, GLuint index, const GLfloat *params))
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4iEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4iEXT, (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4ivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4ivEXT, (GLuint program, GLenum target, GLuint index, const GLint *params))
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4uiEXT((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uiEXT, (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4uivEXT((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uivEXT, (GLuint program, GLenum target, GLuint index, const GLuint *params))
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) glatter_glNamedProgramLocalParameters4fvEXT((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameters4fvEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4ivEXT((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4ivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params))
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4uivEXT((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4uivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params))
#define glNamedProgramStringEXT(program, target, format, len, string) glatter_glNamedProgramStringEXT((program), (target), (format), (len), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramStringEXT, (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string))
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorageEXT((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageEXT, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleCoverageEXT((renderbuffer), (coverageSamples), (colorSamples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleCoverageEXT, (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleEXT((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleEXT, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glProgramUniform1dEXT(program, location, x) glatter_glProgramUniform1dEXT((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dEXT, (GLuint program, GLint location, GLdouble x))
#define glProgramUniform1dvEXT(program, location, count, value) glatter_glProgramUniform1dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fEXT, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iEXT, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiEXT, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2dEXT(program, location, x, y) glatter_glProgramUniform2dEXT((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y))
#define glProgramUniform2dvEXT(program, location, count, value) glatter_glProgramUniform2dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iEXT, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3dEXT(program, location, x, y, z) glatter_glProgramUniform3dEXT((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glProgramUniform3dvEXT(program, location, count, value) glatter_glProgramUniform3dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4dEXT(program, location, x, y, z, w) glatter_glProgramUniform4dEXT((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramUniform4dvEXT(program, location, count, value) glatter_glProgramUniform4dvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glPushClientAttribDefaultEXT(mask) glatter_glPushClientAttribDefaultEXT((mask))
GLATTER_UBLOCK(void, APIENTRY, glPushClientAttribDefaultEXT, (GLbitfield mask))
#define glTextureBufferEXT(texture, target, internalformat, buffer) glatter_glTextureBufferEXT((texture), (target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer))
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) glatter_glTextureBufferRangeEXT((texture), (target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRangeEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) glatter_glTextureImage1DEXT((texture), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) glatter_glTextureImage2DEXT((texture), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTextureImage3DEXT((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexturePageCommitmentEXT((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, APIENTRY, glTexturePageCommitmentEXT, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#define glTextureParameterIivEXT(texture, target, pname, params) glatter_glTextureParameterIivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#define glTextureParameterIuivEXT(texture, target, pname, params) glatter_glTextureParameterIuivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, const GLuint *params))
#define glTextureParameterfEXT(texture, target, pname, param) glatter_glTextureParameterfEXT((texture), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat param))
#define glTextureParameterfvEXT(texture, target, pname, params) glatter_glTextureParameterfvEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, const GLfloat *params))
#define glTextureParameteriEXT(texture, target, pname, param) glatter_glTextureParameteriEXT((texture), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriEXT, (GLuint texture, GLenum target, GLenum pname, GLint param))
#define glTextureParameterivEXT(texture, target, pname, params) glatter_glTextureParameterivEXT((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#define glTextureRenderbufferEXT(texture, target, renderbuffer) glatter_glTextureRenderbufferEXT((texture), (target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureRenderbufferEXT, (GLuint texture, GLenum target, GLuint renderbuffer))
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT((texture), (target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT((texture), (target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisampleEXT((texture), (target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT((texture), (target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisampleEXT((texture), (target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1DEXT((texture), (target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2DEXT((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3DEXT((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glUnmapNamedBufferEXT(buffer) glatter_glUnmapNamedBufferEXT((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBufferEXT, (GLuint buffer))
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayBindVertexBufferEXT((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindVertexBufferEXT, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayColorOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) glatter_glVertexArrayEdgeFlagOffsetEXT((vaobj), (buffer), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayEdgeFlagOffsetEXT, (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset))
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayFogCoordOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayFogCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayIndexOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayIndexOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) glatter_glVertexArrayMultiTexCoordOffsetEXT((vaobj), (buffer), (texunit), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayMultiTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayNormalOffsetEXT((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayNormalOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArraySecondaryColorOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArraySecondaryColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayTexCoordOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) glatter_glVertexArrayVertexAttribBindingEXT((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribBindingEXT, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) glatter_glVertexArrayVertexAttribDivisorEXT((vaobj), (index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribDivisorEXT, (GLuint vaobj, GLuint index, GLuint divisor))
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayVertexAttribFormatEXT((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribIFormatEXT((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribIOffsetEXT((vaobj), (buffer), (index), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribLFormatEXT((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribLOffsetEXT((vaobj), (buffer), (index), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) glatter_glVertexArrayVertexAttribOffsetEXT((vaobj), (buffer), (index), (size), (type), (normalized), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) glatter_glVertexArrayVertexBindingDivisorEXT((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBindingDivisorEXT, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayVertexOffsetEXT((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#endif // defined(GL_EXT_direct_state_access)
#if defined(GL_EXT_draw_buffers2)
#define glColorMaskIndexedEXT(index, r, g, b, a) glatter_glColorMaskIndexedEXT((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, APIENTRY, glColorMaskIndexedEXT, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#endif // defined(GL_EXT_draw_buffers2)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT((mode), (start), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_range_elements)
#define glDrawRangeElementsEXT(mode, start, end, count, type, indices) glatter_glDrawRangeElementsEXT((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsEXT, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#endif // defined(GL_EXT_draw_range_elements)
#if defined(GL_EXT_external_buffer)
#define glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags) glatter_glBufferStorageExternalEXT((target), (offset), (size), (clientBuffer), (flags))
GLATTER_UBLOCK(void, APIENTRY, glBufferStorageExternalEXT, (GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags))
#define glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags) glatter_glNamedBufferStorageExternalEXT((buffer), (offset), (size), (clientBuffer), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageExternalEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags))
#endif // defined(GL_EXT_external_buffer)
#if defined(GL_EXT_fog_coord)
#define glFogCoordPointerEXT(type, stride, pointer) glatter_glFogCoordPointerEXT((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#define glFogCoorddEXT(coord) glatter_glFogCoorddEXT((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddEXT, (GLdouble coord))
#define glFogCoorddvEXT(coord) glatter_glFogCoorddvEXT((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddvEXT, (const GLdouble *coord))
#define glFogCoordfEXT(coord) glatter_glFogCoordfEXT((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfEXT, (GLfloat coord))
#define glFogCoordfvEXT(coord) glatter_glFogCoordfvEXT((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfvEXT, (const GLfloat *coord))
#endif // defined(GL_EXT_fog_coord)
#if defined(GL_EXT_framebuffer_blit)
#define glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferEXT((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebufferEXT, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_EXT_framebuffer_blit)
#if defined(GL_EXT_framebuffer_multisample)
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_framebuffer_multisample)
#if defined(GL_EXT_framebuffer_object)
#define glBindFramebufferEXT(target, framebuffer) glatter_glBindFramebufferEXT((target), (framebuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindFramebufferEXT, (GLenum target, GLuint framebuffer))
#define glBindRenderbufferEXT(target, renderbuffer) glatter_glBindRenderbufferEXT((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbufferEXT, (GLenum target, GLuint renderbuffer))
#define glCheckFramebufferStatusEXT(target) glatter_glCheckFramebufferStatusEXT((target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatusEXT, (GLenum target))
#define glDeleteFramebuffersEXT(n, framebuffers) glatter_glDeleteFramebuffersEXT((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffersEXT, (GLsizei n, const GLuint *framebuffers))
#define glDeleteRenderbuffersEXT(n, renderbuffers) glatter_glDeleteRenderbuffersEXT((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffersEXT, (GLsizei n, const GLuint *renderbuffers))
#define glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbufferEXT((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbufferEXT, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture1DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1DEXT((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2DEXT((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DEXT((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glGenFramebuffersEXT(n, framebuffers) glatter_glGenFramebuffersEXT((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffersEXT, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffersEXT(n, renderbuffers) glatter_glGenRenderbuffersEXT((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffersEXT, (GLsizei n, GLuint *renderbuffers))
#define glGenerateMipmapEXT(target) glatter_glGenerateMipmapEXT((target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmapEXT, (GLenum target))
#define glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameterivEXT((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameterivEXT, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetRenderbufferParameterivEXT(target, pname, params) glatter_glGetRenderbufferParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glIsFramebufferEXT(framebuffer) glatter_glIsFramebufferEXT((framebuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebufferEXT, (GLuint framebuffer))
#define glIsRenderbufferEXT(renderbuffer) glatter_glIsRenderbufferEXT((renderbuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbufferEXT, (GLuint renderbuffer))
#define glRenderbufferStorageEXT(target, internalformat, width, height) glatter_glRenderbufferStorageEXT((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_framebuffer_object)
#if defined(GL_EXT_geometry_shader4)
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteriEXT, (GLuint program, GLenum pname, GLint value))
#endif // defined(GL_EXT_geometry_shader4)
#if defined(GL_EXT_gpu_program_parameters)
#define glProgramEnvParameters4fvEXT(target, index, count, params) glatter_glProgramEnvParameters4fvEXT((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#define glProgramLocalParameters4fvEXT(target, index, count, params) glatter_glProgramLocalParameters4fvEXT((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#endif // defined(GL_EXT_gpu_program_parameters)
#if defined(GL_EXT_gpu_shader4)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT((program), (color), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationEXT, (GLuint program, GLuint color, const GLchar *name))
#define glGetFragDataLocationEXT(program, name) glatter_glGetFragDataLocationEXT((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocationEXT, (GLuint program, const GLchar *name))
#define glGetUniformuivEXT(program, location, params) glatter_glGetUniformuivEXT((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuivEXT, (GLuint program, GLint location, GLuint *params))
#define glUniform1uiEXT(location, v0) glatter_glUniform1uiEXT((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiEXT, (GLint location, GLuint v0))
#define glUniform1uivEXT(location, count, value) glatter_glUniform1uivEXT((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uivEXT, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2uiEXT(location, v0, v1) glatter_glUniform2uiEXT((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiEXT, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uivEXT(location, count, value) glatter_glUniform2uivEXT((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uivEXT, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3uiEXT(location, v0, v1, v2) glatter_glUniform3uiEXT((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uivEXT(location, count, value) glatter_glUniform3uivEXT((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uivEXT, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4uiEXT(location, v0, v1, v2, v3) glatter_glUniform4uiEXT((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uivEXT(location, count, value) glatter_glUniform4uivEXT((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uivEXT, (GLint location, GLsizei count, const GLuint *value))
#endif // defined(GL_EXT_gpu_shader4)
#if defined(GL_EXT_histogram)
#define glGetHistogramEXT(target, reset, format, type, values) glatter_glGetHistogramEXT((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetHistogramParameterfvEXT(target, pname, params) glatter_glGetHistogramParameterfvEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetHistogramParameterivEXT(target, pname, params) glatter_glGetHistogramParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetMinmaxEXT(target, reset, format, type, values) glatter_glGetMinmaxEXT((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetMinmaxParameterfvEXT(target, pname, params) glatter_glGetMinmaxParameterfvEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMinmaxParameterivEXT(target, pname, params) glatter_glGetMinmaxParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glHistogramEXT(target, width, internalformat, sink) glatter_glHistogramEXT((target), (width), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glHistogramEXT, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#define glMinmaxEXT(target, internalformat, sink) glatter_glMinmaxEXT((target), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glMinmaxEXT, (GLenum target, GLenum internalformat, GLboolean sink))
#define glResetHistogramEXT(target) glatter_glResetHistogramEXT((target))
GLATTER_UBLOCK(void, APIENTRY, glResetHistogramEXT, (GLenum target))
#define glResetMinmaxEXT(target) glatter_glResetMinmaxEXT((target))
GLATTER_UBLOCK(void, APIENTRY, glResetMinmaxEXT, (GLenum target))
#endif // defined(GL_EXT_histogram)
#if defined(GL_EXT_index_func)
#define glIndexFuncEXT(func, ref) glatter_glIndexFuncEXT((func), (ref))
GLATTER_UBLOCK(void, APIENTRY, glIndexFuncEXT, (GLenum func, GLclampf ref))
#endif // defined(GL_EXT_index_func)
#if defined(GL_EXT_index_material)
#define glIndexMaterialEXT(face, mode) glatter_glIndexMaterialEXT((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glIndexMaterialEXT, (GLenum face, GLenum mode))
#endif // defined(GL_EXT_index_material)
#if defined(GL_EXT_light_texture)
#define glApplyTextureEXT(mode) glatter_glApplyTextureEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glApplyTextureEXT, (GLenum mode))
#define glTextureLightEXT(pname) glatter_glTextureLightEXT((pname))
GLATTER_UBLOCK(void, APIENTRY, glTextureLightEXT, (GLenum pname))
#define glTextureMaterialEXT(face, mode) glatter_glTextureMaterialEXT((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glTextureMaterialEXT, (GLenum face, GLenum mode))
#endif // defined(GL_EXT_light_texture)
#if defined(GL_EXT_memory_object)
#define glBufferStorageMemEXT(target, size, memory, offset) glatter_glBufferStorageMemEXT((target), (size), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glBufferStorageMemEXT, (GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset))
#define glCreateMemoryObjectsEXT(n, memoryObjects) glatter_glCreateMemoryObjectsEXT((n), (memoryObjects))
GLATTER_UBLOCK(void, APIENTRY, glCreateMemoryObjectsEXT, (GLsizei n, GLuint *memoryObjects))
#define glDeleteMemoryObjectsEXT(n, memoryObjects) glatter_glDeleteMemoryObjectsEXT((n), (memoryObjects))
GLATTER_UBLOCK(void, APIENTRY, glDeleteMemoryObjectsEXT, (GLsizei n, const GLuint *memoryObjects))
#define glGetMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glGetMemoryObjectParameterivEXT((memoryObject), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMemoryObjectParameterivEXT, (GLuint memoryObject, GLenum pname, GLint *params))
#define glGetUnsignedBytei_vEXT(target, index, data) glatter_glGetUnsignedBytei_vEXT((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetUnsignedBytei_vEXT, (GLenum target, GLuint index, GLubyte *data))
#define glGetUnsignedBytevEXT(pname, data) glatter_glGetUnsignedBytevEXT((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetUnsignedBytevEXT, (GLenum pname, GLubyte *data))
#define glIsMemoryObjectEXT(memoryObject) glatter_glIsMemoryObjectEXT((memoryObject))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsMemoryObjectEXT, (GLuint memoryObject))
#define glMemoryObjectParameterivEXT(memoryObject, pname, params) glatter_glMemoryObjectParameterivEXT((memoryObject), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMemoryObjectParameterivEXT, (GLuint memoryObject, GLenum pname, const GLint *params))
#define glNamedBufferStorageMemEXT(buffer, size, memory, offset) glatter_glNamedBufferStorageMemEXT((buffer), (size), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageMemEXT, (GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset))
#define glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset) glatter_glTexStorageMem1DEXT((target), (levels), (internalFormat), (width), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem1DEXT, (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset))
#define glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset) glatter_glTexStorageMem2DEXT((target), (levels), (internalFormat), (width), (height), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem2DEXT, (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset))
#define glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTexStorageMem2DMultisampleEXT((target), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem2DMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#define glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset) glatter_glTexStorageMem3DEXT((target), (levels), (internalFormat), (width), (height), (depth), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem3DEXT, (GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset))
#define glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTexStorageMem3DMultisampleEXT((target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTexStorageMem3DMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#define glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset) glatter_glTextureStorageMem1DEXT((texture), (levels), (internalFormat), (width), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem1DEXT, (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset))
#define glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset) glatter_glTextureStorageMem2DEXT((texture), (levels), (internalFormat), (width), (height), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem2DEXT, (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset))
#define glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem2DMultisampleEXT((texture), (samples), (internalFormat), (width), (height), (fixedSampleLocations), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem2DMultisampleEXT, (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#define glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset) glatter_glTextureStorageMem3DEXT((texture), (levels), (internalFormat), (width), (height), (depth), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem3DEXT, (GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset))
#define glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset) glatter_glTextureStorageMem3DMultisampleEXT((texture), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), (memory), (offset))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageMem3DMultisampleEXT, (GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset))
#endif // defined(GL_EXT_memory_object)
#if defined(GL_EXT_memory_object_fd)
#define glImportMemoryFdEXT(memory, size, handleType, fd) glatter_glImportMemoryFdEXT((memory), (size), (handleType), (fd))
GLATTER_UBLOCK(void, APIENTRY, glImportMemoryFdEXT, (GLuint memory, GLuint64 size, GLenum handleType, GLint fd))
#endif // defined(GL_EXT_memory_object_fd)
#if defined(GL_EXT_memory_object_win32)
#define glImportMemoryWin32HandleEXT(memory, size, handleType, handle) glatter_glImportMemoryWin32HandleEXT((memory), (size), (handleType), (handle))
GLATTER_UBLOCK(void, APIENTRY, glImportMemoryWin32HandleEXT, (GLuint memory, GLuint64 size, GLenum handleType, void *handle))
#define glImportMemoryWin32NameEXT(memory, size, handleType, name) glatter_glImportMemoryWin32NameEXT((memory), (size), (handleType), (name))
GLATTER_UBLOCK(void, APIENTRY, glImportMemoryWin32NameEXT, (GLuint memory, GLuint64 size, GLenum handleType, const void *name))
#endif // defined(GL_EXT_memory_object_win32)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysEXT, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount))
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisample)
#define glSampleMaskEXT(value, invert) glatter_glSampleMaskEXT((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskEXT, (GLclampf value, GLboolean invert))
#define glSamplePatternEXT(pattern) glatter_glSamplePatternEXT((pattern))
GLATTER_UBLOCK(void, APIENTRY, glSamplePatternEXT, (GLenum pattern))
#endif // defined(GL_EXT_multisample)
#if defined(GL_EXT_paletted_texture)
#define glColorTableEXT(target, internalFormat, width, format, type, table) glatter_glColorTableEXT((target), (internalFormat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glColorTableEXT, (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table))
#define glGetColorTableEXT(target, format, type, data) glatter_glGetColorTableEXT((target), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableEXT, (GLenum target, GLenum format, GLenum type, void *data))
#define glGetColorTableParameterfvEXT(target, pname, params) glatter_glGetColorTableParameterfvEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameterivEXT(target, pname, params) glatter_glGetColorTableParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#endif // defined(GL_EXT_paletted_texture)
#if defined(GL_EXT_pixel_transform)
#define glGetPixelTransformParameterfvEXT(target, pname, params) glatter_glGetPixelTransformParameterfvEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTransformParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetPixelTransformParameterivEXT(target, pname, params) glatter_glGetPixelTransformParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTransformParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glPixelTransformParameterfEXT(target, pname, param) glatter_glPixelTransformParameterfEXT((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterfEXT, (GLenum target, GLenum pname, GLfloat param))
#define glPixelTransformParameterfvEXT(target, pname, params) glatter_glPixelTransformParameterfvEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterfvEXT, (GLenum target, GLenum pname, const GLfloat *params))
#define glPixelTransformParameteriEXT(target, pname, param) glatter_glPixelTransformParameteriEXT((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameteriEXT, (GLenum target, GLenum pname, GLint param))
#define glPixelTransformParameterivEXT(target, pname, params) glatter_glPixelTransformParameterivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterivEXT, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_EXT_pixel_transform)
#if defined(GL_EXT_point_parameters)
#define glPointParameterfEXT(pname, param) glatter_glPointParameterfEXT((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfEXT, (GLenum pname, GLfloat param))
#define glPointParameterfvEXT(pname, params) glatter_glPointParameterfvEXT((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvEXT, (GLenum pname, const GLfloat *params))
#endif // defined(GL_EXT_point_parameters)
#if defined(GL_EXT_polygon_offset)
#define glPolygonOffsetEXT(factor, bias) glatter_glPolygonOffsetEXT((factor), (bias))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetEXT, (GLfloat factor, GLfloat bias))
#endif // defined(GL_EXT_polygon_offset)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT((factor), (units), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp))
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_provoking_vertex)
#define glProvokingVertexEXT(mode) glatter_glProvokingVertexEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertexEXT, (GLenum mode))
#endif // defined(GL_EXT_provoking_vertex)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT((samples), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations))
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_secondary_color)
#define glSecondaryColor3bEXT(red, green, blue) glatter_glSecondaryColor3bEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bEXT, (GLbyte red, GLbyte green, GLbyte blue))
#define glSecondaryColor3bvEXT(v) glatter_glSecondaryColor3bvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bvEXT, (const GLbyte *v))
#define glSecondaryColor3dEXT(red, green, blue) glatter_glSecondaryColor3dEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dEXT, (GLdouble red, GLdouble green, GLdouble blue))
#define glSecondaryColor3dvEXT(v) glatter_glSecondaryColor3dvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dvEXT, (const GLdouble *v))
#define glSecondaryColor3fEXT(red, green, blue) glatter_glSecondaryColor3fEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fEXT, (GLfloat red, GLfloat green, GLfloat blue))
#define glSecondaryColor3fvEXT(v) glatter_glSecondaryColor3fvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fvEXT, (const GLfloat *v))
#define glSecondaryColor3iEXT(red, green, blue) glatter_glSecondaryColor3iEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3iEXT, (GLint red, GLint green, GLint blue))
#define glSecondaryColor3ivEXT(v) glatter_glSecondaryColor3ivEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ivEXT, (const GLint *v))
#define glSecondaryColor3sEXT(red, green, blue) glatter_glSecondaryColor3sEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3sEXT, (GLshort red, GLshort green, GLshort blue))
#define glSecondaryColor3svEXT(v) glatter_glSecondaryColor3svEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3svEXT, (const GLshort *v))
#define glSecondaryColor3ubEXT(red, green, blue) glatter_glSecondaryColor3ubEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubEXT, (GLubyte red, GLubyte green, GLubyte blue))
#define glSecondaryColor3ubvEXT(v) glatter_glSecondaryColor3ubvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubvEXT, (const GLubyte *v))
#define glSecondaryColor3uiEXT(red, green, blue) glatter_glSecondaryColor3uiEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uiEXT, (GLuint red, GLuint green, GLuint blue))
#define glSecondaryColor3uivEXT(v) glatter_glSecondaryColor3uivEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uivEXT, (const GLuint *v))
#define glSecondaryColor3usEXT(red, green, blue) glatter_glSecondaryColor3usEXT((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usEXT, (GLushort red, GLushort green, GLushort blue))
#define glSecondaryColor3usvEXT(v) glatter_glSecondaryColor3usvEXT((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usvEXT, (const GLushort *v))
#define glSecondaryColorPointerEXT(size, type, stride, pointer) glatter_glSecondaryColorPointerEXT((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointerEXT, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_secondary_color)
#if defined(GL_EXT_semaphore)
#define glDeleteSemaphoresEXT(n, semaphores) glatter_glDeleteSemaphoresEXT((n), (semaphores))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSemaphoresEXT, (GLsizei n, const GLuint *semaphores))
#define glGenSemaphoresEXT(n, semaphores) glatter_glGenSemaphoresEXT((n), (semaphores))
GLATTER_UBLOCK(void, APIENTRY, glGenSemaphoresEXT, (GLsizei n, GLuint *semaphores))
#define glGetSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glGetSemaphoreParameterui64vEXT((semaphore), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSemaphoreParameterui64vEXT, (GLuint semaphore, GLenum pname, GLuint64 *params))
#define glIsSemaphoreEXT(semaphore) glatter_glIsSemaphoreEXT((semaphore))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSemaphoreEXT, (GLuint semaphore))
#define glSemaphoreParameterui64vEXT(semaphore, pname, params) glatter_glSemaphoreParameterui64vEXT((semaphore), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glSemaphoreParameterui64vEXT, (GLuint semaphore, GLenum pname, const GLuint64 *params))
#define glSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts) glatter_glSignalSemaphoreEXT((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (dstLayouts))
GLATTER_UBLOCK(void, APIENTRY, glSignalSemaphoreEXT, (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts))
#define glWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts) glatter_glWaitSemaphoreEXT((semaphore), (numBufferBarriers), (buffers), (numTextureBarriers), (textures), (srcLayouts))
GLATTER_UBLOCK(void, APIENTRY, glWaitSemaphoreEXT, (GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts))
#endif // defined(GL_EXT_semaphore)
#if defined(GL_EXT_semaphore_fd)
#define glImportSemaphoreFdEXT(semaphore, handleType, fd) glatter_glImportSemaphoreFdEXT((semaphore), (handleType), (fd))
GLATTER_UBLOCK(void, APIENTRY, glImportSemaphoreFdEXT, (GLuint semaphore, GLenum handleType, GLint fd))
#endif // defined(GL_EXT_semaphore_fd)
#if defined(GL_EXT_semaphore_win32)
#define glImportSemaphoreWin32HandleEXT(semaphore, handleType, handle) glatter_glImportSemaphoreWin32HandleEXT((semaphore), (handleType), (handle))
GLATTER_UBLOCK(void, APIENTRY, glImportSemaphoreWin32HandleEXT, (GLuint semaphore, GLenum handleType, void *handle))
#define glImportSemaphoreWin32NameEXT(semaphore, handleType, name) glatter_glImportSemaphoreWin32NameEXT((semaphore), (handleType), (name))
GLATTER_UBLOCK(void, APIENTRY, glImportSemaphoreWin32NameEXT, (GLuint semaphore, GLenum handleType, const void *name))
#endif // defined(GL_EXT_semaphore_win32)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT((program))
GLATTER_UBLOCK(void, APIENTRY, glActiveProgramEXT, (GLuint program))
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT((type), (string))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramEXT, (GLenum type, const GLchar *string))
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT((type), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseShaderProgramEXT, (GLenum type, GLuint program))
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#define glFramebufferFetchBarrierEXT() glatter_glFramebufferFetchBarrierEXT()
GLATTER_UBLOCK(void, APIENTRY, glFramebufferFetchBarrierEXT, (void))
#endif // defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#if defined(GL_EXT_shader_image_load_store)
#define glBindImageTextureEXT(index, texture, level, layered, layer, access, format) glatter_glBindImageTextureEXT((index), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextureEXT, (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format))
#define glMemoryBarrierEXT(barriers) glatter_glMemoryBarrierEXT((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierEXT, (GLbitfield barriers))
#endif // defined(GL_EXT_shader_image_load_store)
#if defined(GL_EXT_stencil_clear_tag)
#define glStencilClearTagEXT(stencilTagBits, stencilClearTag) glatter_glStencilClearTagEXT((stencilTagBits), (stencilClearTag))
GLATTER_UBLOCK(void, APIENTRY, glStencilClearTagEXT, (GLsizei stencilTagBits, GLuint stencilClearTag))
#endif // defined(GL_EXT_stencil_clear_tag)
#if defined(GL_EXT_stencil_two_side)
#define glActiveStencilFaceEXT(face) glatter_glActiveStencilFaceEXT((face))
GLATTER_UBLOCK(void, APIENTRY, glActiveStencilFaceEXT, (GLenum face))
#endif // defined(GL_EXT_stencil_two_side)
#if defined(GL_EXT_subtexture)
#define glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1DEXT((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2DEXT((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_EXT_subtexture)
#if defined(GL_EXT_texture3D)
#define glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DEXT((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DEXT, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DEXT((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_EXT_texture3D)
#if defined(GL_EXT_texture_array)
#define glFramebufferTextureLayerEXT(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerEXT((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayerEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#endif // defined(GL_EXT_texture_array)
#if defined(GL_EXT_texture_buffer_object)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferEXT, (GLenum target, GLenum internalformat, GLuint buffer))
#endif // defined(GL_EXT_texture_buffer_object)
#if defined(GL_EXT_texture_integer)
#define glClearColorIiEXT(red, green, blue, alpha) glatter_glClearColorIiEXT((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColorIiEXT, (GLint red, GLint green, GLint blue, GLint alpha))
#define glClearColorIuiEXT(red, green, blue, alpha) glatter_glClearColorIuiEXT((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColorIuiEXT, (GLuint red, GLuint green, GLuint blue, GLuint alpha))
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuivEXT, (GLenum target, GLenum pname, GLuint *params))
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIivEXT, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuivEXT, (GLenum target, GLenum pname, const GLuint *params))
#endif // defined(GL_EXT_texture_integer)
#if defined(GL_EXT_texture_object)
#define glAreTexturesResidentEXT(n, textures, residences) glatter_glAreTexturesResidentEXT((n), (textures), (residences))
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreTexturesResidentEXT, (GLsizei n, const GLuint *textures, GLboolean *residences))
#define glBindTextureEXT(target, texture) glatter_glBindTextureEXT((target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTextureEXT, (GLenum target, GLuint texture))
#define glDeleteTexturesEXT(n, textures) glatter_glDeleteTexturesEXT((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTexturesEXT, (GLsizei n, const GLuint *textures))
#define glGenTexturesEXT(n, textures) glatter_glGenTexturesEXT((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glGenTexturesEXT, (GLsizei n, GLuint *textures))
#define glIsTextureEXT(texture) glatter_glIsTextureEXT((texture))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureEXT, (GLuint texture))
#define glPrioritizeTexturesEXT(n, textures, priorities) glatter_glPrioritizeTexturesEXT((n), (textures), (priorities))
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTexturesEXT, (GLsizei n, const GLuint *textures, const GLclampf *priorities))
#endif // defined(GL_EXT_texture_object)
#if defined(GL_EXT_texture_perturb_normal)
#define glTextureNormalEXT(mode) glatter_glTextureNormalEXT((mode))
GLATTER_UBLOCK(void, APIENTRY, glTextureNormalEXT, (GLenum mode))
#endif // defined(GL_EXT_texture_perturb_normal)
#if defined(GL_EXT_timer_query)
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64vEXT, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64vEXT, (GLuint id, GLenum pname, GLuint64 *params))
#endif // defined(GL_EXT_timer_query)
#if defined(GL_EXT_transform_feedback)
#define glBeginTransformFeedbackEXT(primitiveMode) glatter_glBeginTransformFeedbackEXT((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedbackEXT, (GLenum primitiveMode))
#define glBindBufferBaseEXT(target, index, buffer) glatter_glBindBufferBaseEXT((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBaseEXT, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferOffsetEXT(target, index, buffer, offset) glatter_glBindBufferOffsetEXT((target), (index), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferOffsetEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset))
#define glBindBufferRangeEXT(target, index, buffer, offset, size) glatter_glBindBufferRangeEXT((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRangeEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glEndTransformFeedbackEXT() glatter_glEndTransformFeedbackEXT()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedbackEXT, (void))
#define glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVaryingEXT((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVaryingEXT, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryingsEXT((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryingsEXT, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#endif // defined(GL_EXT_transform_feedback)
#if defined(GL_EXT_vertex_array)
#define glArrayElementEXT(i) glatter_glArrayElementEXT((i))
GLATTER_UBLOCK(void, APIENTRY, glArrayElementEXT, (GLint i))
#define glColorPointerEXT(size, type, stride, count, pointer) glatter_glColorPointerEXT((size), (type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glColorPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glDrawArraysEXT(mode, first, count) glatter_glDrawArraysEXT((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysEXT, (GLenum mode, GLint first, GLsizei count))
#define glEdgeFlagPointerEXT(stride, count, pointer) glatter_glEdgeFlagPointerEXT((stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointerEXT, (GLsizei stride, GLsizei count, const GLboolean *pointer))
#define glGetPointervEXT(pname, params) glatter_glGetPointervEXT((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointervEXT, (GLenum pname, void **params))
#define glIndexPointerEXT(type, stride, count, pointer) glatter_glIndexPointerEXT((type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glIndexPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glNormalPointerEXT(type, stride, count, pointer) glatter_glNormalPointerEXT((type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glTexCoordPointerEXT(size, type, stride, count, pointer) glatter_glTexCoordPointerEXT((size), (type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glVertexPointerEXT(size, type, stride, count, pointer) glatter_glVertexPointerEXT((size), (type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#endif // defined(GL_EXT_vertex_array)
#if defined(GL_EXT_vertex_attrib_64bit)
#define glGetVertexAttribLdvEXT(index, pname, params) glatter_glGetVertexAttribLdvEXT((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdvEXT, (GLuint index, GLenum pname, GLdouble *params))
#define glVertexAttribL1dEXT(index, x) glatter_glVertexAttribL1dEXT((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dEXT, (GLuint index, GLdouble x))
#define glVertexAttribL1dvEXT(index, v) glatter_glVertexAttribL1dvEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribL2dEXT(index, x, y) glatter_glVertexAttribL2dEXT((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dEXT, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttribL2dvEXT(index, v) glatter_glVertexAttribL2dvEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribL3dEXT(index, x, y, z) glatter_glVertexAttribL3dEXT((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttribL3dvEXT(index, v) glatter_glVertexAttribL3dvEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribL4dEXT(index, x, y, z, w) glatter_glVertexAttribL4dEXT((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttribL4dvEXT(index, v) glatter_glVertexAttribL4dvEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribLPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribLPointerEXT((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_vertex_attrib_64bit)
#if defined(GL_EXT_vertex_shader)
#define glBeginVertexShaderEXT() glatter_glBeginVertexShaderEXT()
GLATTER_UBLOCK(void, APIENTRY, glBeginVertexShaderEXT, (void))
#define glBindLightParameterEXT(light, value) glatter_glBindLightParameterEXT((light), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindLightParameterEXT, (GLenum light, GLenum value))
#define glBindMaterialParameterEXT(face, value) glatter_glBindMaterialParameterEXT((face), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindMaterialParameterEXT, (GLenum face, GLenum value))
#define glBindParameterEXT(value) glatter_glBindParameterEXT((value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindParameterEXT, (GLenum value))
#define glBindTexGenParameterEXT(unit, coord, value) glatter_glBindTexGenParameterEXT((unit), (coord), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindTexGenParameterEXT, (GLenum unit, GLenum coord, GLenum value))
#define glBindTextureUnitParameterEXT(unit, value) glatter_glBindTextureUnitParameterEXT((unit), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindTextureUnitParameterEXT, (GLenum unit, GLenum value))
#define glBindVertexShaderEXT(id) glatter_glBindVertexShaderEXT((id))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexShaderEXT, (GLuint id))
#define glDeleteVertexShaderEXT(id) glatter_glDeleteVertexShaderEXT((id))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexShaderEXT, (GLuint id))
#define glDisableVariantClientStateEXT(id) glatter_glDisableVariantClientStateEXT((id))
GLATTER_UBLOCK(void, APIENTRY, glDisableVariantClientStateEXT, (GLuint id))
#define glEnableVariantClientStateEXT(id) glatter_glEnableVariantClientStateEXT((id))
GLATTER_UBLOCK(void, APIENTRY, glEnableVariantClientStateEXT, (GLuint id))
#define glEndVertexShaderEXT() glatter_glEndVertexShaderEXT()
GLATTER_UBLOCK(void, APIENTRY, glEndVertexShaderEXT, (void))
#define glExtractComponentEXT(res, src, num) glatter_glExtractComponentEXT((res), (src), (num))
GLATTER_UBLOCK(void, APIENTRY, glExtractComponentEXT, (GLuint res, GLuint src, GLuint num))
#define glGenSymbolsEXT(datatype, storagetype, range, components) glatter_glGenSymbolsEXT((datatype), (storagetype), (range), (components))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenSymbolsEXT, (GLenum datatype, GLenum storagetype, GLenum range, GLuint components))
#define glGenVertexShadersEXT(range) glatter_glGenVertexShadersEXT((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenVertexShadersEXT, (GLuint range))
#define glGetInvariantBooleanvEXT(id, value, data) glatter_glGetInvariantBooleanvEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#define glGetInvariantFloatvEXT(id, value, data) glatter_glGetInvariantFloatvEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#define glGetInvariantIntegervEXT(id, value, data) glatter_glGetInvariantIntegervEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#define glGetLocalConstantBooleanvEXT(id, value, data) glatter_glGetLocalConstantBooleanvEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#define glGetLocalConstantFloatvEXT(id, value, data) glatter_glGetLocalConstantFloatvEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#define glGetLocalConstantIntegervEXT(id, value, data) glatter_glGetLocalConstantIntegervEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#define glGetVariantBooleanvEXT(id, value, data) glatter_glGetVariantBooleanvEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#define glGetVariantFloatvEXT(id, value, data) glatter_glGetVariantFloatvEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#define glGetVariantIntegervEXT(id, value, data) glatter_glGetVariantIntegervEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#define glGetVariantPointervEXT(id, value, data) glatter_glGetVariantPointervEXT((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantPointervEXT, (GLuint id, GLenum value, void **data))
#define glInsertComponentEXT(res, src, num) glatter_glInsertComponentEXT((res), (src), (num))
GLATTER_UBLOCK(void, APIENTRY, glInsertComponentEXT, (GLuint res, GLuint src, GLuint num))
#define glIsVariantEnabledEXT(id, cap) glatter_glIsVariantEnabledEXT((id), (cap))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVariantEnabledEXT, (GLuint id, GLenum cap))
#define glSetInvariantEXT(id, type, addr) glatter_glSetInvariantEXT((id), (type), (addr))
GLATTER_UBLOCK(void, APIENTRY, glSetInvariantEXT, (GLuint id, GLenum type, const void *addr))
#define glSetLocalConstantEXT(id, type, addr) glatter_glSetLocalConstantEXT((id), (type), (addr))
GLATTER_UBLOCK(void, APIENTRY, glSetLocalConstantEXT, (GLuint id, GLenum type, const void *addr))
#define glShaderOp1EXT(op, res, arg1) glatter_glShaderOp1EXT((op), (res), (arg1))
GLATTER_UBLOCK(void, APIENTRY, glShaderOp1EXT, (GLenum op, GLuint res, GLuint arg1))
#define glShaderOp2EXT(op, res, arg1, arg2) glatter_glShaderOp2EXT((op), (res), (arg1), (arg2))
GLATTER_UBLOCK(void, APIENTRY, glShaderOp2EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2))
#define glShaderOp3EXT(op, res, arg1, arg2, arg3) glatter_glShaderOp3EXT((op), (res), (arg1), (arg2), (arg3))
GLATTER_UBLOCK(void, APIENTRY, glShaderOp3EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3))
#define glSwizzleEXT(res, in, outX, outY, outZ, outW) glatter_glSwizzleEXT((res), (in), (outX), (outY), (outZ), (outW))
GLATTER_UBLOCK(void, APIENTRY, glSwizzleEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW))
#define glVariantPointerEXT(id, type, stride, addr) glatter_glVariantPointerEXT((id), (type), (stride), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantPointerEXT, (GLuint id, GLenum type, GLuint stride, const void *addr))
#define glVariantbvEXT(id, addr) glatter_glVariantbvEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantbvEXT, (GLuint id, const GLbyte *addr))
#define glVariantdvEXT(id, addr) glatter_glVariantdvEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantdvEXT, (GLuint id, const GLdouble *addr))
#define glVariantfvEXT(id, addr) glatter_glVariantfvEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantfvEXT, (GLuint id, const GLfloat *addr))
#define glVariantivEXT(id, addr) glatter_glVariantivEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantivEXT, (GLuint id, const GLint *addr))
#define glVariantsvEXT(id, addr) glatter_glVariantsvEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantsvEXT, (GLuint id, const GLshort *addr))
#define glVariantubvEXT(id, addr) glatter_glVariantubvEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantubvEXT, (GLuint id, const GLubyte *addr))
#define glVariantuivEXT(id, addr) glatter_glVariantuivEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantuivEXT, (GLuint id, const GLuint *addr))
#define glVariantusvEXT(id, addr) glatter_glVariantusvEXT((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantusvEXT, (GLuint id, const GLushort *addr))
#define glWriteMaskEXT(res, in, outX, outY, outZ, outW) glatter_glWriteMaskEXT((res), (in), (outX), (outY), (outZ), (outW))
GLATTER_UBLOCK(void, APIENTRY, glWriteMaskEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW))
#endif // defined(GL_EXT_vertex_shader)
#if defined(GL_EXT_vertex_weighting)
#define glVertexWeightPointerEXT(size, type, stride, pointer) glatter_glVertexWeightPointerEXT((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightPointerEXT, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glVertexWeightfEXT(weight) glatter_glVertexWeightfEXT((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightfEXT, (GLfloat weight))
#define glVertexWeightfvEXT(weight) glatter_glVertexWeightfvEXT((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightfvEXT, (const GLfloat *weight))
#endif // defined(GL_EXT_vertex_weighting)
#if defined(GL_EXT_win32_keyed_mutex)
#define glAcquireKeyedMutexWin32EXT(memory, key, timeout) glatter_glAcquireKeyedMutexWin32EXT((memory), (key), (timeout))
GLATTER_UBLOCK(GLboolean, APIENTRY, glAcquireKeyedMutexWin32EXT, (GLuint memory, GLuint64 key, GLuint timeout))
#define glReleaseKeyedMutexWin32EXT(memory, key) glatter_glReleaseKeyedMutexWin32EXT((memory), (key))
GLATTER_UBLOCK(GLboolean, APIENTRY, glReleaseKeyedMutexWin32EXT, (GLuint memory, GLuint64 key))
#endif // defined(GL_EXT_win32_keyed_mutex)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT((mode), (count), (box))
GLATTER_UBLOCK(void, APIENTRY, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint *box))
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_EXT_x11_sync_object)
#define glImportSyncEXT(external_sync_type, external_sync, flags) glatter_glImportSyncEXT((external_sync_type), (external_sync), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glImportSyncEXT, (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags))
#endif // defined(GL_EXT_x11_sync_object)
#if defined(GL_GREMEDY_frame_terminator)
#define glFrameTerminatorGREMEDY() glatter_glFrameTerminatorGREMEDY()
GLATTER_UBLOCK(void, APIENTRY, glFrameTerminatorGREMEDY, (void))
#endif // defined(GL_GREMEDY_frame_terminator)
#if defined(GL_GREMEDY_string_marker)
#define glStringMarkerGREMEDY(len, string) glatter_glStringMarkerGREMEDY((len), (string))
GLATTER_UBLOCK(void, APIENTRY, glStringMarkerGREMEDY, (GLsizei len, const void *string))
#endif // defined(GL_GREMEDY_string_marker)
#if defined(GL_HP_image_transform)
#define glGetImageTransformParameterfvHP(target, pname, params) glatter_glGetImageTransformParameterfvHP((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetImageTransformParameterfvHP, (GLenum target, GLenum pname, GLfloat *params))
#define glGetImageTransformParameterivHP(target, pname, params) glatter_glGetImageTransformParameterivHP((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetImageTransformParameterivHP, (GLenum target, GLenum pname, GLint *params))
#define glImageTransformParameterfHP(target, pname, param) glatter_glImageTransformParameterfHP((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterfHP, (GLenum target, GLenum pname, GLfloat param))
#define glImageTransformParameterfvHP(target, pname, params) glatter_glImageTransformParameterfvHP((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterfvHP, (GLenum target, GLenum pname, const GLfloat *params))
#define glImageTransformParameteriHP(target, pname, param) glatter_glImageTransformParameteriHP((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameteriHP, (GLenum target, GLenum pname, GLint param))
#define glImageTransformParameterivHP(target, pname, params) glatter_glImageTransformParameterivHP((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterivHP, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_HP_image_transform)
#if defined(GL_IBM_multimode_draw_arrays)
#define glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride) glatter_glMultiModeDrawArraysIBM((mode), (first), (count), (primcount), (modestride))
GLATTER_UBLOCK(void, APIENTRY, glMultiModeDrawArraysIBM, (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride))
#define glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride) glatter_glMultiModeDrawElementsIBM((mode), (count), (type), (indices), (primcount), (modestride))
GLATTER_UBLOCK(void, APIENTRY, glMultiModeDrawElementsIBM, (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride))
#endif // defined(GL_IBM_multimode_draw_arrays)
#if defined(GL_IBM_static_data)
#define glFlushStaticDataIBM(target) glatter_glFlushStaticDataIBM((target))
GLATTER_UBLOCK(void, APIENTRY, glFlushStaticDataIBM, (GLenum target))
#endif // defined(GL_IBM_static_data)
#if defined(GL_IBM_vertex_array_lists)
#define glColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glColorPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glEdgeFlagPointerListIBM(stride, pointer, ptrstride) glatter_glEdgeFlagPointerListIBM((stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointerListIBM, (GLint stride, const GLboolean **pointer, GLint ptrstride))
#define glFogCoordPointerListIBM(type, stride, pointer, ptrstride) glatter_glFogCoordPointerListIBM((type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glIndexPointerListIBM(type, stride, pointer, ptrstride) glatter_glIndexPointerListIBM((type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glIndexPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glNormalPointerListIBM(type, stride, pointer, ptrstride) glatter_glNormalPointerListIBM((type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glSecondaryColorPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glTexCoordPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glVertexPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glVertexPointerListIBM((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#endif // defined(GL_IBM_vertex_array_lists)
#if defined(GL_INGR_blend_func_separate)
#define glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateINGR((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateINGR, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#endif // defined(GL_INGR_blend_func_separate)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL()
GLATTER_UBLOCK(void, APIENTRY, glApplyFramebufferAttachmentCMAAINTEL, (void))
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_map_texture)
#define glMapTexture2DINTEL(texture, level, access, stride, layout) glatter_glMapTexture2DINTEL((texture), (level), (access), (stride), (layout))
GLATTER_UBLOCK(void *, APIENTRY, glMapTexture2DINTEL, (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout))
#define glSyncTextureINTEL(texture) glatter_glSyncTextureINTEL((texture))
GLATTER_UBLOCK(void, APIENTRY, glSyncTextureINTEL, (GLuint texture))
#define glUnmapTexture2DINTEL(texture, level) glatter_glUnmapTexture2DINTEL((texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glUnmapTexture2DINTEL, (GLuint texture, GLint level))
#endif // defined(GL_INTEL_map_texture)
#if defined(GL_INTEL_parallel_arrays)
#define glColorPointervINTEL(size, type, pointer) glatter_glColorPointervINTEL((size), (type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glColorPointervINTEL, (GLint size, GLenum type, const void **pointer))
#define glNormalPointervINTEL(type, pointer) glatter_glNormalPointervINTEL((type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointervINTEL, (GLenum type, const void **pointer))
#define glTexCoordPointervINTEL(size, type, pointer) glatter_glTexCoordPointervINTEL((size), (type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointervINTEL, (GLint size, GLenum type, const void **pointer))
#define glVertexPointervINTEL(size, type, pointer) glatter_glVertexPointervINTEL((size), (type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointervINTEL, (GLint size, GLenum type, const void **pointer))
#endif // defined(GL_INTEL_parallel_arrays)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfQueryINTEL, (GLuint queryHandle))
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL((queryId), (queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glCreatePerfQueryINTEL, (GLuint queryId, GLuint *queryHandle))
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfQueryINTEL, (GLuint queryHandle))
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfQueryINTEL, (GLuint queryHandle))
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL((queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetFirstPerfQueryIdINTEL, (GLuint *queryId))
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL((queryId), (nextQueryId))
GLATTER_UBLOCK(void, APIENTRY, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint *nextQueryId))
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue))
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL((queryHandle), (flags), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten))
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL((queryName), (queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryIdByNameINTEL, (GLchar *queryName, GLuint *queryId))
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask))
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierKHR, (void))
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_parallel_shader_compile)
#define glMaxShaderCompilerThreadsKHR(count) glatter_glMaxShaderCompilerThreadsKHR((count))
GLATTER_UBLOCK(void, APIENTRY, glMaxShaderCompilerThreadsKHR, (GLuint count))
#endif // defined(GL_KHR_parallel_shader_compile)
#if defined(GL_MESA_resize_buffers)
#define glResizeBuffersMESA() glatter_glResizeBuffersMESA()
GLATTER_UBLOCK(void, APIENTRY, glResizeBuffersMESA, (void))
#endif // defined(GL_MESA_resize_buffers)
#if defined(GL_MESA_window_pos)
#define glWindowPos2dMESA(x, y) glatter_glWindowPos2dMESA((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dMESA, (GLdouble x, GLdouble y))
#define glWindowPos2dvMESA(v) glatter_glWindowPos2dvMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dvMESA, (const GLdouble *v))
#define glWindowPos2fMESA(x, y) glatter_glWindowPos2fMESA((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fMESA, (GLfloat x, GLfloat y))
#define glWindowPos2fvMESA(v) glatter_glWindowPos2fvMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fvMESA, (const GLfloat *v))
#define glWindowPos2iMESA(x, y) glatter_glWindowPos2iMESA((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iMESA, (GLint x, GLint y))
#define glWindowPos2ivMESA(v) glatter_glWindowPos2ivMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2ivMESA, (const GLint *v))
#define glWindowPos2sMESA(x, y) glatter_glWindowPos2sMESA((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sMESA, (GLshort x, GLshort y))
#define glWindowPos2svMESA(v) glatter_glWindowPos2svMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2svMESA, (const GLshort *v))
#define glWindowPos3dMESA(x, y, z) glatter_glWindowPos3dMESA((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dMESA, (GLdouble x, GLdouble y, GLdouble z))
#define glWindowPos3dvMESA(v) glatter_glWindowPos3dvMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dvMESA, (const GLdouble *v))
#define glWindowPos3fMESA(x, y, z) glatter_glWindowPos3fMESA((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fMESA, (GLfloat x, GLfloat y, GLfloat z))
#define glWindowPos3fvMESA(v) glatter_glWindowPos3fvMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fvMESA, (const GLfloat *v))
#define glWindowPos3iMESA(x, y, z) glatter_glWindowPos3iMESA((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iMESA, (GLint x, GLint y, GLint z))
#define glWindowPos3ivMESA(v) glatter_glWindowPos3ivMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3ivMESA, (const GLint *v))
#define glWindowPos3sMESA(x, y, z) glatter_glWindowPos3sMESA((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sMESA, (GLshort x, GLshort y, GLshort z))
#define glWindowPos3svMESA(v) glatter_glWindowPos3svMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3svMESA, (const GLshort *v))
#define glWindowPos4dMESA(x, y, z, w) glatter_glWindowPos4dMESA((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4dMESA, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glWindowPos4dvMESA(v) glatter_glWindowPos4dvMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4dvMESA, (const GLdouble *v))
#define glWindowPos4fMESA(x, y, z, w) glatter_glWindowPos4fMESA((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4fMESA, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glWindowPos4fvMESA(v) glatter_glWindowPos4fvMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4fvMESA, (const GLfloat *v))
#define glWindowPos4iMESA(x, y, z, w) glatter_glWindowPos4iMESA((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4iMESA, (GLint x, GLint y, GLint z, GLint w))
#define glWindowPos4ivMESA(v) glatter_glWindowPos4ivMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4ivMESA, (const GLint *v))
#define glWindowPos4sMESA(x, y, z, w) glatter_glWindowPos4sMESA((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4sMESA, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glWindowPos4svMESA(v) glatter_glWindowPos4svMESA((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4svMESA, (const GLshort *v))
#endif // defined(GL_MESA_window_pos)
#if defined(GL_NVX_conditional_render)
#define glBeginConditionalRenderNVX(id) glatter_glBeginConditionalRenderNVX((id))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNVX, (GLuint id))
#define glEndConditionalRenderNVX() glatter_glEndConditionalRenderNVX()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNVX, (void))
#endif // defined(GL_NVX_conditional_render)
#if defined(GL_NVX_linked_gpu_multicast)
#define glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glLGPUCopyImageSubDataNVX((sourceGpu), (destinationGpuMask), (srcName), (srcTarget), (srcLevel), (srcX), (srxY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glLGPUCopyImageSubDataNVX, (GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#define glLGPUInterlockNVX() glatter_glLGPUInterlockNVX()
GLATTER_UBLOCK(void, APIENTRY, glLGPUInterlockNVX, (void))
#define glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data) glatter_glLGPUNamedBufferSubDataNVX((gpuMask), (buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glLGPUNamedBufferSubDataNVX, (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#endif // defined(GL_NVX_linked_gpu_multicast)
#if defined(GL_NV_alpha_to_coverage_dither_control)
#define glAlphaToCoverageDitherControlNV(mode) glatter_glAlphaToCoverageDitherControlNV((mode))
GLATTER_UBLOCK(void, APIENTRY, glAlphaToCoverageDitherControlNV, (GLenum mode))
#endif // defined(GL_NV_alpha_to_coverage_dither_control)
#if defined(GL_NV_bindless_multi_draw_indirect)
#define glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessNV((mode), (indirect), (drawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#define glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessNV((mode), (type), (indirect), (drawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect)
#if defined(GL_NV_bindless_multi_draw_indirect_count)
#define glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessCountNV((mode), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessCountNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#define glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessCountNV((mode), (type), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessCountNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect_count)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleNV, (GLuint texture))
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler))
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentNV, (GLuint64 handle))
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentNV, (GLuint64 handle))
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentNV, (GLuint64 handle))
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentNV, (GLuint64 handle))
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentNV, (GLuint64 handle))
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64NV, (GLint location, GLuint64 value))
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierNV, (void))
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glBlendParameteriNV, (GLenum pname, GLint value))
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV((index), (xcoeff), (ycoeff))
GLATTER_UBLOCK(void, APIENTRY, glViewportPositionWScaleNV, (GLuint index, GLfloat xcoeff, GLfloat ycoeff))
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_command_list)
#define glCallCommandListNV(list) glatter_glCallCommandListNV((list))
GLATTER_UBLOCK(void, APIENTRY, glCallCommandListNV, (GLuint list))
#define glCommandListSegmentsNV(list, segments) glatter_glCommandListSegmentsNV((list), (segments))
GLATTER_UBLOCK(void, APIENTRY, glCommandListSegmentsNV, (GLuint list, GLuint segments))
#define glCompileCommandListNV(list) glatter_glCompileCommandListNV((list))
GLATTER_UBLOCK(void, APIENTRY, glCompileCommandListNV, (GLuint list))
#define glCreateCommandListsNV(n, lists) glatter_glCreateCommandListsNV((n), (lists))
GLATTER_UBLOCK(void, APIENTRY, glCreateCommandListsNV, (GLsizei n, GLuint *lists))
#define glCreateStatesNV(n, states) glatter_glCreateStatesNV((n), (states))
GLATTER_UBLOCK(void, APIENTRY, glCreateStatesNV, (GLsizei n, GLuint *states))
#define glDeleteCommandListsNV(n, lists) glatter_glDeleteCommandListsNV((n), (lists))
GLATTER_UBLOCK(void, APIENTRY, glDeleteCommandListsNV, (GLsizei n, const GLuint *lists))
#define glDeleteStatesNV(n, states) glatter_glDeleteStatesNV((n), (states))
GLATTER_UBLOCK(void, APIENTRY, glDeleteStatesNV, (GLsizei n, const GLuint *states))
#define glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count) glatter_glDrawCommandsAddressNV((primitiveMode), (indirects), (sizes), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsAddressNV, (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count))
#define glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count) glatter_glDrawCommandsNV((primitiveMode), (buffer), (indirects), (sizes), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsNV, (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count))
#define glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesAddressNV((indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesAddressNV, (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesNV((buffer), (indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesNV, (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glGetCommandHeaderNV(tokenID, size) glatter_glGetCommandHeaderNV((tokenID), (size))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetCommandHeaderNV, (GLenum tokenID, GLuint size))
#define glGetStageIndexNV(shadertype) glatter_glGetStageIndexNV((shadertype))
GLATTER_UBLOCK(GLushort, APIENTRY, glGetStageIndexNV, (GLenum shadertype))
#define glIsCommandListNV(list) glatter_glIsCommandListNV((list))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsCommandListNV, (GLuint list))
#define glIsStateNV(state) glatter_glIsStateNV((state))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsStateNV, (GLuint state))
#define glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count) glatter_glListDrawCommandsStatesClientNV((list), (segment), (indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glListDrawCommandsStatesClientNV, (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glStateCaptureNV(state, mode) glatter_glStateCaptureNV((state), (mode))
GLATTER_UBLOCK(void, APIENTRY, glStateCaptureNV, (GLuint state, GLenum mode))
#endif // defined(GL_NV_command_list)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNV, (GLuint id, GLenum mode))
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNV, (void))
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV((xbits), (ybits))
GLATTER_UBLOCK(void, APIENTRY, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits))
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_dilate)
#define glConservativeRasterParameterfNV(pname, value) glatter_glConservativeRasterParameterfNV((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameterfNV, (GLenum pname, GLfloat value))
#endif // defined(GL_NV_conservative_raster_dilate)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameteriNV, (GLenum pname, GLint param))
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_image)
#define glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glCopyImageSubDataNV((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubDataNV, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_NV_copy_image)
#if defined(GL_NV_depth_buffer_float)
#define glClearDepthdNV(depth) glatter_glClearDepthdNV((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthdNV, (GLdouble depth))
#define glDepthBoundsdNV(zmin, zmax) glatter_glDepthBoundsdNV((zmin), (zmax))
GLATTER_UBLOCK(void, APIENTRY, glDepthBoundsdNV, (GLdouble zmin, GLdouble zmax))
#define glDepthRangedNV(zNear, zFar) glatter_glDepthRangedNV((zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangedNV, (GLdouble zNear, GLdouble zFar))
#endif // defined(GL_NV_depth_buffer_float)
#if defined(GL_NV_draw_texture)
#define glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawTextureNV((texture), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1))
GLATTER_UBLOCK(void, APIENTRY, glDrawTextureNV, (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1))
#endif // defined(GL_NV_draw_texture)
#if defined(GL_NV_draw_vulkan_image)
#define glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawVkImageNV((vkImage), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1))
GLATTER_UBLOCK(void, APIENTRY, glDrawVkImageNV, (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1))
#define glGetVkProcAddrNV(name) glatter_glGetVkProcAddrNV((name))
GLATTER_UBLOCK(GLVULKANPROCNV, APIENTRY, glGetVkProcAddrNV, (const GLchar *name))
#define glSignalVkFenceNV(vkFence) glatter_glSignalVkFenceNV((vkFence))
GLATTER_UBLOCK(void, APIENTRY, glSignalVkFenceNV, (GLuint64 vkFence))
#define glSignalVkSemaphoreNV(vkSemaphore) glatter_glSignalVkSemaphoreNV((vkSemaphore))
GLATTER_UBLOCK(void, APIENTRY, glSignalVkSemaphoreNV, (GLuint64 vkSemaphore))
#define glWaitVkSemaphoreNV(vkSemaphore) glatter_glWaitVkSemaphoreNV((vkSemaphore))
GLATTER_UBLOCK(void, APIENTRY, glWaitVkSemaphoreNV, (GLuint64 vkSemaphore))
#endif // defined(GL_NV_draw_vulkan_image)
#if defined(GL_NV_evaluators)
#define glEvalMapsNV(target, mode) glatter_glEvalMapsNV((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glEvalMapsNV, (GLenum target, GLenum mode))
#define glGetMapAttribParameterfvNV(target, index, pname, params) glatter_glGetMapAttribParameterfvNV((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapAttribParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat *params))
#define glGetMapAttribParameterivNV(target, index, pname, params) glatter_glGetMapAttribParameterivNV((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapAttribParameterivNV, (GLenum target, GLuint index, GLenum pname, GLint *params))
#define glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points) glatter_glGetMapControlPointsNV((target), (index), (type), (ustride), (vstride), (packed), (points))
GLATTER_UBLOCK(void, APIENTRY, glGetMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points))
#define glGetMapParameterfvNV(target, pname, params) glatter_glGetMapParameterfvNV((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapParameterfvNV, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMapParameterivNV(target, pname, params) glatter_glGetMapParameterivNV((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapParameterivNV, (GLenum target, GLenum pname, GLint *params))
#define glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points) glatter_glMapControlPointsNV((target), (index), (type), (ustride), (vstride), (uorder), (vorder), (packed), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points))
#define glMapParameterfvNV(target, pname, params) glatter_glMapParameterfvNV((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMapParameterfvNV, (GLenum target, GLenum pname, const GLfloat *params))
#define glMapParameterivNV(target, pname, params) glatter_glMapParameterivNV((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMapParameterivNV, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_NV_evaluators)
#if defined(GL_NV_explicit_multisample)
#define glGetMultisamplefvNV(pname, index, val) glatter_glGetMultisamplefvNV((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefvNV, (GLenum pname, GLuint index, GLfloat *val))
#define glSampleMaskIndexedNV(index, mask) glatter_glSampleMaskIndexedNV((index), (mask))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskIndexedNV, (GLuint index, GLbitfield mask))
#define glTexRenderbufferNV(target, renderbuffer) glatter_glTexRenderbufferNV((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glTexRenderbufferNV, (GLenum target, GLuint renderbuffer))
#endif // defined(GL_NV_explicit_multisample)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFencesNV, (GLsizei n, const GLuint *fences))
#define glFinishFenceNV(fence) glatter_glFinishFenceNV((fence))
GLATTER_UBLOCK(void, APIENTRY, glFinishFenceNV, (GLuint fence))
#define glGenFencesNV(n, fences) glatter_glGenFencesNV((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glGenFencesNV, (GLsizei n, GLuint *fences))
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV((fence), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFenceivNV, (GLuint fence, GLenum pname, GLint *params))
#define glIsFenceNV(fence) glatter_glIsFenceNV((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFenceNV, (GLuint fence))
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV((fence), (condition))
GLATTER_UBLOCK(void, APIENTRY, glSetFenceNV, (GLuint fence, GLenum condition))
#define glTestFenceNV(fence) glatter_glTestFenceNV((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestFenceNV, (GLuint fence))
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV((color))
GLATTER_UBLOCK(void, APIENTRY, glFragmentCoverageColorNV, (GLuint color))
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_fragment_program)
#define glGetProgramNamedParameterdvNV(id, len, name, params) glatter_glGetProgramNamedParameterdvNV((id), (len), (name), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramNamedParameterdvNV, (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params))
#define glGetProgramNamedParameterfvNV(id, len, name, params) glatter_glGetProgramNamedParameterfvNV((id), (len), (name), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramNamedParameterfvNV, (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params))
#define glProgramNamedParameter4dNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4dNV((id), (len), (name), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4dNV, (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramNamedParameter4dvNV(id, len, name, v) glatter_glProgramNamedParameter4dvNV((id), (len), (name), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4dvNV, (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v))
#define glProgramNamedParameter4fNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4fNV((id), (len), (name), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4fNV, (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramNamedParameter4fvNV(id, len, name, v) glatter_glProgramNamedParameter4fvNV((id), (len), (name), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4fvNV, (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v))
#endif // defined(GL_NV_fragment_program)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV((components))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationNV, (GLenum components))
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV((n), (v))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationTableNV, (GLsizei n, const GLfloat *v))
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV((bufsize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetCoverageModulationTableNV, (GLsizei bufsize, GLfloat *v))
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample_coverage)
#define glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleCoverageNV((target), (coverageSamples), (colorSamples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_NV_framebuffer_multisample_coverage)
#if defined(GL_NV_geometry_program4)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glFramebufferTextureFaceEXT(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceEXT((target), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureFaceEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glProgramVertexLimitNV(target, limit) glatter_glProgramVertexLimitNV((target), (limit))
GLATTER_UBLOCK(void, APIENTRY, glProgramVertexLimitNV, (GLenum target, GLint limit))
#endif // defined(GL_NV_geometry_program4)
#if defined(GL_NV_gpu_multicast)
#define glMulticastBarrierNV() glatter_glMulticastBarrierNV()
GLATTER_UBLOCK(void, APIENTRY, glMulticastBarrierNV, (void))
#define glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glMulticastBlitFramebufferNV((srcGpu), (dstGpu), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glMulticastBlitFramebufferNV, (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data) glatter_glMulticastBufferSubDataNV((gpuMask), (buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glMulticastBufferSubDataNV, (GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#define glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glMulticastCopyBufferSubDataNV((readGpu), (writeGpuMask), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glMulticastCopyBufferSubDataNV, (GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glMulticastCopyImageSubDataNV((srcGpu), (dstGpuMask), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, APIENTRY, glMulticastCopyImageSubDataNV, (GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v) glatter_glMulticastFramebufferSampleLocationsfvNV((gpu), (framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glMulticastFramebufferSampleLocationsfvNV, (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#define glMulticastGetQueryObjecti64vNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjecti64vNV((gpu), (id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjecti64vNV, (GLuint gpu, GLuint id, GLenum pname, GLint64 *params))
#define glMulticastGetQueryObjectivNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectivNV((gpu), (id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjectivNV, (GLuint gpu, GLuint id, GLenum pname, GLint *params))
#define glMulticastGetQueryObjectui64vNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectui64vNV((gpu), (id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjectui64vNV, (GLuint gpu, GLuint id, GLenum pname, GLuint64 *params))
#define glMulticastGetQueryObjectuivNV(gpu, id, pname, params) glatter_glMulticastGetQueryObjectuivNV((gpu), (id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMulticastGetQueryObjectuivNV, (GLuint gpu, GLuint id, GLenum pname, GLuint *params))
#define glMulticastWaitSyncNV(signalGpu, waitGpuMask) glatter_glMulticastWaitSyncNV((signalGpu), (waitGpuMask))
GLATTER_UBLOCK(void, APIENTRY, glMulticastWaitSyncNV, (GLuint signalGpu, GLbitfield waitGpuMask))
#define glRenderGpuMaskNV(mask) glatter_glRenderGpuMaskNV((mask))
GLATTER_UBLOCK(void, APIENTRY, glRenderGpuMaskNV, (GLbitfield mask))
#endif // defined(GL_NV_gpu_multicast)
#if defined(GL_NV_gpu_program4)
#define glGetProgramEnvParameterIivNV(target, index, params) glatter_glGetProgramEnvParameterIivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterIivNV, (GLenum target, GLuint index, GLint *params))
#define glGetProgramEnvParameterIuivNV(target, index, params) glatter_glGetProgramEnvParameterIuivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterIuivNV, (GLenum target, GLuint index, GLuint *params))
#define glGetProgramLocalParameterIivNV(target, index, params) glatter_glGetProgramLocalParameterIivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterIivNV, (GLenum target, GLuint index, GLint *params))
#define glGetProgramLocalParameterIuivNV(target, index, params) glatter_glGetProgramLocalParameterIuivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterIuivNV, (GLenum target, GLuint index, GLuint *params))
#define glProgramEnvParameterI4iNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4iNV((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glProgramEnvParameterI4ivNV(target, index, params) glatter_glProgramEnvParameterI4ivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4ivNV, (GLenum target, GLuint index, const GLint *params))
#define glProgramEnvParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4uiNV((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glProgramEnvParameterI4uivNV(target, index, params) glatter_glProgramEnvParameterI4uivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4uivNV, (GLenum target, GLuint index, const GLuint *params))
#define glProgramEnvParametersI4ivNV(target, index, count, params) glatter_glProgramEnvParametersI4ivNV((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint *params))
#define glProgramEnvParametersI4uivNV(target, index, count, params) glatter_glProgramEnvParametersI4uivNV((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint *params))
#define glProgramLocalParameterI4iNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4iNV((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glProgramLocalParameterI4ivNV(target, index, params) glatter_glProgramLocalParameterI4ivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4ivNV, (GLenum target, GLuint index, const GLint *params))
#define glProgramLocalParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4uiNV((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glProgramLocalParameterI4uivNV(target, index, params) glatter_glProgramLocalParameterI4uivNV((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4uivNV, (GLenum target, GLuint index, const GLuint *params))
#define glProgramLocalParametersI4ivNV(target, index, count, params) glatter_glProgramLocalParametersI4ivNV((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint *params))
#define glProgramLocalParametersI4uivNV(target, index, count, params) glatter_glProgramLocalParametersI4uivNV((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint *params))
#endif // defined(GL_NV_gpu_program4)
#if defined(GL_NV_gpu_program5)
#define glGetProgramSubroutineParameteruivNV(target, index, param) glatter_glGetProgramSubroutineParameteruivNV((target), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramSubroutineParameteruivNV, (GLenum target, GLuint index, GLuint *param))
#define glProgramSubroutineParametersuivNV(target, count, params) glatter_glProgramSubroutineParametersuivNV((target), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramSubroutineParametersuivNV, (GLenum target, GLsizei count, const GLuint *params))
#endif // defined(GL_NV_gpu_program5)
#if defined(GL_NV_half_float)
#define glColor3hNV(red, green, blue) glatter_glColor3hNV((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue))
#define glColor3hvNV(v) glatter_glColor3hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3hvNV, (const GLhalfNV *v))
#define glColor4hNV(red, green, blue, alpha) glatter_glColor4hNV((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha))
#define glColor4hvNV(v) glatter_glColor4hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4hvNV, (const GLhalfNV *v))
#define glFogCoordhNV(fog) glatter_glFogCoordhNV((fog))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordhNV, (GLhalfNV fog))
#define glFogCoordhvNV(fog) glatter_glFogCoordhvNV((fog))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordhvNV, (const GLhalfNV *fog))
#define glMultiTexCoord1hNV(target, s) glatter_glMultiTexCoord1hNV((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1hNV, (GLenum target, GLhalfNV s))
#define glMultiTexCoord1hvNV(target, v) glatter_glMultiTexCoord1hvNV((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1hvNV, (GLenum target, const GLhalfNV *v))
#define glMultiTexCoord2hNV(target, s, t) glatter_glMultiTexCoord2hNV((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2hNV, (GLenum target, GLhalfNV s, GLhalfNV t))
#define glMultiTexCoord2hvNV(target, v) glatter_glMultiTexCoord2hvNV((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2hvNV, (GLenum target, const GLhalfNV *v))
#define glMultiTexCoord3hNV(target, s, t, r) glatter_glMultiTexCoord3hNV((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r))
#define glMultiTexCoord3hvNV(target, v) glatter_glMultiTexCoord3hvNV((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3hvNV, (GLenum target, const GLhalfNV *v))
#define glMultiTexCoord4hNV(target, s, t, r, q) glatter_glMultiTexCoord4hNV((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q))
#define glMultiTexCoord4hvNV(target, v) glatter_glMultiTexCoord4hvNV((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4hvNV, (GLenum target, const GLhalfNV *v))
#define glNormal3hNV(nx, ny, nz) glatter_glNormal3hNV((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3hNV, (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz))
#define glNormal3hvNV(v) glatter_glNormal3hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3hvNV, (const GLhalfNV *v))
#define glSecondaryColor3hNV(red, green, blue) glatter_glSecondaryColor3hNV((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue))
#define glSecondaryColor3hvNV(v) glatter_glSecondaryColor3hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3hvNV, (const GLhalfNV *v))
#define glTexCoord1hNV(s) glatter_glTexCoord1hNV((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1hNV, (GLhalfNV s))
#define glTexCoord1hvNV(v) glatter_glTexCoord1hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1hvNV, (const GLhalfNV *v))
#define glTexCoord2hNV(s, t) glatter_glTexCoord2hNV((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2hNV, (GLhalfNV s, GLhalfNV t))
#define glTexCoord2hvNV(v) glatter_glTexCoord2hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2hvNV, (const GLhalfNV *v))
#define glTexCoord3hNV(s, t, r) glatter_glTexCoord3hNV((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r))
#define glTexCoord3hvNV(v) glatter_glTexCoord3hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3hvNV, (const GLhalfNV *v))
#define glTexCoord4hNV(s, t, r, q) glatter_glTexCoord4hNV((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q))
#define glTexCoord4hvNV(v) glatter_glTexCoord4hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4hvNV, (const GLhalfNV *v))
#define glVertex2hNV(x, y) glatter_glVertex2hNV((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2hNV, (GLhalfNV x, GLhalfNV y))
#define glVertex2hvNV(v) glatter_glVertex2hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2hvNV, (const GLhalfNV *v))
#define glVertex3hNV(x, y, z) glatter_glVertex3hNV((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z))
#define glVertex3hvNV(v) glatter_glVertex3hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3hvNV, (const GLhalfNV *v))
#define glVertex4hNV(x, y, z, w) glatter_glVertex4hNV((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w))
#define glVertex4hvNV(v) glatter_glVertex4hvNV((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4hvNV, (const GLhalfNV *v))
#define glVertexAttrib1hNV(index, x) glatter_glVertexAttrib1hNV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1hNV, (GLuint index, GLhalfNV x))
#define glVertexAttrib1hvNV(index, v) glatter_glVertexAttrib1hvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttrib2hNV(index, x, y) glatter_glVertexAttrib2hNV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2hNV, (GLuint index, GLhalfNV x, GLhalfNV y))
#define glVertexAttrib2hvNV(index, v) glatter_glVertexAttrib2hvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttrib3hNV(index, x, y, z) glatter_glVertexAttrib3hNV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z))
#define glVertexAttrib3hvNV(index, v) glatter_glVertexAttrib3hvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttrib4hNV(index, x, y, z, w) glatter_glVertexAttrib4hNV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w))
#define glVertexAttrib4hvNV(index, v) glatter_glVertexAttrib4hvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttribs1hvNV(index, n, v) glatter_glVertexAttribs1hvNV((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexAttribs2hvNV(index, n, v) glatter_glVertexAttribs2hvNV((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexAttribs3hvNV(index, n, v) glatter_glVertexAttribs3hvNV((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexAttribs4hvNV(index, n, v) glatter_glVertexAttribs4hvNV((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexWeighthNV(weight) glatter_glVertexWeighthNV((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeighthNV, (GLhalfNV weight))
#define glVertexWeighthvNV(weight) glatter_glVertexWeighthvNV((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeighthvNV, (const GLhalfNV *weight))
#endif // defined(GL_NV_half_float)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV((target), (internalformat), (samples), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params))
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_occlusion_query)
#define glBeginOcclusionQueryNV(id) glatter_glBeginOcclusionQueryNV((id))
GLATTER_UBLOCK(void, APIENTRY, glBeginOcclusionQueryNV, (GLuint id))
#define glDeleteOcclusionQueriesNV(n, ids) glatter_glDeleteOcclusionQueriesNV((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteOcclusionQueriesNV, (GLsizei n, const GLuint *ids))
#define glEndOcclusionQueryNV() glatter_glEndOcclusionQueryNV()
GLATTER_UBLOCK(void, APIENTRY, glEndOcclusionQueryNV, (void))
#define glGenOcclusionQueriesNV(n, ids) glatter_glGenOcclusionQueriesNV((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenOcclusionQueriesNV, (GLsizei n, GLuint *ids))
#define glGetOcclusionQueryivNV(id, pname, params) glatter_glGetOcclusionQueryivNV((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetOcclusionQueryivNV, (GLuint id, GLenum pname, GLint *params))
#define glGetOcclusionQueryuivNV(id, pname, params) glatter_glGetOcclusionQueryuivNV((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetOcclusionQueryuivNV, (GLuint id, GLenum pname, GLuint *params))
#define glIsOcclusionQueryNV(id) glatter_glIsOcclusionQueryNV((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsOcclusionQueryNV, (GLuint id))
#endif // defined(GL_NV_occlusion_query)
#if defined(GL_NV_parameter_buffer_object)
#define glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIivNV((target), (bindingIndex), (wordIndex), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersIivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params))
#define glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIuivNV((target), (bindingIndex), (wordIndex), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersIuivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params))
#define glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersfvNV((target), (bindingIndex), (wordIndex), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersfvNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params))
#endif // defined(GL_NV_parameter_buffer_object)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV((resultPath), (srcPath))
GLATTER_UBLOCK(void, APIENTRY, glCopyPathNV, (GLuint resultPath, GLuint srcPath))
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathNV, (GLuint path, GLenum coverMode))
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathNV, (GLuint path, GLenum coverMode))
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV((path), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeletePathsNV, (GLuint path, GLsizei range))
#define glGenPathsNV(range) glatter_glGenPathsNV((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenPathsNV, (GLsizei range))
#define glGetPathColorGenfvNV(color, pname, value) glatter_glGetPathColorGenfvNV((color), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathColorGenfvNV, (GLenum color, GLenum pname, GLfloat *value))
#define glGetPathColorGenivNV(color, pname, value) glatter_glGetPathColorGenivNV((color), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathColorGenivNV, (GLenum color, GLenum pname, GLint *value))
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV((path), (commands))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCommandsNV, (GLuint path, GLubyte *commands))
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV((path), (coords))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCoordsNV, (GLuint path, GLfloat *coords))
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV((path), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glGetPathDashArrayNV, (GLuint path, GLfloat *dashArray))
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV((path), (startSegment), (numSegments))
GLATTER_UBLOCK(GLfloat, APIENTRY, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments))
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics))
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics))
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat *value))
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint *value))
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing))
GLATTER_UBLOCK(void, APIENTRY, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing))
#define glGetPathTexGenfvNV(texCoordSet, pname, value) glatter_glGetPathTexGenfvNV((texCoordSet), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathTexGenfvNV, (GLenum texCoordSet, GLenum pname, GLfloat *value))
#define glGetPathTexGenivNV(texCoordSet, pname, value) glatter_glGetPathTexGenivNV((texCoordSet), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathTexGenivNV, (GLenum texCoordSet, GLenum pname, GLint *value))
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params))
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV((resultPath), (pathA), (pathB), (weight))
GLATTER_UBLOCK(void, APIENTRY, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight))
#define glIsPathNV(path) glatter_glIsPathNV((path))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPathNV, (GLuint path))
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV((path), (mask), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y))
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV((path), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y))
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glPathColorGenNV(color, genMode, colorFormat, coeffs) glatter_glPathColorGenNV((color), (genMode), (colorFormat), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glPathColorGenNV, (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs))
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV((path), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV((path), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV((func))
GLATTER_UBLOCK(void, APIENTRY, glPathCoverDepthFuncNV, (GLenum func))
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV((path), (dashCount), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat *dashArray))
#define glPathFogGenNV(genMode) glatter_glPathFogGenNV((genMode))
GLATTER_UBLOCK(void, APIENTRY, glPathFogGenNV, (GLenum genMode))
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]))
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value))
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat *value))
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameteriNV, (GLuint path, GLenum pname, GLint value))
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterivNV, (GLuint path, GLenum pname, const GLint *value))
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units))
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask))
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV((path), (format), (length), (pathString))
GLATTER_UBLOCK(void, APIENTRY, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void *pathString))
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV((path), (coordStart), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathTexGenNV(texCoordSet, genMode, components, coeffs) glatter_glPathTexGenNV((texCoordSet), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glPathTexGenNV, (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY))
GLATTER_UBLOCK(GLboolean, APIENTRY, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY))
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV((program), (location), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV((path), (fillMode), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask))
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV((path), (reference), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask))
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV((path), (fillMode), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode))
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV((path), (reference), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode))
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV((resultPath), (srcPath), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues))
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV((resultPath), (numPaths), (paths), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights))
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_pixel_data_range)
#define glFlushPixelDataRangeNV(target) glatter_glFlushPixelDataRangeNV((target))
GLATTER_UBLOCK(void, APIENTRY, glFlushPixelDataRangeNV, (GLenum target))
#define glPixelDataRangeNV(target, length, pointer) glatter_glPixelDataRangeNV((target), (length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glPixelDataRangeNV, (GLenum target, GLsizei length, const void *pointer))
#endif // defined(GL_NV_pixel_data_range)
#if defined(GL_NV_point_sprite)
#define glPointParameteriNV(pname, param) glatter_glPointParameteriNV((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriNV, (GLenum pname, GLint param))
#define glPointParameterivNV(pname, params) glatter_glPointParameterivNV((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterivNV, (GLenum pname, const GLint *params))
#endif // defined(GL_NV_point_sprite)
#if defined(GL_NV_present_video)
#define glGetVideoi64vNV(video_slot, pname, params) glatter_glGetVideoi64vNV((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoi64vNV, (GLuint video_slot, GLenum pname, GLint64EXT *params))
#define glGetVideoivNV(video_slot, pname, params) glatter_glGetVideoivNV((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoivNV, (GLuint video_slot, GLenum pname, GLint *params))
#define glGetVideoui64vNV(video_slot, pname, params) glatter_glGetVideoui64vNV((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoui64vNV, (GLuint video_slot, GLenum pname, GLuint64EXT *params))
#define glGetVideouivNV(video_slot, pname, params) glatter_glGetVideouivNV((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideouivNV, (GLuint video_slot, GLenum pname, GLuint *params))
#define glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) glatter_glPresentFrameDualFillNV((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (target1), (fill1), (target2), (fill2), (target3), (fill3))
GLATTER_UBLOCK(void, APIENTRY, glPresentFrameDualFillNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3))
#define glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) glatter_glPresentFrameKeyedNV((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (key0), (target1), (fill1), (key1))
GLATTER_UBLOCK(void, APIENTRY, glPresentFrameKeyedNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1))
#endif // defined(GL_NV_present_video)
#if defined(GL_NV_primitive_restart)
#define glPrimitiveRestartIndexNV(index) glatter_glPrimitiveRestartIndexNV((index))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndexNV, (GLuint index))
#define glPrimitiveRestartNV() glatter_glPrimitiveRestartNV()
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartNV, (void))
#endif // defined(GL_NV_primitive_restart)
#if defined(GL_NV_query_resource)
#define glQueryResourceNV(queryType, tagId, bufSize, buffer) glatter_glQueryResourceNV((queryType), (tagId), (bufSize), (buffer))
GLATTER_UBLOCK(GLint, APIENTRY, glQueryResourceNV, (GLenum queryType, GLint tagId, GLuint bufSize, GLint *buffer))
#endif // defined(GL_NV_query_resource)
#if defined(GL_NV_query_resource_tag)
#define glDeleteQueryResourceTagNV(n, tagIds) glatter_glDeleteQueryResourceTagNV((n), (tagIds))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueryResourceTagNV, (GLsizei n, const GLint *tagIds))
#define glGenQueryResourceTagNV(n, tagIds) glatter_glGenQueryResourceTagNV((n), (tagIds))
GLATTER_UBLOCK(void, APIENTRY, glGenQueryResourceTagNV, (GLsizei n, GLint *tagIds))
#define glQueryResourceTagNV(tagId, tagString) glatter_glQueryResourceTagNV((tagId), (tagString))
GLATTER_UBLOCK(void, APIENTRY, glQueryResourceTagNV, (GLint tagId, const GLchar *tagString))
#endif // defined(GL_NV_query_resource_tag)
#if defined(GL_NV_register_combiners)
#define glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage) glatter_glCombinerInputNV((stage), (portion), (variable), (input), (mapping), (componentUsage))
GLATTER_UBLOCK(void, APIENTRY, glCombinerInputNV, (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage))
#define glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) glatter_glCombinerOutputNV((stage), (portion), (abOutput), (cdOutput), (sumOutput), (scale), (bias), (abDotProduct), (cdDotProduct), (muxSum))
GLATTER_UBLOCK(void, APIENTRY, glCombinerOutputNV, (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum))
#define glCombinerParameterfNV(pname, param) glatter_glCombinerParameterfNV((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterfNV, (GLenum pname, GLfloat param))
#define glCombinerParameterfvNV(pname, params) glatter_glCombinerParameterfvNV((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterfvNV, (GLenum pname, const GLfloat *params))
#define glCombinerParameteriNV(pname, param) glatter_glCombinerParameteriNV((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameteriNV, (GLenum pname, GLint param))
#define glCombinerParameterivNV(pname, params) glatter_glCombinerParameterivNV((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterivNV, (GLenum pname, const GLint *params))
#define glFinalCombinerInputNV(variable, input, mapping, componentUsage) glatter_glFinalCombinerInputNV((variable), (input), (mapping), (componentUsage))
GLATTER_UBLOCK(void, APIENTRY, glFinalCombinerInputNV, (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage))
#define glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterfvNV((stage), (portion), (variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerInputParameterfvNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params))
#define glGetCombinerInputParameterivNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterivNV((stage), (portion), (variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerInputParameterivNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params))
#define glGetCombinerOutputParameterfvNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterfvNV((stage), (portion), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerOutputParameterfvNV, (GLenum stage, GLenum portion, GLenum pname, GLfloat *params))
#define glGetCombinerOutputParameterivNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterivNV((stage), (portion), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerOutputParameterivNV, (GLenum stage, GLenum portion, GLenum pname, GLint *params))
#define glGetFinalCombinerInputParameterfvNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterfvNV((variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFinalCombinerInputParameterfvNV, (GLenum variable, GLenum pname, GLfloat *params))
#define glGetFinalCombinerInputParameterivNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterivNV((variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFinalCombinerInputParameterivNV, (GLenum variable, GLenum pname, GLint *params))
#endif // defined(GL_NV_register_combiners)
#if defined(GL_NV_register_combiners2)
#define glCombinerStageParameterfvNV(stage, pname, params) glatter_glCombinerStageParameterfvNV((stage), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCombinerStageParameterfvNV, (GLenum stage, GLenum pname, const GLfloat *params))
#define glGetCombinerStageParameterfvNV(stage, pname, params) glatter_glGetCombinerStageParameterfvNV((stage), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerStageParameterfvNV, (GLenum stage, GLenum pname, GLfloat *params))
#endif // defined(GL_NV_register_combiners2)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV((target), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV()
GLATTER_UBLOCK(void, APIENTRY, glResolveDepthValuesNV, (void))
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_shader_buffer_load)
#define glGetBufferParameterui64vNV(target, pname, params) glatter_glGetBufferParameterui64vNV((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameterui64vNV, (GLenum target, GLenum pname, GLuint64EXT *params))
#define glGetIntegerui64vNV(value, result) glatter_glGetIntegerui64vNV((value), (result))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64vNV, (GLenum value, GLuint64EXT *result))
#define glGetNamedBufferParameterui64vNV(buffer, pname, params) glatter_glGetNamedBufferParameterui64vNV((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterui64vNV, (GLuint buffer, GLenum pname, GLuint64EXT *params))
#define glIsBufferResidentNV(target) glatter_glIsBufferResidentNV((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBufferResidentNV, (GLenum target))
#define glIsNamedBufferResidentNV(buffer) glatter_glIsNamedBufferResidentNV((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedBufferResidentNV, (GLuint buffer))
#define glMakeBufferNonResidentNV(target) glatter_glMakeBufferNonResidentNV((target))
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferNonResidentNV, (GLenum target))
#define glMakeBufferResidentNV(target, access) glatter_glMakeBufferResidentNV((target), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferResidentNV, (GLenum target, GLenum access))
#define glMakeNamedBufferNonResidentNV(buffer) glatter_glMakeNamedBufferNonResidentNV((buffer))
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferNonResidentNV, (GLuint buffer))
#define glMakeNamedBufferResidentNV(buffer, access) glatter_glMakeNamedBufferResidentNV((buffer), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferResidentNV, (GLuint buffer, GLenum access))
#define glProgramUniformui64NV(program, location, value) glatter_glProgramUniformui64NV((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64NV, (GLuint program, GLint location, GLuint64EXT value))
#define glProgramUniformui64vNV(program, location, count, value) glatter_glProgramUniformui64vNV((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniformui64NV(location, value) glatter_glUniformui64NV((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformui64NV, (GLint location, GLuint64EXT value))
#define glUniformui64vNV(location, count, value) glatter_glUniformui64vNV((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_shader_buffer_load)
#if defined(GL_NV_texture_barrier)
#define glTextureBarrierNV() glatter_glTextureBarrierNV()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrierNV, (void))
#endif // defined(GL_NV_texture_barrier)
#if defined(GL_NV_texture_multisample)
#define glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTexImage2DMultisampleCoverageNV((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#define glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTexImage3DMultisampleCoverageNV((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#define glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleCoverageNV((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#define glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleNV((texture), (target), (samples), (internalFormat), (width), (height), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#define glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleCoverageNV((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#define glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleNV((texture), (target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#endif // defined(GL_NV_texture_multisample)
#if defined(GL_NV_transform_feedback)
#define glActiveVaryingNV(program, name) glatter_glActiveVaryingNV((program), (name))
GLATTER_UBLOCK(void, APIENTRY, glActiveVaryingNV, (GLuint program, const GLchar *name))
#define glBeginTransformFeedbackNV(primitiveMode) glatter_glBeginTransformFeedbackNV((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedbackNV, (GLenum primitiveMode))
#define glBindBufferBaseNV(target, index, buffer) glatter_glBindBufferBaseNV((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBaseNV, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferOffsetNV(target, index, buffer, offset) glatter_glBindBufferOffsetNV((target), (index), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferOffsetNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset))
#define glBindBufferRangeNV(target, index, buffer, offset, size) glatter_glBindBufferRangeNV((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRangeNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glEndTransformFeedbackNV() glatter_glEndTransformFeedbackNV()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedbackNV, (void))
#define glGetActiveVaryingNV(program, index, bufSize, length, size, type, name) glatter_glGetActiveVaryingNV((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveVaryingNV, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetTransformFeedbackVaryingNV(program, index, location) glatter_glGetTransformFeedbackVaryingNV((program), (index), (location))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVaryingNV, (GLuint program, GLuint index, GLint *location))
#define glGetVaryingLocationNV(program, name) glatter_glGetVaryingLocationNV((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetVaryingLocationNV, (GLuint program, const GLchar *name))
#define glTransformFeedbackAttribsNV(count, attribs, bufferMode) glatter_glTransformFeedbackAttribsNV((count), (attribs), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackAttribsNV, (GLsizei count, const GLint *attribs, GLenum bufferMode))
#define glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) glatter_glTransformFeedbackStreamAttribsNV((count), (attribs), (nbuffers), (bufstreams), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackStreamAttribsNV, (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode))
#define glTransformFeedbackVaryingsNV(program, count, locations, bufferMode) glatter_glTransformFeedbackVaryingsNV((program), (count), (locations), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryingsNV, (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode))
#endif // defined(GL_NV_transform_feedback)
#if defined(GL_NV_transform_feedback2)
#define glBindTransformFeedbackNV(target, id) glatter_glBindTransformFeedbackNV((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedbackNV, (GLenum target, GLuint id))
#define glDeleteTransformFeedbacksNV(n, ids) glatter_glDeleteTransformFeedbacksNV((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacksNV, (GLsizei n, const GLuint *ids))
#define glDrawTransformFeedbackNV(mode, id) glatter_glDrawTransformFeedbackNV((mode), (id))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackNV, (GLenum mode, GLuint id))
#define glGenTransformFeedbacksNV(n, ids) glatter_glGenTransformFeedbacksNV((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacksNV, (GLsizei n, GLuint *ids))
#define glIsTransformFeedbackNV(id) glatter_glIsTransformFeedbackNV((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedbackNV, (GLuint id))
#define glPauseTransformFeedbackNV() glatter_glPauseTransformFeedbackNV()
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedbackNV, (void))
#define glResumeTransformFeedbackNV() glatter_glResumeTransformFeedbackNV()
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedbackNV, (void))
#endif // defined(GL_NV_transform_feedback2)
#if defined(GL_NV_vdpau_interop)
#define glVDPAUFiniNV() glatter_glVDPAUFiniNV()
GLATTER_UBLOCK(void, APIENTRY, glVDPAUFiniNV, (void))
#define glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values) glatter_glVDPAUGetSurfaceivNV((surface), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUGetSurfaceivNV, (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glVDPAUInitNV(vdpDevice, getProcAddress) glatter_glVDPAUInitNV((vdpDevice), (getProcAddress))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUInitNV, (const void *vdpDevice, const void *getProcAddress))
#define glVDPAUIsSurfaceNV(surface) glatter_glVDPAUIsSurfaceNV((surface))
GLATTER_UBLOCK(GLboolean, APIENTRY, glVDPAUIsSurfaceNV, (GLvdpauSurfaceNV surface))
#define glVDPAUMapSurfacesNV(numSurfaces, surfaces) glatter_glVDPAUMapSurfacesNV((numSurfaces), (surfaces))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUMapSurfacesNV, (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces))
#define glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterOutputSurfaceNV((vdpSurface), (target), (numTextureNames), (textureNames))
GLATTER_UBLOCK(GLvdpauSurfaceNV, APIENTRY, glVDPAURegisterOutputSurfaceNV, (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames))
#define glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterVideoSurfaceNV((vdpSurface), (target), (numTextureNames), (textureNames))
GLATTER_UBLOCK(GLvdpauSurfaceNV, APIENTRY, glVDPAURegisterVideoSurfaceNV, (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames))
#define glVDPAUSurfaceAccessNV(surface, access) glatter_glVDPAUSurfaceAccessNV((surface), (access))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUSurfaceAccessNV, (GLvdpauSurfaceNV surface, GLenum access))
#define glVDPAUUnmapSurfacesNV(numSurface, surfaces) glatter_glVDPAUUnmapSurfacesNV((numSurface), (surfaces))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUUnmapSurfacesNV, (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces))
#define glVDPAUUnregisterSurfaceNV(surface) glatter_glVDPAUUnregisterSurfaceNV((surface))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUUnregisterSurfaceNV, (GLvdpauSurfaceNV surface))
#endif // defined(GL_NV_vdpau_interop)
#if defined(GL_NV_vertex_array_range)
#define glFlushVertexArrayRangeNV() glatter_glFlushVertexArrayRangeNV()
GLATTER_UBLOCK(void, APIENTRY, glFlushVertexArrayRangeNV, (void))
#define glVertexArrayRangeNV(length, pointer) glatter_glVertexArrayRangeNV((length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayRangeNV, (GLsizei length, const void *pointer))
#endif // defined(GL_NV_vertex_array_range)
#if defined(GL_NV_vertex_attrib_integer_64bit)
#define glGetVertexAttribLi64vNV(index, pname, params) glatter_glGetVertexAttribLi64vNV((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLi64vNV, (GLuint index, GLenum pname, GLint64EXT *params))
#define glGetVertexAttribLui64vNV(index, pname, params) glatter_glGetVertexAttribLui64vNV((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vNV, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glVertexAttribL1i64NV(index, x) glatter_glVertexAttribL1i64NV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64NV, (GLuint index, GLint64EXT x))
#define glVertexAttribL1i64vNV(index, v) glatter_glVertexAttribL1i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL1ui64NV(index, x) glatter_glVertexAttribL1ui64NV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64NV, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vNV(index, v) glatter_glVertexAttribL1ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL2i64NV(index, x, y) glatter_glVertexAttribL2i64NV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64NV, (GLuint index, GLint64EXT x, GLint64EXT y))
#define glVertexAttribL2i64vNV(index, v) glatter_glVertexAttribL2i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL2ui64NV(index, x, y) glatter_glVertexAttribL2ui64NV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y))
#define glVertexAttribL2ui64vNV(index, v) glatter_glVertexAttribL2ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL3i64NV(index, x, y, z) glatter_glVertexAttribL3i64NV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glVertexAttribL3i64vNV(index, v) glatter_glVertexAttribL3i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL3ui64NV(index, x, y, z) glatter_glVertexAttribL3ui64NV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glVertexAttribL3ui64vNV(index, v) glatter_glVertexAttribL3ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL4i64NV(index, x, y, z, w) glatter_glVertexAttribL4i64NV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glVertexAttribL4i64vNV(index, v) glatter_glVertexAttribL4i64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL4ui64NV(index, x, y, z, w) glatter_glVertexAttribL4ui64NV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glVertexAttribL4ui64vNV(index, v) glatter_glVertexAttribL4ui64vNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribLFormatNV(index, size, type, stride) glatter_glVertexAttribLFormatNV((index), (size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_attrib_integer_64bit)
#if defined(GL_NV_vertex_buffer_unified_memory)
#define glBufferAddressRangeNV(pname, index, address, length) glatter_glBufferAddressRangeNV((pname), (index), (address), (length))
GLATTER_UBLOCK(void, APIENTRY, glBufferAddressRangeNV, (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length))
#define glColorFormatNV(size, type, stride) glatter_glColorFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glEdgeFlagFormatNV(stride) glatter_glEdgeFlagFormatNV((stride))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagFormatNV, (GLsizei stride))
#define glFogCoordFormatNV(type, stride) glatter_glFogCoordFormatNV((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordFormatNV, (GLenum type, GLsizei stride))
#define glGetIntegerui64i_vNV(value, index, result) glatter_glGetIntegerui64i_vNV((value), (index), (result))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64i_vNV, (GLenum value, GLuint index, GLuint64EXT *result))
#define glIndexFormatNV(type, stride) glatter_glIndexFormatNV((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glIndexFormatNV, (GLenum type, GLsizei stride))
#define glNormalFormatNV(type, stride) glatter_glNormalFormatNV((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glNormalFormatNV, (GLenum type, GLsizei stride))
#define glSecondaryColorFormatNV(size, type, stride) glatter_glSecondaryColorFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glTexCoordFormatNV(size, type, stride) glatter_glTexCoordFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glVertexAttribFormatNV(index, size, type, normalized, stride) glatter_glVertexAttribFormatNV((index), (size), (type), (normalized), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormatNV, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride))
#define glVertexAttribIFormatNV(index, size, type, stride) glatter_glVertexAttribIFormatNV((index), (size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#define glVertexFormatNV(size, type, stride) glatter_glVertexFormatNV((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexFormatNV, (GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_buffer_unified_memory)
#if defined(GL_NV_vertex_program)
#define glAreProgramsResidentNV(n, programs, residences) glatter_glAreProgramsResidentNV((n), (programs), (residences))
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreProgramsResidentNV, (GLsizei n, const GLuint *programs, GLboolean *residences))
#define glBindProgramNV(target, id) glatter_glBindProgramNV((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramNV, (GLenum target, GLuint id))
#define glDeleteProgramsNV(n, programs) glatter_glDeleteProgramsNV((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramsNV, (GLsizei n, const GLuint *programs))
#define glExecuteProgramNV(target, id, params) glatter_glExecuteProgramNV((target), (id), (params))
GLATTER_UBLOCK(void, APIENTRY, glExecuteProgramNV, (GLenum target, GLuint id, const GLfloat *params))
#define glGenProgramsNV(n, programs) glatter_glGenProgramsNV((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramsNV, (GLsizei n, GLuint *programs))
#define glGetProgramParameterdvNV(target, index, pname, params) glatter_glGetProgramParameterdvNV((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramParameterdvNV, (GLenum target, GLuint index, GLenum pname, GLdouble *params))
#define glGetProgramParameterfvNV(target, index, pname, params) glatter_glGetProgramParameterfvNV((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat *params))
#define glGetProgramStringNV(id, pname, program) glatter_glGetProgramStringNV((id), (pname), (program))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStringNV, (GLuint id, GLenum pname, GLubyte *program))
#define glGetProgramivNV(id, pname, params) glatter_glGetProgramivNV((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramivNV, (GLuint id, GLenum pname, GLint *params))
#define glGetTrackMatrixivNV(target, address, pname, params) glatter_glGetTrackMatrixivNV((target), (address), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTrackMatrixivNV, (GLenum target, GLuint address, GLenum pname, GLint *params))
#define glGetVertexAttribPointervNV(index, pname, pointer) glatter_glGetVertexAttribPointervNV((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointervNV, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdvNV(index, pname, params) glatter_glGetVertexAttribdvNV((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdvNV, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfvNV(index, pname, params) glatter_glGetVertexAttribfvNV((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfvNV, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribivNV(index, pname, params) glatter_glGetVertexAttribivNV((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribivNV, (GLuint index, GLenum pname, GLint *params))
#define glIsProgramNV(id) glatter_glIsProgramNV((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramNV, (GLuint id))
#define glLoadProgramNV(target, id, len, program) glatter_glLoadProgramNV((target), (id), (len), (program))
GLATTER_UBLOCK(void, APIENTRY, glLoadProgramNV, (GLenum target, GLuint id, GLsizei len, const GLubyte *program))
#define glProgramParameter4dNV(target, index, x, y, z, w) glatter_glProgramParameter4dNV((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4dNV, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramParameter4dvNV(target, index, v) glatter_glProgramParameter4dvNV((target), (index), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4dvNV, (GLenum target, GLuint index, const GLdouble *v))
#define glProgramParameter4fNV(target, index, x, y, z, w) glatter_glProgramParameter4fNV((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4fNV, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramParameter4fvNV(target, index, v) glatter_glProgramParameter4fvNV((target), (index), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4fvNV, (GLenum target, GLuint index, const GLfloat *v))
#define glProgramParameters4dvNV(target, index, count, v) glatter_glProgramParameters4dvNV((target), (index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameters4dvNV, (GLenum target, GLuint index, GLsizei count, const GLdouble *v))
#define glProgramParameters4fvNV(target, index, count, v) glatter_glProgramParameters4fvNV((target), (index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameters4fvNV, (GLenum target, GLuint index, GLsizei count, const GLfloat *v))
#define glRequestResidentProgramsNV(n, programs) glatter_glRequestResidentProgramsNV((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glRequestResidentProgramsNV, (GLsizei n, const GLuint *programs))
#define glTrackMatrixNV(target, address, matrix, transform) glatter_glTrackMatrixNV((target), (address), (matrix), (transform))
GLATTER_UBLOCK(void, APIENTRY, glTrackMatrixNV, (GLenum target, GLuint address, GLenum matrix, GLenum transform))
#define glVertexAttrib1dNV(index, x) glatter_glVertexAttrib1dNV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dNV, (GLuint index, GLdouble x))
#define glVertexAttrib1dvNV(index, v) glatter_glVertexAttrib1dvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib1fNV(index, x) glatter_glVertexAttrib1fNV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fNV, (GLuint index, GLfloat x))
#define glVertexAttrib1fvNV(index, v) glatter_glVertexAttrib1fvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib1sNV(index, x) glatter_glVertexAttrib1sNV((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sNV, (GLuint index, GLshort x))
#define glVertexAttrib1svNV(index, v) glatter_glVertexAttrib1svNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib2dNV(index, x, y) glatter_glVertexAttrib2dNV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dNV, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dvNV(index, v) glatter_glVertexAttrib2dvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib2fNV(index, x, y) glatter_glVertexAttrib2fNV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fNV, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fvNV(index, v) glatter_glVertexAttrib2fvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib2sNV(index, x, y) glatter_glVertexAttrib2sNV((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sNV, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2svNV(index, v) glatter_glVertexAttrib2svNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib3dNV(index, x, y, z) glatter_glVertexAttrib3dNV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dvNV(index, v) glatter_glVertexAttrib3dvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib3fNV(index, x, y, z) glatter_glVertexAttrib3fNV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fvNV(index, v) glatter_glVertexAttrib3fvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib3sNV(index, x, y, z) glatter_glVertexAttrib3sNV((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sNV, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3svNV(index, v) glatter_glVertexAttrib3svNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib4dNV(index, x, y, z, w) glatter_glVertexAttrib4dNV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dvNV(index, v) glatter_glVertexAttrib4dvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib4fNV(index, x, y, z, w) glatter_glVertexAttrib4fNV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fvNV(index, v) glatter_glVertexAttrib4fvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib4sNV(index, x, y, z, w) glatter_glVertexAttrib4sNV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sNV, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4svNV(index, v) glatter_glVertexAttrib4svNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubNV(index, x, y, z, w) glatter_glVertexAttrib4ubNV((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubNV, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4ubvNV(index, v) glatter_glVertexAttrib4ubvNV((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubvNV, (GLuint index, const GLubyte *v))
#define glVertexAttribPointerNV(index, fsize, type, stride, pointer) glatter_glVertexAttribPointerNV((index), (fsize), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointerNV, (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer))
#define glVertexAttribs1dvNV(index, count, v) glatter_glVertexAttribs1dvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs1fvNV(index, count, v) glatter_glVertexAttribs1fvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs1svNV(index, count, v) glatter_glVertexAttribs1svNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs2dvNV(index, count, v) glatter_glVertexAttribs2dvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs2fvNV(index, count, v) glatter_glVertexAttribs2fvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs2svNV(index, count, v) glatter_glVertexAttribs2svNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs3dvNV(index, count, v) glatter_glVertexAttribs3dvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs3fvNV(index, count, v) glatter_glVertexAttribs3fvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs3svNV(index, count, v) glatter_glVertexAttribs3svNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs4dvNV(index, count, v) glatter_glVertexAttribs4dvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs4fvNV(index, count, v) glatter_glVertexAttribs4fvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs4svNV(index, count, v) glatter_glVertexAttribs4svNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs4ubvNV(index, count, v) glatter_glVertexAttribs4ubvNV((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4ubvNV, (GLuint index, GLsizei count, const GLubyte *v))
#endif // defined(GL_NV_vertex_program)
#if defined(GL_NV_vertex_program4)
#define glGetVertexAttribIivEXT(index, pname, params) glatter_glGetVertexAttribIivEXT((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIivEXT, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuivEXT(index, pname, params) glatter_glGetVertexAttribIuivEXT((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuivEXT, (GLuint index, GLenum pname, GLuint *params))
#define glVertexAttribI1iEXT(index, x) glatter_glVertexAttribI1iEXT((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iEXT, (GLuint index, GLint x))
#define glVertexAttribI1ivEXT(index, v) glatter_glVertexAttribI1ivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI1uiEXT(index, x) glatter_glVertexAttribI1uiEXT((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiEXT, (GLuint index, GLuint x))
#define glVertexAttribI1uivEXT(index, v) glatter_glVertexAttribI1uivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI2iEXT(index, x, y) glatter_glVertexAttribI2iEXT((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iEXT, (GLuint index, GLint x, GLint y))
#define glVertexAttribI2ivEXT(index, v) glatter_glVertexAttribI2ivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI2uiEXT(index, x, y) glatter_glVertexAttribI2uiEXT((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiEXT, (GLuint index, GLuint x, GLuint y))
#define glVertexAttribI2uivEXT(index, v) glatter_glVertexAttribI2uivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI3iEXT(index, x, y, z) glatter_glVertexAttribI3iEXT((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iEXT, (GLuint index, GLint x, GLint y, GLint z))
#define glVertexAttribI3ivEXT(index, v) glatter_glVertexAttribI3ivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI3uiEXT(index, x, y, z) glatter_glVertexAttribI3uiEXT((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z))
#define glVertexAttribI3uivEXT(index, v) glatter_glVertexAttribI3uivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI4bvEXT(index, v) glatter_glVertexAttribI4bvEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bvEXT, (GLuint index, const GLbyte *v))
#define glVertexAttribI4iEXT(index, x, y, z, w) glatter_glVertexAttribI4iEXT((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iEXT, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4ivEXT(index, v) glatter_glVertexAttribI4ivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI4svEXT(index, v) glatter_glVertexAttribI4svEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4svEXT, (GLuint index, const GLshort *v))
#define glVertexAttribI4ubvEXT(index, v) glatter_glVertexAttribI4ubvEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubvEXT, (GLuint index, const GLubyte *v))
#define glVertexAttribI4uiEXT(index, x, y, z, w) glatter_glVertexAttribI4uiEXT((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uivEXT(index, v) glatter_glVertexAttribI4uivEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI4usvEXT(index, v) glatter_glVertexAttribI4usvEXT((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usvEXT, (GLuint index, const GLushort *v))
#define glVertexAttribIPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribIPointerEXT((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_NV_vertex_program4)
#if defined(GL_NV_video_capture)
#define glBeginVideoCaptureNV(video_capture_slot) glatter_glBeginVideoCaptureNV((video_capture_slot))
GLATTER_UBLOCK(void, APIENTRY, glBeginVideoCaptureNV, (GLuint video_capture_slot))
#define glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) glatter_glBindVideoCaptureStreamBufferNV((video_capture_slot), (stream), (frame_region), (offset))
GLATTER_UBLOCK(void, APIENTRY, glBindVideoCaptureStreamBufferNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset))
#define glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) glatter_glBindVideoCaptureStreamTextureNV((video_capture_slot), (stream), (frame_region), (target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindVideoCaptureStreamTextureNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture))
#define glEndVideoCaptureNV(video_capture_slot) glatter_glEndVideoCaptureNV((video_capture_slot))
GLATTER_UBLOCK(void, APIENTRY, glEndVideoCaptureNV, (GLuint video_capture_slot))
#define glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamdvNV((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params))
#define glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamfvNV((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params))
#define glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamivNV((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params))
#define glGetVideoCaptureivNV(video_capture_slot, pname, params) glatter_glGetVideoCaptureivNV((video_capture_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureivNV, (GLuint video_capture_slot, GLenum pname, GLint *params))
#define glVideoCaptureNV(video_capture_slot, sequence_num, capture_time) glatter_glVideoCaptureNV((video_capture_slot), (sequence_num), (capture_time))
GLATTER_UBLOCK(GLenum, APIENTRY, glVideoCaptureNV, (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time))
#define glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterdvNV((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params))
#define glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterfvNV((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params))
#define glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterivNV((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params))
#endif // defined(GL_NV_video_capture)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV((index), (swizzlex), (swizzley), (swizzlez), (swizzlew))
GLATTER_UBLOCK(void, APIENTRY, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew))
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_byte_coordinates)
#define glMultiTexCoord1bOES(texture, s) glatter_glMultiTexCoord1bOES((texture), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1bOES, (GLenum texture, GLbyte s))
#define glMultiTexCoord1bvOES(texture, coords) glatter_glMultiTexCoord1bvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1bvOES, (GLenum texture, const GLbyte *coords))
#define glMultiTexCoord2bOES(texture, s, t) glatter_glMultiTexCoord2bOES((texture), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2bOES, (GLenum texture, GLbyte s, GLbyte t))
#define glMultiTexCoord2bvOES(texture, coords) glatter_glMultiTexCoord2bvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2bvOES, (GLenum texture, const GLbyte *coords))
#define glMultiTexCoord3bOES(texture, s, t, r) glatter_glMultiTexCoord3bOES((texture), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r))
#define glMultiTexCoord3bvOES(texture, coords) glatter_glMultiTexCoord3bvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3bvOES, (GLenum texture, const GLbyte *coords))
#define glMultiTexCoord4bOES(texture, s, t, r, q) glatter_glMultiTexCoord4bOES((texture), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q))
#define glMultiTexCoord4bvOES(texture, coords) glatter_glMultiTexCoord4bvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4bvOES, (GLenum texture, const GLbyte *coords))
#define glTexCoord1bOES(s) glatter_glTexCoord1bOES((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1bOES, (GLbyte s))
#define glTexCoord1bvOES(coords) glatter_glTexCoord1bvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1bvOES, (const GLbyte *coords))
#define glTexCoord2bOES(s, t) glatter_glTexCoord2bOES((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2bOES, (GLbyte s, GLbyte t))
#define glTexCoord2bvOES(coords) glatter_glTexCoord2bvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2bvOES, (const GLbyte *coords))
#define glTexCoord3bOES(s, t, r) glatter_glTexCoord3bOES((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3bOES, (GLbyte s, GLbyte t, GLbyte r))
#define glTexCoord3bvOES(coords) glatter_glTexCoord3bvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3bvOES, (const GLbyte *coords))
#define glTexCoord4bOES(s, t, r, q) glatter_glTexCoord4bOES((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4bOES, (GLbyte s, GLbyte t, GLbyte r, GLbyte q))
#define glTexCoord4bvOES(coords) glatter_glTexCoord4bvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4bvOES, (const GLbyte *coords))
#define glVertex2bOES(x, y) glatter_glVertex2bOES((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2bOES, (GLbyte x, GLbyte y))
#define glVertex2bvOES(coords) glatter_glVertex2bvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex2bvOES, (const GLbyte *coords))
#define glVertex3bOES(x, y, z) glatter_glVertex3bOES((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3bOES, (GLbyte x, GLbyte y, GLbyte z))
#define glVertex3bvOES(coords) glatter_glVertex3bvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex3bvOES, (const GLbyte *coords))
#define glVertex4bOES(x, y, z, w) glatter_glVertex4bOES((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4bOES, (GLbyte x, GLbyte y, GLbyte z, GLbyte w))
#define glVertex4bvOES(coords) glatter_glVertex4bvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex4bvOES, (const GLbyte *coords))
#endif // defined(GL_OES_byte_coordinates)
#if defined(GL_OES_fixed_point)
#define glAccumxOES(op, value) glatter_glAccumxOES((op), (value))
GLATTER_UBLOCK(void, APIENTRY, glAccumxOES, (GLenum op, GLfixed value))
#define glAlphaFuncxOES(func, ref) glatter_glAlphaFuncxOES((func), (ref))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFuncxOES, (GLenum func, GLfixed ref))
#define glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmapxOES((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap))
GLATTER_UBLOCK(void, APIENTRY, glBitmapxOES, (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap))
#define glBlendColorxOES(red, green, blue, alpha) glatter_glBlendColorxOES((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearAccumxOES(red, green, blue, alpha) glatter_glClearAccumxOES((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearAccumxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearColorxOES(red, green, blue, alpha) glatter_glClearColorxOES((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearDepthxOES(depth) glatter_glClearDepthxOES((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthxOES, (GLfixed depth))
#define glClipPlanexOES(plane, equation) glatter_glClipPlanexOES((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glClipPlanexOES, (GLenum plane, const GLfixed *equation))
#define glColor3xOES(red, green, blue) glatter_glColor3xOES((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3xOES, (GLfixed red, GLfixed green, GLfixed blue))
#define glColor3xvOES(components) glatter_glColor3xvOES((components))
GLATTER_UBLOCK(void, APIENTRY, glColor3xvOES, (const GLfixed *components))
#define glColor4xOES(red, green, blue, alpha) glatter_glColor4xOES((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4xOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glColor4xvOES(components) glatter_glColor4xvOES((components))
GLATTER_UBLOCK(void, APIENTRY, glColor4xvOES, (const GLfixed *components))
#define glConvolutionParameterxOES(target, pname, param) glatter_glConvolutionParameterxOES((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterxOES, (GLenum target, GLenum pname, GLfixed param))
#define glConvolutionParameterxvOES(target, pname, params) glatter_glConvolutionParameterxvOES((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#define glDepthRangexOES(n, f) glatter_glDepthRangexOES((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangexOES, (GLfixed n, GLfixed f))
#define glEvalCoord1xOES(u) glatter_glEvalCoord1xOES((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1xOES, (GLfixed u))
#define glEvalCoord1xvOES(coords) glatter_glEvalCoord1xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1xvOES, (const GLfixed *coords))
#define glEvalCoord2xOES(u, v) glatter_glEvalCoord2xOES((u), (v))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2xOES, (GLfixed u, GLfixed v))
#define glEvalCoord2xvOES(coords) glatter_glEvalCoord2xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2xvOES, (const GLfixed *coords))
#define glFeedbackBufferxOES(n, type, buffer) glatter_glFeedbackBufferxOES((n), (type), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glFeedbackBufferxOES, (GLsizei n, GLenum type, const GLfixed *buffer))
#define glFogxOES(pname, param) glatter_glFogxOES((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogxOES, (GLenum pname, GLfixed param))
#define glFogxvOES(pname, param) glatter_glFogxvOES((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogxvOES, (GLenum pname, const GLfixed *param))
#define glFrustumxOES(l, r, b, t, n, f) glatter_glFrustumxOES((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glFrustumxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glGetClipPlanexOES(plane, equation) glatter_glGetClipPlanexOES((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlanexOES, (GLenum plane, GLfixed *equation))
#define glGetConvolutionParameterxvOES(target, pname, params) glatter_glGetConvolutionParameterxvOES((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glGetFixedvOES(pname, params) glatter_glGetFixedvOES((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFixedvOES, (GLenum pname, GLfixed *params))
#define glGetHistogramParameterxvOES(target, pname, params) glatter_glGetHistogramParameterxvOES((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glGetLightxOES(light, pname, params) glatter_glGetLightxOES((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetLightxOES, (GLenum light, GLenum pname, GLfixed *params))
#define glGetMapxvOES(target, query, v) glatter_glGetMapxvOES((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapxvOES, (GLenum target, GLenum query, GLfixed *v))
#define glGetMaterialxOES(face, pname, param) glatter_glGetMaterialxOES((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetMaterialxOES, (GLenum face, GLenum pname, GLfixed param))
#define glGetPixelMapxv(map, size, values) glatter_glGetPixelMapxv((map), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapxv, (GLenum map, GLint size, GLfixed *values))
#define glGetTexEnvxvOES(target, pname, params) glatter_glGetTexEnvxvOES((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexEnvxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glGetTexGenxvOES(coord, pname, params) glatter_glGetTexGenxvOES((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGenxvOES, (GLenum coord, GLenum pname, GLfixed *params))
#define glGetTexLevelParameterxvOES(target, level, pname, params) glatter_glGetTexLevelParameterxvOES((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterxvOES, (GLenum target, GLint level, GLenum pname, GLfixed *params))
#define glGetTexParameterxvOES(target, pname, params) glatter_glGetTexParameterxvOES((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glIndexxOES(component) glatter_glIndexxOES((component))
GLATTER_UBLOCK(void, APIENTRY, glIndexxOES, (GLfixed component))
#define glIndexxvOES(component) glatter_glIndexxvOES((component))
GLATTER_UBLOCK(void, APIENTRY, glIndexxvOES, (const GLfixed *component))
#define glLightModelxOES(pname, param) glatter_glLightModelxOES((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModelxOES, (GLenum pname, GLfixed param))
#define glLightModelxvOES(pname, param) glatter_glLightModelxvOES((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModelxvOES, (GLenum pname, const GLfixed *param))
#define glLightxOES(light, pname, param) glatter_glLightxOES((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightxOES, (GLenum light, GLenum pname, GLfixed param))
#define glLightxvOES(light, pname, params) glatter_glLightxvOES((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightxvOES, (GLenum light, GLenum pname, const GLfixed *params))
#define glLineWidthxOES(width) glatter_glLineWidthxOES((width))
GLATTER_UBLOCK(void, APIENTRY, glLineWidthxOES, (GLfixed width))
#define glLoadMatrixxOES(m) glatter_glLoadMatrixxOES((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadMatrixxOES, (const GLfixed *m))
#define glLoadTransposeMatrixxOES(m) glatter_glLoadTransposeMatrixxOES((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixxOES, (const GLfixed *m))
#define glMap1xOES(target, u1, u2, stride, order, points) glatter_glMap1xOES((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap1xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points))
#define glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2xOES((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap2xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points))
#define glMapGrid1xOES(n, u1, u2) glatter_glMapGrid1xOES((n), (u1), (u2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid1xOES, (GLint n, GLfixed u1, GLfixed u2))
#define glMapGrid2xOES(n, u1, u2, v1, v2) glatter_glMapGrid2xOES((n), (u1), (u2), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid2xOES, (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2))
#define glMaterialxOES(face, pname, param) glatter_glMaterialxOES((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMaterialxOES, (GLenum face, GLenum pname, GLfixed param))
#define glMaterialxvOES(face, pname, param) glatter_glMaterialxvOES((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMaterialxvOES, (GLenum face, GLenum pname, const GLfixed *param))
#define glMultMatrixxOES(m) glatter_glMultMatrixxOES((m))
GLATTER_UBLOCK(void, APIENTRY, glMultMatrixxOES, (const GLfixed *m))
#define glMultTransposeMatrixxOES(m) glatter_glMultTransposeMatrixxOES((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixxOES, (const GLfixed *m))
#define glMultiTexCoord1xOES(texture, s) glatter_glMultiTexCoord1xOES((texture), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1xOES, (GLenum texture, GLfixed s))
#define glMultiTexCoord1xvOES(texture, coords) glatter_glMultiTexCoord1xvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1xvOES, (GLenum texture, const GLfixed *coords))
#define glMultiTexCoord2xOES(texture, s, t) glatter_glMultiTexCoord2xOES((texture), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2xOES, (GLenum texture, GLfixed s, GLfixed t))
#define glMultiTexCoord2xvOES(texture, coords) glatter_glMultiTexCoord2xvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2xvOES, (GLenum texture, const GLfixed *coords))
#define glMultiTexCoord3xOES(texture, s, t, r) glatter_glMultiTexCoord3xOES((texture), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r))
#define glMultiTexCoord3xvOES(texture, coords) glatter_glMultiTexCoord3xvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3xvOES, (GLenum texture, const GLfixed *coords))
#define glMultiTexCoord4xOES(texture, s, t, r, q) glatter_glMultiTexCoord4xOES((texture), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glMultiTexCoord4xvOES(texture, coords) glatter_glMultiTexCoord4xvOES((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4xvOES, (GLenum texture, const GLfixed *coords))
#define glNormal3xOES(nx, ny, nz) glatter_glNormal3xOES((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3xOES, (GLfixed nx, GLfixed ny, GLfixed nz))
#define glNormal3xvOES(coords) glatter_glNormal3xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glNormal3xvOES, (const GLfixed *coords))
#define glOrthoxOES(l, r, b, t, n, f) glatter_glOrthoxOES((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glOrthoxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glPassThroughxOES(token) glatter_glPassThroughxOES((token))
GLATTER_UBLOCK(void, APIENTRY, glPassThroughxOES, (GLfixed token))
#define glPixelMapx(map, size, values) glatter_glPixelMapx((map), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapx, (GLenum map, GLint size, const GLfixed *values))
#define glPixelStorex(pname, param) glatter_glPixelStorex((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStorex, (GLenum pname, GLfixed param))
#define glPixelTransferxOES(pname, param) glatter_glPixelTransferxOES((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransferxOES, (GLenum pname, GLfixed param))
#define glPixelZoomxOES(xfactor, yfactor) glatter_glPixelZoomxOES((xfactor), (yfactor))
GLATTER_UBLOCK(void, APIENTRY, glPixelZoomxOES, (GLfixed xfactor, GLfixed yfactor))
#define glPointParameterxvOES(pname, params) glatter_glPointParameterxvOES((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterxvOES, (GLenum pname, const GLfixed *params))
#define glPointSizexOES(size) glatter_glPointSizexOES((size))
GLATTER_UBLOCK(void, APIENTRY, glPointSizexOES, (GLfixed size))
#define glPolygonOffsetxOES(factor, units) glatter_glPolygonOffsetxOES((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetxOES, (GLfixed factor, GLfixed units))
#define glPrioritizeTexturesxOES(n, textures, priorities) glatter_glPrioritizeTexturesxOES((n), (textures), (priorities))
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTexturesxOES, (GLsizei n, const GLuint *textures, const GLfixed *priorities))
#define glRasterPos2xOES(x, y) glatter_glRasterPos2xOES((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2xOES, (GLfixed x, GLfixed y))
#define glRasterPos2xvOES(coords) glatter_glRasterPos2xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2xvOES, (const GLfixed *coords))
#define glRasterPos3xOES(x, y, z) glatter_glRasterPos3xOES((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3xOES, (GLfixed x, GLfixed y, GLfixed z))
#define glRasterPos3xvOES(coords) glatter_glRasterPos3xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3xvOES, (const GLfixed *coords))
#define glRasterPos4xOES(x, y, z, w) glatter_glRasterPos4xOES((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4xOES, (GLfixed x, GLfixed y, GLfixed z, GLfixed w))
#define glRasterPos4xvOES(coords) glatter_glRasterPos4xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4xvOES, (const GLfixed *coords))
#define glRectxOES(x1, y1, x2, y2) glatter_glRectxOES((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRectxOES, (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2))
#define glRectxvOES(v1, v2) glatter_glRectxvOES((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectxvOES, (const GLfixed *v1, const GLfixed *v2))
#define glRotatexOES(angle, x, y, z) glatter_glRotatexOES((angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRotatexOES, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#define glScalexOES(x, y, z) glatter_glScalexOES((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glScalexOES, (GLfixed x, GLfixed y, GLfixed z))
#define glTexCoord1xOES(s) glatter_glTexCoord1xOES((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1xOES, (GLfixed s))
#define glTexCoord1xvOES(coords) glatter_glTexCoord1xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1xvOES, (const GLfixed *coords))
#define glTexCoord2xOES(s, t) glatter_glTexCoord2xOES((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2xOES, (GLfixed s, GLfixed t))
#define glTexCoord2xvOES(coords) glatter_glTexCoord2xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2xvOES, (const GLfixed *coords))
#define glTexCoord3xOES(s, t, r) glatter_glTexCoord3xOES((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3xOES, (GLfixed s, GLfixed t, GLfixed r))
#define glTexCoord3xvOES(coords) glatter_glTexCoord3xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3xvOES, (const GLfixed *coords))
#define glTexCoord4xOES(s, t, r, q) glatter_glTexCoord4xOES((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4xOES, (GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glTexCoord4xvOES(coords) glatter_glTexCoord4xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4xvOES, (const GLfixed *coords))
#define glTexEnvxOES(target, pname, param) glatter_glTexEnvxOES((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvxOES, (GLenum target, GLenum pname, GLfixed param))
#define glTexEnvxvOES(target, pname, params) glatter_glTexEnvxvOES((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#define glTexGenxOES(coord, pname, param) glatter_glTexGenxOES((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGenxOES, (GLenum coord, GLenum pname, GLfixed param))
#define glTexGenxvOES(coord, pname, params) glatter_glTexGenxvOES((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGenxvOES, (GLenum coord, GLenum pname, const GLfixed *params))
#define glTexParameterxOES(target, pname, param) glatter_glTexParameterxOES((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterxOES, (GLenum target, GLenum pname, GLfixed param))
#define glTexParameterxvOES(target, pname, params) glatter_glTexParameterxvOES((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#define glTranslatexOES(x, y, z) glatter_glTranslatexOES((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTranslatexOES, (GLfixed x, GLfixed y, GLfixed z))
#define glVertex2xOES(x) glatter_glVertex2xOES((x))
GLATTER_UBLOCK(void, APIENTRY, glVertex2xOES, (GLfixed x))
#define glVertex2xvOES(coords) glatter_glVertex2xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex2xvOES, (const GLfixed *coords))
#define glVertex3xOES(x, y) glatter_glVertex3xOES((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex3xOES, (GLfixed x, GLfixed y))
#define glVertex3xvOES(coords) glatter_glVertex3xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex3xvOES, (const GLfixed *coords))
#define glVertex4xOES(x, y, z) glatter_glVertex4xOES((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex4xOES, (GLfixed x, GLfixed y, GLfixed z))
#define glVertex4xvOES(coords) glatter_glVertex4xvOES((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex4xvOES, (const GLfixed *coords))
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_query_matrix)
#define glQueryMatrixxOES(mantissa, exponent) glatter_glQueryMatrixxOES((mantissa), (exponent))
GLATTER_UBLOCK(GLbitfield, APIENTRY, glQueryMatrixxOES, (GLfixed *mantissa, GLint *exponent))
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#define glClearDepthfOES(depth) glatter_glClearDepthfOES((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthfOES, (GLclampf depth))
#define glClipPlanefOES(plane, equation) glatter_glClipPlanefOES((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glClipPlanefOES, (GLenum plane, const GLfloat *equation))
#define glDepthRangefOES(n, f) glatter_glDepthRangefOES((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangefOES, (GLclampf n, GLclampf f))
#define glFrustumfOES(l, r, b, t, n, f) glatter_glFrustumfOES((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glFrustumfOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#define glGetClipPlanefOES(plane, equation) glatter_glGetClipPlanefOES((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlanefOES, (GLenum plane, GLfloat *equation))
#define glOrthofOES(l, r, b, t, n, f) glatter_glOrthofOES((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glOrthofOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#endif // defined(GL_OES_single_precision)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR((target), (attachment), (texture), (level), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview)
#if defined(GL_PGI_misc_hints)
#define glHintPGI(target, mode) glatter_glHintPGI((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glHintPGI, (GLenum target, GLint mode))
#endif // defined(GL_PGI_misc_hints)
#if defined(GL_SGIS_detail_texture)
#define glDetailTexFuncSGIS(target, n, points) glatter_glDetailTexFuncSGIS((target), (n), (points))
GLATTER_UBLOCK(void, APIENTRY, glDetailTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat *points))
#define glGetDetailTexFuncSGIS(target, points) glatter_glGetDetailTexFuncSGIS((target), (points))
GLATTER_UBLOCK(void, APIENTRY, glGetDetailTexFuncSGIS, (GLenum target, GLfloat *points))
#endif // defined(GL_SGIS_detail_texture)
#if defined(GL_SGIS_fog_function)
#define glFogFuncSGIS(n, points) glatter_glFogFuncSGIS((n), (points))
GLATTER_UBLOCK(void, APIENTRY, glFogFuncSGIS, (GLsizei n, const GLfloat *points))
#define glGetFogFuncSGIS(points) glatter_glGetFogFuncSGIS((points))
GLATTER_UBLOCK(void, APIENTRY, glGetFogFuncSGIS, (GLfloat *points))
#endif // defined(GL_SGIS_fog_function)
#if defined(GL_SGIS_multisample)
#define glSampleMaskSGIS(value, invert) glatter_glSampleMaskSGIS((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskSGIS, (GLclampf value, GLboolean invert))
#define glSamplePatternSGIS(pattern) glatter_glSamplePatternSGIS((pattern))
GLATTER_UBLOCK(void, APIENTRY, glSamplePatternSGIS, (GLenum pattern))
#endif // defined(GL_SGIS_multisample)
#if defined(GL_SGIS_pixel_texture)
#define glGetPixelTexGenParameterfvSGIS(pname, params) glatter_glGetPixelTexGenParameterfvSGIS((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTexGenParameterfvSGIS, (GLenum pname, GLfloat *params))
#define glGetPixelTexGenParameterivSGIS(pname, params) glatter_glGetPixelTexGenParameterivSGIS((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTexGenParameterivSGIS, (GLenum pname, GLint *params))
#define glPixelTexGenParameterfSGIS(pname, param) glatter_glPixelTexGenParameterfSGIS((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterfSGIS, (GLenum pname, GLfloat param))
#define glPixelTexGenParameterfvSGIS(pname, params) glatter_glPixelTexGenParameterfvSGIS((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterfvSGIS, (GLenum pname, const GLfloat *params))
#define glPixelTexGenParameteriSGIS(pname, param) glatter_glPixelTexGenParameteriSGIS((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameteriSGIS, (GLenum pname, GLint param))
#define glPixelTexGenParameterivSGIS(pname, params) glatter_glPixelTexGenParameterivSGIS((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterivSGIS, (GLenum pname, const GLint *params))
#endif // defined(GL_SGIS_pixel_texture)
#if defined(GL_SGIS_point_parameters)
#define glPointParameterfSGIS(pname, param) glatter_glPointParameterfSGIS((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfSGIS, (GLenum pname, GLfloat param))
#define glPointParameterfvSGIS(pname, params) glatter_glPointParameterfvSGIS((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvSGIS, (GLenum pname, const GLfloat *params))
#endif // defined(GL_SGIS_point_parameters)
#if defined(GL_SGIS_sharpen_texture)
#define glGetSharpenTexFuncSGIS(target, points) glatter_glGetSharpenTexFuncSGIS((target), (points))
GLATTER_UBLOCK(void, APIENTRY, glGetSharpenTexFuncSGIS, (GLenum target, GLfloat *points))
#define glSharpenTexFuncSGIS(target, n, points) glatter_glSharpenTexFuncSGIS((target), (n), (points))
GLATTER_UBLOCK(void, APIENTRY, glSharpenTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat *points))
#endif // defined(GL_SGIS_sharpen_texture)
#if defined(GL_SGIS_texture4D)
#define glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) glatter_glTexImage4DSGIS((target), (level), (internalformat), (width), (height), (depth), (size4d), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage4DSGIS, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) glatter_glTexSubImage4DSGIS((target), (level), (xoffset), (yoffset), (zoffset), (woffset), (width), (height), (depth), (size4d), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage4DSGIS, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_SGIS_texture4D)
#if defined(GL_SGIS_texture_color_mask)
#define glTextureColorMaskSGIS(red, green, blue, alpha) glatter_glTextureColorMaskSGIS((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glTextureColorMaskSGIS, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#endif // defined(GL_SGIS_texture_color_mask)
#if defined(GL_SGIS_texture_filter4)
#define glGetTexFilterFuncSGIS(target, filter, weights) glatter_glGetTexFilterFuncSGIS((target), (filter), (weights))
GLATTER_UBLOCK(void, APIENTRY, glGetTexFilterFuncSGIS, (GLenum target, GLenum filter, GLfloat *weights))
#define glTexFilterFuncSGIS(target, filter, n, weights) glatter_glTexFilterFuncSGIS((target), (filter), (n), (weights))
GLATTER_UBLOCK(void, APIENTRY, glTexFilterFuncSGIS, (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights))
#endif // defined(GL_SGIS_texture_filter4)
#if defined(GL_SGIX_async)
#define glAsyncMarkerSGIX(marker) glatter_glAsyncMarkerSGIX((marker))
GLATTER_UBLOCK(void, APIENTRY, glAsyncMarkerSGIX, (GLuint marker))
#define glDeleteAsyncMarkersSGIX(marker, range) glatter_glDeleteAsyncMarkersSGIX((marker), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeleteAsyncMarkersSGIX, (GLuint marker, GLsizei range))
#define glFinishAsyncSGIX(markerp) glatter_glFinishAsyncSGIX((markerp))
GLATTER_UBLOCK(GLint, APIENTRY, glFinishAsyncSGIX, (GLuint *markerp))
#define glGenAsyncMarkersSGIX(range) glatter_glGenAsyncMarkersSGIX((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenAsyncMarkersSGIX, (GLsizei range))
#define glIsAsyncMarkerSGIX(marker) glatter_glIsAsyncMarkerSGIX((marker))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsAsyncMarkerSGIX, (GLuint marker))
#define glPollAsyncSGIX(markerp) glatter_glPollAsyncSGIX((markerp))
GLATTER_UBLOCK(GLint, APIENTRY, glPollAsyncSGIX, (GLuint *markerp))
#endif // defined(GL_SGIX_async)
#if defined(GL_SGIX_flush_raster)
#define glFlushRasterSGIX() glatter_glFlushRasterSGIX()
GLATTER_UBLOCK(void, APIENTRY, glFlushRasterSGIX, (void))
#endif // defined(GL_SGIX_flush_raster)
#if defined(GL_SGIX_fragment_lighting)
#define glFragmentColorMaterialSGIX(face, mode) glatter_glFragmentColorMaterialSGIX((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFragmentColorMaterialSGIX, (GLenum face, GLenum mode))
#define glFragmentLightModelfSGIX(pname, param) glatter_glFragmentLightModelfSGIX((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelfSGIX, (GLenum pname, GLfloat param))
#define glFragmentLightModelfvSGIX(pname, params) glatter_glFragmentLightModelfvSGIX((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelfvSGIX, (GLenum pname, const GLfloat *params))
#define glFragmentLightModeliSGIX(pname, param) glatter_glFragmentLightModeliSGIX((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModeliSGIX, (GLenum pname, GLint param))
#define glFragmentLightModelivSGIX(pname, params) glatter_glFragmentLightModelivSGIX((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelivSGIX, (GLenum pname, const GLint *params))
#define glFragmentLightfSGIX(light, pname, param) glatter_glFragmentLightfSGIX((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightfSGIX, (GLenum light, GLenum pname, GLfloat param))
#define glFragmentLightfvSGIX(light, pname, params) glatter_glFragmentLightfvSGIX((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightfvSGIX, (GLenum light, GLenum pname, const GLfloat *params))
#define glFragmentLightiSGIX(light, pname, param) glatter_glFragmentLightiSGIX((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightiSGIX, (GLenum light, GLenum pname, GLint param))
#define glFragmentLightivSGIX(light, pname, params) glatter_glFragmentLightivSGIX((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightivSGIX, (GLenum light, GLenum pname, const GLint *params))
#define glFragmentMaterialfSGIX(face, pname, param) glatter_glFragmentMaterialfSGIX((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialfSGIX, (GLenum face, GLenum pname, GLfloat param))
#define glFragmentMaterialfvSGIX(face, pname, params) glatter_glFragmentMaterialfvSGIX((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialfvSGIX, (GLenum face, GLenum pname, const GLfloat *params))
#define glFragmentMaterialiSGIX(face, pname, param) glatter_glFragmentMaterialiSGIX((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialiSGIX, (GLenum face, GLenum pname, GLint param))
#define glFragmentMaterialivSGIX(face, pname, params) glatter_glFragmentMaterialivSGIX((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialivSGIX, (GLenum face, GLenum pname, const GLint *params))
#define glGetFragmentLightfvSGIX(light, pname, params) glatter_glGetFragmentLightfvSGIX((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentLightfvSGIX, (GLenum light, GLenum pname, GLfloat *params))
#define glGetFragmentLightivSGIX(light, pname, params) glatter_glGetFragmentLightivSGIX((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentLightivSGIX, (GLenum light, GLenum pname, GLint *params))
#define glGetFragmentMaterialfvSGIX(face, pname, params) glatter_glGetFragmentMaterialfvSGIX((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentMaterialfvSGIX, (GLenum face, GLenum pname, GLfloat *params))
#define glGetFragmentMaterialivSGIX(face, pname, params) glatter_glGetFragmentMaterialivSGIX((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentMaterialivSGIX, (GLenum face, GLenum pname, GLint *params))
#define glLightEnviSGIX(pname, param) glatter_glLightEnviSGIX((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightEnviSGIX, (GLenum pname, GLint param))
#endif // defined(GL_SGIX_fragment_lighting)
#if defined(GL_SGIX_framezoom)
#define glFrameZoomSGIX(factor) glatter_glFrameZoomSGIX((factor))
GLATTER_UBLOCK(void, APIENTRY, glFrameZoomSGIX, (GLint factor))
#endif // defined(GL_SGIX_framezoom)
#if defined(GL_SGIX_igloo_interface)
#define glIglooInterfaceSGIX(pname, params) glatter_glIglooInterfaceSGIX((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glIglooInterfaceSGIX, (GLenum pname, const void *params))
#endif // defined(GL_SGIX_igloo_interface)
#if defined(GL_SGIX_instruments)
#define glGetInstrumentsSGIX() glatter_glGetInstrumentsSGIX()
GLATTER_UBLOCK(GLint, APIENTRY, glGetInstrumentsSGIX, (void))
#define glInstrumentsBufferSGIX(size, buffer) glatter_glInstrumentsBufferSGIX((size), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glInstrumentsBufferSGIX, (GLsizei size, GLint *buffer))
#define glPollInstrumentsSGIX(marker_p) glatter_glPollInstrumentsSGIX((marker_p))
GLATTER_UBLOCK(GLint, APIENTRY, glPollInstrumentsSGIX, (GLint *marker_p))
#define glReadInstrumentsSGIX(marker) glatter_glReadInstrumentsSGIX((marker))
GLATTER_UBLOCK(void, APIENTRY, glReadInstrumentsSGIX, (GLint marker))
#define glStartInstrumentsSGIX() glatter_glStartInstrumentsSGIX()
GLATTER_UBLOCK(void, APIENTRY, glStartInstrumentsSGIX, (void))
#define glStopInstrumentsSGIX(marker) glatter_glStopInstrumentsSGIX((marker))
GLATTER_UBLOCK(void, APIENTRY, glStopInstrumentsSGIX, (GLint marker))
#endif // defined(GL_SGIX_instruments)
#if defined(GL_SGIX_list_priority)
#define glGetListParameterfvSGIX(list, pname, params) glatter_glGetListParameterfvSGIX((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetListParameterfvSGIX, (GLuint list, GLenum pname, GLfloat *params))
#define glGetListParameterivSGIX(list, pname, params) glatter_glGetListParameterivSGIX((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetListParameterivSGIX, (GLuint list, GLenum pname, GLint *params))
#define glListParameterfSGIX(list, pname, param) glatter_glListParameterfSGIX((list), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glListParameterfSGIX, (GLuint list, GLenum pname, GLfloat param))
#define glListParameterfvSGIX(list, pname, params) glatter_glListParameterfvSGIX((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glListParameterfvSGIX, (GLuint list, GLenum pname, const GLfloat *params))
#define glListParameteriSGIX(list, pname, param) glatter_glListParameteriSGIX((list), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glListParameteriSGIX, (GLuint list, GLenum pname, GLint param))
#define glListParameterivSGIX(list, pname, params) glatter_glListParameterivSGIX((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glListParameterivSGIX, (GLuint list, GLenum pname, const GLint *params))
#endif // defined(GL_SGIX_list_priority)
#if defined(GL_SGIX_pixel_texture)
#define glPixelTexGenSGIX(mode) glatter_glPixelTexGenSGIX((mode))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenSGIX, (GLenum mode))
#endif // defined(GL_SGIX_pixel_texture)
#if defined(GL_SGIX_polynomial_ffd)
#define glDeformSGIX(mask) glatter_glDeformSGIX((mask))
GLATTER_UBLOCK(void, APIENTRY, glDeformSGIX, (GLbitfield mask))
#define glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3dSGIX((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points))
GLATTER_UBLOCK(void, APIENTRY, glDeformationMap3dSGIX, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points))
#define glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3fSGIX((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points))
GLATTER_UBLOCK(void, APIENTRY, glDeformationMap3fSGIX, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points))
#define glLoadIdentityDeformationMapSGIX(mask) glatter_glLoadIdentityDeformationMapSGIX((mask))
GLATTER_UBLOCK(void, APIENTRY, glLoadIdentityDeformationMapSGIX, (GLbitfield mask))
#endif // defined(GL_SGIX_polynomial_ffd)
#if defined(GL_SGIX_reference_plane)
#define glReferencePlaneSGIX(equation) glatter_glReferencePlaneSGIX((equation))
GLATTER_UBLOCK(void, APIENTRY, glReferencePlaneSGIX, (const GLdouble *equation))
#endif // defined(GL_SGIX_reference_plane)
#if defined(GL_SGIX_sprite)
#define glSpriteParameterfSGIX(pname, param) glatter_glSpriteParameterfSGIX((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterfSGIX, (GLenum pname, GLfloat param))
#define glSpriteParameterfvSGIX(pname, params) glatter_glSpriteParameterfvSGIX((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterfvSGIX, (GLenum pname, const GLfloat *params))
#define glSpriteParameteriSGIX(pname, param) glatter_glSpriteParameteriSGIX((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameteriSGIX, (GLenum pname, GLint param))
#define glSpriteParameterivSGIX(pname, params) glatter_glSpriteParameterivSGIX((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterivSGIX, (GLenum pname, const GLint *params))
#endif // defined(GL_SGIX_sprite)
#if defined(GL_SGIX_tag_sample_buffer)
#define glTagSampleBufferSGIX() glatter_glTagSampleBufferSGIX()
GLATTER_UBLOCK(void, APIENTRY, glTagSampleBufferSGIX, (void))
#endif // defined(GL_SGIX_tag_sample_buffer)
#if defined(GL_SGI_color_table)
#define glColorTableParameterfvSGI(target, pname, params) glatter_glColorTableParameterfvSGI((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterfvSGI, (GLenum target, GLenum pname, const GLfloat *params))
#define glColorTableParameterivSGI(target, pname, params) glatter_glColorTableParameterivSGI((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterivSGI, (GLenum target, GLenum pname, const GLint *params))
#define glColorTableSGI(target, internalformat, width, format, type, table) glatter_glColorTableSGI((target), (internalformat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glColorTableSGI, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table))
#define glCopyColorTableSGI(target, internalformat, x, y, width) glatter_glCopyColorTableSGI((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorTableSGI, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glGetColorTableParameterfvSGI(target, pname, params) glatter_glGetColorTableParameterfvSGI((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfvSGI, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameterivSGI(target, pname, params) glatter_glGetColorTableParameterivSGI((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterivSGI, (GLenum target, GLenum pname, GLint *params))
#define glGetColorTableSGI(target, format, type, table) glatter_glGetColorTableSGI((target), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableSGI, (GLenum target, GLenum format, GLenum type, void *table))
#endif // defined(GL_SGI_color_table)
#if defined(GL_SUNX_constant_data)
#define glFinishTextureSUNX() glatter_glFinishTextureSUNX()
GLATTER_UBLOCK(void, APIENTRY, glFinishTextureSUNX, (void))
#endif // defined(GL_SUNX_constant_data)
#if defined(GL_SUN_global_alpha)
#define glGlobalAlphaFactorbSUN(factor) glatter_glGlobalAlphaFactorbSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorbSUN, (GLbyte factor))
#define glGlobalAlphaFactordSUN(factor) glatter_glGlobalAlphaFactordSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactordSUN, (GLdouble factor))
#define glGlobalAlphaFactorfSUN(factor) glatter_glGlobalAlphaFactorfSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorfSUN, (GLfloat factor))
#define glGlobalAlphaFactoriSUN(factor) glatter_glGlobalAlphaFactoriSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactoriSUN, (GLint factor))
#define glGlobalAlphaFactorsSUN(factor) glatter_glGlobalAlphaFactorsSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorsSUN, (GLshort factor))
#define glGlobalAlphaFactorubSUN(factor) glatter_glGlobalAlphaFactorubSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorubSUN, (GLubyte factor))
#define glGlobalAlphaFactoruiSUN(factor) glatter_glGlobalAlphaFactoruiSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactoruiSUN, (GLuint factor))
#define glGlobalAlphaFactorusSUN(factor) glatter_glGlobalAlphaFactorusSUN((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorusSUN, (GLushort factor))
#endif // defined(GL_SUN_global_alpha)
#if defined(GL_SUN_mesh_array)
#define glDrawMeshArraysSUN(mode, first, count, width) glatter_glDrawMeshArraysSUN((mode), (first), (count), (width))
GLATTER_UBLOCK(void, APIENTRY, glDrawMeshArraysSUN, (GLenum mode, GLint first, GLsizei count, GLsizei width))
#endif // defined(GL_SUN_mesh_array)
#if defined(GL_SUN_triangle_list)
#define glReplacementCodePointerSUN(type, stride, pointer) glatter_glReplacementCodePointerSUN((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodePointerSUN, (GLenum type, GLsizei stride, const void **pointer))
#define glReplacementCodeubSUN(code) glatter_glReplacementCodeubSUN((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeubSUN, (GLubyte code))
#define glReplacementCodeubvSUN(code) glatter_glReplacementCodeubvSUN((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeubvSUN, (const GLubyte *code))
#define glReplacementCodeuiSUN(code) glatter_glReplacementCodeuiSUN((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiSUN, (GLuint code))
#define glReplacementCodeuivSUN(code) glatter_glReplacementCodeuivSUN((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuivSUN, (const GLuint *code))
#define glReplacementCodeusSUN(code) glatter_glReplacementCodeusSUN((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeusSUN, (GLushort code))
#define glReplacementCodeusvSUN(code) glatter_glReplacementCodeusvSUN((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeusvSUN, (const GLushort *code))
#endif // defined(GL_SUN_triangle_list)
#if defined(GL_SUN_vertex)
#define glColor3fVertex3fSUN(r, g, b, x, y, z) glatter_glColor3fVertex3fSUN((r), (g), (b), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glColor3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#define glColor3fVertex3fvSUN(c, v) glatter_glColor3fVertex3fvSUN((c), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor3fVertex3fvSUN, (const GLfloat *c, const GLfloat *v))
#define glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) glatter_glColor4fNormal3fVertex3fSUN((r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glColor4fNormal3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glColor4fNormal3fVertex3fvSUN(c, n, v) glatter_glColor4fNormal3fVertex3fvSUN((c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor4fNormal3fVertex3fvSUN, (const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glColor4ubVertex2fSUN(r, g, b, a, x, y) glatter_glColor4ubVertex2fSUN((r), (g), (b), (a), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex2fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y))
#define glColor4ubVertex2fvSUN(c, v) glatter_glColor4ubVertex2fvSUN((c), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex2fvSUN, (const GLubyte *c, const GLfloat *v))
#define glColor4ubVertex3fSUN(r, g, b, a, x, y, z) glatter_glColor4ubVertex3fSUN((r), (g), (b), (a), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex3fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#define glColor4ubVertex3fvSUN(c, v) glatter_glColor4ubVertex3fvSUN((c), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex3fvSUN, (const GLubyte *c, const GLfloat *v))
#define glNormal3fVertex3fSUN(nx, ny, nz, x, y, z) glatter_glNormal3fVertex3fSUN((nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glNormal3fVertex3fSUN, (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glNormal3fVertex3fvSUN(n, v) glatter_glNormal3fVertex3fvSUN((n), (v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3fVertex3fvSUN, (const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) glatter_glReplacementCodeuiColor3fVertex3fSUN((rc), (r), (g), (b), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor3fVertex3fvSUN((rc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor3fVertex3fvSUN, (const GLuint *rc, const GLfloat *c, const GLfloat *v))
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiColor4fNormal3fVertex3fSUN((rc), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) glatter_glReplacementCodeuiColor4fNormal3fVertex3fvSUN((rc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) glatter_glReplacementCodeuiColor4ubVertex3fSUN((rc), (r), (g), (b), (a), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4ubVertex3fSUN, (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor4ubVertex3fvSUN((rc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4ubVertex3fvSUN, (const GLuint *rc, const GLubyte *c, const GLfloat *v))
#define glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiNormal3fVertex3fSUN((rc), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiNormal3fVertex3fSUN, (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) glatter_glReplacementCodeuiNormal3fVertex3fvSUN((rc), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((rc), (s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((rc), (tc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((rc), (s), (t), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((rc), (tc), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) glatter_glReplacementCodeuiTexCoord2fVertex3fSUN((rc), (s), (t), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) glatter_glReplacementCodeuiTexCoord2fVertex3fvSUN((rc), (tc), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *v))
#define glReplacementCodeuiVertex3fSUN(rc, x, y, z) glatter_glReplacementCodeuiVertex3fSUN((rc), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiVertex3fSUN, (GLuint rc, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiVertex3fvSUN(rc, v) glatter_glReplacementCodeuiVertex3fvSUN((rc), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiVertex3fvSUN, (const GLuint *rc, const GLfloat *v))
#define glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) glatter_glTexCoord2fColor3fVertex3fSUN((s), (t), (r), (g), (b), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fColor3fVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor3fVertex3fvSUN((tc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *v))
#define glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glTexCoord2fColor4fNormal3fVertex3fSUN((s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) glatter_glTexCoord2fColor4fNormal3fVertex3fvSUN((tc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) glatter_glTexCoord2fColor4ubVertex3fSUN((s), (t), (r), (g), (b), (a), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4ubVertex3fSUN, (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fColor4ubVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor4ubVertex3fvSUN((tc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4ubVertex3fvSUN, (const GLfloat *tc, const GLubyte *c, const GLfloat *v))
#define glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) glatter_glTexCoord2fNormal3fVertex3fSUN((s), (t), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fNormal3fVertex3fvSUN(tc, n, v) glatter_glTexCoord2fNormal3fVertex3fvSUN((tc), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fNormal3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *n, const GLfloat *v))
#define glTexCoord2fVertex3fSUN(s, t, x, y, z) glatter_glTexCoord2fVertex3fSUN((s), (t), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fVertex3fvSUN(tc, v) glatter_glTexCoord2fVertex3fvSUN((tc), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fVertex3fvSUN, (const GLfloat *tc, const GLfloat *v))
#define glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) glatter_glTexCoord4fColor4fNormal3fVertex4fSUN((s), (t), (p), (q), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fColor4fNormal3fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) glatter_glTexCoord4fColor4fNormal3fVertex4fvSUN((tc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fColor4fNormal3fVertex4fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) glatter_glTexCoord4fVertex4fSUN((s), (t), (p), (q), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glTexCoord4fVertex4fvSUN(tc, v) glatter_glTexCoord4fVertex4fvSUN((tc), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fVertex4fvSUN, (const GLfloat *tc, const GLfloat *v))
#endif // defined(GL_SUN_vertex)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, APIENTRY, glActiveTexture, (GLenum texture))
#define glClientActiveTexture(texture) glatter_glClientActiveTexture((texture))
GLATTER_UBLOCK(void, APIENTRY, glClientActiveTexture, (GLenum texture))
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage((target), (level), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImage, (GLenum target, GLint level, void *img))
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixd, (const GLdouble *m))
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixf, (const GLfloat *m))
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixd, (const GLdouble *m))
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixf, (const GLfloat *m))
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1d, (GLenum target, GLdouble s))
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1f, (GLenum target, GLfloat s))
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1i, (GLenum target, GLint s))
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1iv, (GLenum target, const GLint *v))
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1s, (GLenum target, GLshort s))
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2d, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2f, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2i, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2iv, (GLenum target, const GLint *v))
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2s, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3d, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3f, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3i, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3iv, (GLenum target, const GLint *v))
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3s, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4d, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4i, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4iv, (GLenum target, const GLint *v))
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4s, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4sv, (GLenum target, const GLshort *v))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glFogCoordPointer(type, stride, pointer) glatter_glFogCoordPointer((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointer, (GLenum type, GLsizei stride, const void *pointer))
#define glFogCoordd(coord) glatter_glFogCoordd((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordd, (GLdouble coord))
#define glFogCoorddv(coord) glatter_glFogCoorddv((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddv, (const GLdouble *coord))
#define glFogCoordf(coord) glatter_glFogCoordf((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordf, (GLfloat coord))
#define glFogCoordfv(coord) glatter_glFogCoordfv((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfv, (const GLfloat *coord))
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays((mode), (first), (count), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArrays, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount))
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements((mode), (count), (type), (indices), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElements, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount))
#define glPointParameterf(pname, param) glatter_glPointParameterf((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#define glPointParameterfv(pname, params) glatter_glPointParameterfv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#define glPointParameteri(pname, param) glatter_glPointParameteri((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteri, (GLenum pname, GLint param))
#define glPointParameteriv(pname, params) glatter_glPointParameteriv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriv, (GLenum pname, const GLint *params))
#define glSecondaryColor3b(red, green, blue) glatter_glSecondaryColor3b((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3b, (GLbyte red, GLbyte green, GLbyte blue))
#define glSecondaryColor3bv(v) glatter_glSecondaryColor3bv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bv, (const GLbyte *v))
#define glSecondaryColor3d(red, green, blue) glatter_glSecondaryColor3d((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3d, (GLdouble red, GLdouble green, GLdouble blue))
#define glSecondaryColor3dv(v) glatter_glSecondaryColor3dv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dv, (const GLdouble *v))
#define glSecondaryColor3f(red, green, blue) glatter_glSecondaryColor3f((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3f, (GLfloat red, GLfloat green, GLfloat blue))
#define glSecondaryColor3fv(v) glatter_glSecondaryColor3fv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fv, (const GLfloat *v))
#define glSecondaryColor3i(red, green, blue) glatter_glSecondaryColor3i((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3i, (GLint red, GLint green, GLint blue))
#define glSecondaryColor3iv(v) glatter_glSecondaryColor3iv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3iv, (const GLint *v))
#define glSecondaryColor3s(red, green, blue) glatter_glSecondaryColor3s((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3s, (GLshort red, GLshort green, GLshort blue))
#define glSecondaryColor3sv(v) glatter_glSecondaryColor3sv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3sv, (const GLshort *v))
#define glSecondaryColor3ub(red, green, blue) glatter_glSecondaryColor3ub((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ub, (GLubyte red, GLubyte green, GLubyte blue))
#define glSecondaryColor3ubv(v) glatter_glSecondaryColor3ubv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubv, (const GLubyte *v))
#define glSecondaryColor3ui(red, green, blue) glatter_glSecondaryColor3ui((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ui, (GLuint red, GLuint green, GLuint blue))
#define glSecondaryColor3uiv(v) glatter_glSecondaryColor3uiv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uiv, (const GLuint *v))
#define glSecondaryColor3us(red, green, blue) glatter_glSecondaryColor3us((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3us, (GLushort red, GLushort green, GLushort blue))
#define glSecondaryColor3usv(v) glatter_glSecondaryColor3usv((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usv, (const GLushort *v))
#define glSecondaryColorPointer(size, type, stride, pointer) glatter_glSecondaryColorPointer((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointer, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWindowPos2d(x, y) glatter_glWindowPos2d((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2d, (GLdouble x, GLdouble y))
#define glWindowPos2dv(v) glatter_glWindowPos2dv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dv, (const GLdouble *v))
#define glWindowPos2f(x, y) glatter_glWindowPos2f((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2f, (GLfloat x, GLfloat y))
#define glWindowPos2fv(v) glatter_glWindowPos2fv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fv, (const GLfloat *v))
#define glWindowPos2i(x, y) glatter_glWindowPos2i((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2i, (GLint x, GLint y))
#define glWindowPos2iv(v) glatter_glWindowPos2iv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iv, (const GLint *v))
#define glWindowPos2s(x, y) glatter_glWindowPos2s((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2s, (GLshort x, GLshort y))
#define glWindowPos2sv(v) glatter_glWindowPos2sv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sv, (const GLshort *v))
#define glWindowPos3d(x, y, z) glatter_glWindowPos3d((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3d, (GLdouble x, GLdouble y, GLdouble z))
#define glWindowPos3dv(v) glatter_glWindowPos3dv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dv, (const GLdouble *v))
#define glWindowPos3f(x, y, z) glatter_glWindowPos3f((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3f, (GLfloat x, GLfloat y, GLfloat z))
#define glWindowPos3fv(v) glatter_glWindowPos3fv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fv, (const GLfloat *v))
#define glWindowPos3i(x, y, z) glatter_glWindowPos3i((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3i, (GLint x, GLint y, GLint z))
#define glWindowPos3iv(v) glatter_glWindowPos3iv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iv, (const GLint *v))
#define glWindowPos3s(x, y, z) glatter_glWindowPos3s((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3s, (GLshort x, GLshort y, GLshort z))
#define glWindowPos3sv(v) glatter_glWindowPos3sv((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sv, (const GLshort *v))
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glEndQuery(target) glatter_glEndQuery((target))
GLATTER_UBLOCK(void, APIENTRY, glEndQuery, (GLenum target))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenQueries(n, ids) glatter_glGenQueries((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, void *data))
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectiv, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsQuery(id) glatter_glIsQuery((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQuery, (GLuint id))
#define glMapBuffer(target, access) glatter_glMapBuffer((target), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBuffer, (GLenum target, GLenum access))
#define glUnmapBuffer(target) glatter_glUnmapBuffer((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBuffer, (GLenum target))
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glCompileShader(shader) glatter_glCompileShader((shader))
GLATTER_UBLOCK(void, APIENTRY, glCompileShader, (GLuint shader))
#define glCreateProgram() glatter_glCreateProgram()
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader((type))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShader, (GLenum type))
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
GLATTER_UBLOCK(void, APIENTRY, glDeleteShader, (GLuint shader))
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdv, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glIsProgram(program) glatter_glIsProgram((program))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgram, (GLuint program))
#define glIsShader(shader) glatter_glIsShader((shader))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsShader, (GLuint shader))
#define glLinkProgram(program) glatter_glLinkProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glLinkProgram, (GLuint program))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1d, (GLuint index, GLdouble x))
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1s, (GLuint index, GLshort x))
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sv, (GLuint index, const GLshort *v))
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2s, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sv, (GLuint index, const GLshort *v))
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3s, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nbv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Niv, (GLuint index, const GLint *v))
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nsv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nub, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nuiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nusv, (GLuint index, const GLushort *v))
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4iv, (GLuint index, const GLint *v))
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4s, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usv, (GLuint index, const GLushort *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRender, (GLuint id, GLenum mode))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation((program), (color), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocation, (GLuint program, GLuint color, const GLchar *name))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindVertexArray(array) glatter_glBindVertexArray((array))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClampColor(target, clamp) glatter_glClampColor((target), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glClampColor, (GLenum target, GLenum clamp))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDisablei(target, index) glatter_glDisablei((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisablei, (GLenum target, GLuint index))
#define glEnablei(target, index) glatter_glEnablei((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnablei, (GLenum target, GLuint index))
#define glEndConditionalRender() glatter_glEndConditionalRender()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRender, (void))
#define glEndTransformFeedback() glatter_glEndTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedback, (void))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange((target), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi((name), (index))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glIsEnabledi(target, index) glatter_glIsEnabledi((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsVertexArray(array) glatter_glIsVertexArray((array))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1i, (GLuint index, GLint x))
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iv, (GLuint index, const GLint *v))
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ui, (GLuint index, GLuint x))
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2i, (GLuint index, GLint x, GLint y))
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iv, (GLuint index, const GLint *v))
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ui, (GLuint index, GLuint x, GLuint y))
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3i, (GLuint index, GLint x, GLint y, GLint z))
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iv, (GLuint index, const GLint *v))
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ui, (GLuint index, GLuint x, GLuint y, GLuint z))
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bv, (GLuint index, const GLbyte *v))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4sv, (GLuint index, const GLshort *v))
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usv, (GLuint index, const GLushort *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName((program), (uniformIndex), (bufSize), (length), (uniformName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformName, (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex((index))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndex, (GLuint index))
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glDeleteSync(sync) glatter_glDeleteSync((sync))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSync, (GLsync sync))
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glFenceSync(condition, flags) glatter_glFenceSync((condition), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glIsSync(sync) glatter_glIsSync((sync))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSync, (GLsync sync))
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex((mode), (count), (type), (indices), (drawcount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsBaseVertex, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex))
#define glProvokingVertex(mode) glatter_glProvokingVertex((mode))
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertex, (GLenum mode))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski((maskNumber), (mask))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(void, APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed((program), (colorNumber), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationIndexed, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#define glBindSampler(unit, sampler) glatter_glBindSampler((unit), (sampler))
GLATTER_UBLOCK(void, APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glColorP3ui(type, color) glatter_glColorP3ui((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP3ui, (GLenum type, GLuint color))
#define glColorP3uiv(type, color) glatter_glColorP3uiv((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP3uiv, (GLenum type, const GLuint *color))
#define glColorP4ui(type, color) glatter_glColorP4ui((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP4ui, (GLenum type, GLuint color))
#define glColorP4uiv(type, color) glatter_glColorP4uiv((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP4uiv, (GLenum type, const GLuint *color))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glGenSamplers(count, samplers) glatter_glGenSamplers((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataIndex, (GLuint program, const GLchar *name))
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64v, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64v, (GLuint id, GLenum pname, GLuint64 *params))
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glIsSampler(sampler) glatter_glIsSampler((sampler))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSampler, (GLuint sampler))
#define glMultiTexCoordP1ui(texture, type, coords) glatter_glMultiTexCoordP1ui((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP1ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP1uiv(texture, type, coords) glatter_glMultiTexCoordP1uiv((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP1uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glMultiTexCoordP2ui(texture, type, coords) glatter_glMultiTexCoordP2ui((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP2ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP2uiv(texture, type, coords) glatter_glMultiTexCoordP2uiv((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP2uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glMultiTexCoordP3ui(texture, type, coords) glatter_glMultiTexCoordP3ui((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP3ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP3uiv(texture, type, coords) glatter_glMultiTexCoordP3uiv((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP3uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glMultiTexCoordP4ui(texture, type, coords) glatter_glMultiTexCoordP4ui((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP4ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP4uiv(texture, type, coords) glatter_glMultiTexCoordP4uiv((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP4uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glNormalP3ui(type, coords) glatter_glNormalP3ui((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalP3ui, (GLenum type, GLuint coords))
#define glNormalP3uiv(type, coords) glatter_glNormalP3uiv((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalP3uiv, (GLenum type, const GLuint *coords))
#define glQueryCounter(id, target) glatter_glQueryCounter((id), (target))
GLATTER_UBLOCK(void, APIENTRY, glQueryCounter, (GLuint id, GLenum target))
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSecondaryColorP3ui(type, color) glatter_glSecondaryColorP3ui((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorP3ui, (GLenum type, GLuint color))
#define glSecondaryColorP3uiv(type, color) glatter_glSecondaryColorP3uiv((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorP3uiv, (GLenum type, const GLuint *color))
#define glTexCoordP1ui(type, coords) glatter_glTexCoordP1ui((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP1ui, (GLenum type, GLuint coords))
#define glTexCoordP1uiv(type, coords) glatter_glTexCoordP1uiv((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP1uiv, (GLenum type, const GLuint *coords))
#define glTexCoordP2ui(type, coords) glatter_glTexCoordP2ui((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP2ui, (GLenum type, GLuint coords))
#define glTexCoordP2uiv(type, coords) glatter_glTexCoordP2uiv((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP2uiv, (GLenum type, const GLuint *coords))
#define glTexCoordP3ui(type, coords) glatter_glTexCoordP3ui((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP3ui, (GLenum type, GLuint coords))
#define glTexCoordP3uiv(type, coords) glatter_glTexCoordP3uiv((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP3uiv, (GLenum type, const GLuint *coords))
#define glTexCoordP4ui(type, coords) glatter_glTexCoordP4ui((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP4ui, (GLenum type, GLuint coords))
#define glTexCoordP4uiv(type, coords) glatter_glTexCoordP4uiv((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP4uiv, (GLenum type, const GLuint *coords))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexP2ui(type, value) glatter_glVertexP2ui((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP2ui, (GLenum type, GLuint value))
#define glVertexP2uiv(type, value) glatter_glVertexP2uiv((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP2uiv, (GLenum type, const GLuint *value))
#define glVertexP3ui(type, value) glatter_glVertexP3ui((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP3ui, (GLenum type, GLuint value))
#define glVertexP3uiv(type, value) glatter_glVertexP3uiv((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP3uiv, (GLenum type, const GLuint *value))
#define glVertexP4ui(type, value) glatter_glVertexP4ui((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP4ui, (GLenum type, GLuint value))
#define glVertexP4uiv(type, value) glatter_glVertexP4uiv((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP4uiv, (GLenum type, const GLuint *value))
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed((target), (index), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryIndexed, (GLenum target, GLuint index, GLuint id))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect((mode), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect((mode), (type), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback((mode), (id))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedback, (GLenum mode, GLuint id))
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream((mode), (id), (stream))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStream, (GLenum mode, GLuint id, GLuint stream))
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEndQueryIndexed, (GLenum target, GLuint index))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv((program), (shadertype), (index), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformiv, (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values))
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv((program), (shadertype), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStageiv, (GLuint program, GLenum shadertype, GLenum pname, GLint *values))
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryIndexediv, (GLenum target, GLuint index, GLenum pname, GLint *params))
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex((program), (shadertype), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetSubroutineIndex, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation((program), (shadertype), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetSubroutineUniformLocation, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv((shadertype), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformSubroutineuiv, (GLenum shadertype, GLint location, GLuint *params))
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformdv, (GLuint program, GLint location, GLdouble *params))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedback, (GLuint id))
#define glMinSampleShading(value) glatter_glMinSampleShading((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShading, (GLfloat value))
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv((pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameterfv, (GLenum pname, const GLfloat *values))
#define glPatchParameteri(pname, value) glatter_glPatchParameteri((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedback, (void))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedback, (void))
#define glUniform1d(location, x) glatter_glUniform1d((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1d, (GLint location, GLdouble x))
#define glUniform1dv(location, count, value) glatter_glUniform1dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform2d(location, x, y) glatter_glUniform2d((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2d, (GLint location, GLdouble x, GLdouble y))
#define glUniform2dv(location, count, value) glatter_glUniform2dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform3d(location, x, y, z) glatter_glUniform3d((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3d, (GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glUniform3dv(location, count, value) glatter_glUniform3dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4d, (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glUniform4dv(location, count, value) glatter_glUniform4dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv((shadertype), (count), (indices))
GLATTER_UBLOCK(void, APIENTRY, glUniformSubroutinesuiv, (GLenum shadertype, GLsizei count, const GLuint *indices))
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram((pipeline), (program))
GLATTER_UBLOCK(void, APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glClearDepthf(d) glatter_glClearDepthf((d))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthf, (GLfloat d))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv((type), (count), (strings))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeArrayv, (GLuint first, GLsizei count, const GLdouble *v))
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed((index), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeIndexed, (GLuint index, GLdouble n, GLdouble f))
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_v, (GLenum target, GLuint index, GLdouble *data))
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_v, (GLenum target, GLuint index, GLfloat *data))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv((pipeline), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdv, (GLuint index, GLenum pname, GLdouble *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline((pipeline))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1d, (GLuint program, GLint location, GLdouble v0))
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2d, (GLuint program, GLint location, GLdouble v0, GLdouble v1))
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2))
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3))
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
GLATTER_UBLOCK(void, APIENTRY, glReleaseShaderCompiler, (void))
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorArrayv, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexed, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexedv, (GLuint index, const GLint *v))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages((pipeline), (stages), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1d, (GLuint index, GLdouble x))
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dv, (GLuint index, const GLdouble *v))
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportArrayv, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedf, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedfv, (GLuint index, const GLfloat *v))
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance((mode), (first), (count), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedBaseInstance, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance((mode), (count), (type), (indices), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertexBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced((mode), (id), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackInstanced, (GLenum mode, GLuint id, GLsizei instancecount))
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced((mode), (id), (stream), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStreamInstanced, (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount))
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv((program), (bufferIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAtomicCounterBufferiv, (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D((target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage1D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData((target), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferData, (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData((target), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferSubData, (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect((indirect))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformati64v, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params))
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocationIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData((buffer))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferData, (GLuint buffer))
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage((texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexImage, (GLuint texture, GLint level))
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth))
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect((mode), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirect, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect((mode), (type), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel((ptr), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#define glPopDebugGroup() glatter_glPopDebugGroup()
GLATTER_UBLOCK(void, APIENTRY, glPopDebugGroup, (void))
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup((source), (id), (length), (message))
GLATTER_UBLOCK(void, APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding((program), (storageBlockIndex), (storageBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glShaderStorageBlockBinding, (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding))
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, APIENTRY, glTextureView, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding((attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor((bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase((target), (first), (count), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersBase, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers))
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange((target), (first), (count), (buffers), (offsets), (sizes))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersRange, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes))
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers((first), (count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glBindSamplers, (GLuint first, GLsizei count, const GLuint *samplers))
#define glBindTextures(first, count, textures) glatter_glBindTextures((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers((first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffers, (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage((target), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glBufferStorage, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage((texture), (level), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexImage, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit((unit), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTextureUnit, (GLuint unit, GLuint texture))
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitNamedFramebuffer, (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatus, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferData, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubData, (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) glatter_glClearNamedFramebufferfi((framebuffer), (buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfi, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferuiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClipControl(origin, depth) glatter_glClipControl((origin), (depth))
GLATTER_UBLOCK(void, APIENTRY, glClipControl, (GLenum origin, GLenum depth))
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D((texture), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyNamedBufferSubData, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D((texture), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateBuffers, (GLsizei n, GLuint *buffers))
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glCreateProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glCreateQueries(target, n, ids) glatter_glCreateQueries((target), (n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateQueries, (GLenum target, GLsizei n, GLuint *ids))
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers((n), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glCreateSamplers, (GLsizei n, GLuint *samplers))
#define glCreateTextures(target, n, textures) glatter_glCreateTextures((target), (n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glCreateTextures, (GLenum target, GLsizei n, GLuint *textures))
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glCreateVertexArrays, (GLsizei n, GLuint *arrays))
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap((texture))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmap, (GLuint texture))
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage((texture), (level), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImage, (GLuint texture, GLint level, GLsizei bufSize, void *pixels))
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels))
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatus, (void))
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteri64v, (GLuint buffer, GLenum pname, GLint64 *params))
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteriv, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointerv, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameteriv, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameteriv, (GLuint framebuffer, GLenum pname, GLint *param))
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameteriv, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjecti64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectui64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectuiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage((texture), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImage, (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfv, (GLuint texture, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameteriv, (GLuint texture, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIiv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuiv, (GLuint texture, GLenum pname, GLuint *params))
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfv, (GLuint texture, GLenum pname, GLfloat *params))
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameteriv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki64_v, (GLuint xfb, GLenum pname, GLuint index, GLint64 *param))
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki_v, (GLuint xfb, GLenum pname, GLuint index, GLint *param))
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv((xfb), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackiv, (GLuint xfb, GLenum pname, GLint *param))
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexed64iv, (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param))
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexediv, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayiv, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetnColorTable(target, format, type, bufSize, table) glatter_glGetnColorTable((target), (format), (type), (bufSize), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetnColorTable, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table))
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage((target), (lod), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImage, (GLenum target, GLint lod, GLsizei bufSize, void *pixels))
#define glGetnConvolutionFilter(target, format, type, bufSize, image) glatter_glGetnConvolutionFilter((target), (format), (type), (bufSize), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetnConvolutionFilter, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image))
#define glGetnHistogram(target, reset, format, type, bufSize, values) glatter_glGetnHistogram((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnMapdv(target, query, bufSize, v) glatter_glGetnMapdv((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapdv, (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v))
#define glGetnMapfv(target, query, bufSize, v) glatter_glGetnMapfv((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapfv, (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v))
#define glGetnMapiv(target, query, bufSize, v) glatter_glGetnMapiv((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapiv, (GLenum target, GLenum query, GLsizei bufSize, GLint *v))
#define glGetnMinmax(target, reset, format, type, bufSize, values) glatter_glGetnMinmax((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnPixelMapfv(map, bufSize, values) glatter_glGetnPixelMapfv((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapfv, (GLenum map, GLsizei bufSize, GLfloat *values))
#define glGetnPixelMapuiv(map, bufSize, values) glatter_glGetnPixelMapuiv((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapuiv, (GLenum map, GLsizei bufSize, GLuint *values))
#define glGetnPixelMapusv(map, bufSize, values) glatter_glGetnPixelMapusv((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapusv, (GLenum map, GLsizei bufSize, GLushort *values))
#define glGetnPolygonStipple(bufSize, pattern) glatter_glGetnPolygonStipple((bufSize), (pattern))
GLATTER_UBLOCK(void, APIENTRY, glGetnPolygonStipple, (GLsizei bufSize, GLubyte *pattern))
#define glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilter((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetnSeparableFilter, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span))
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage((target), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdv, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData((framebuffer), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferSubData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBuffer, (GLuint buffer, GLenum access))
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferData, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorage, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer((framebuffer), (buf))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffer, (GLuint framebuffer, GLenum buf))
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffers, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteri, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer((framebuffer), (src))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferReadBuffer, (GLuint framebuffer, GLenum src))
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbuffer, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayer, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorage, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisample, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glTextureBarrier() glatter_glTextureBarrier()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrier, (void))
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer((texture), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBuffer, (GLuint texture, GLenum internalformat, GLuint buffer))
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange((texture), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRange, (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIiv, (GLuint texture, GLenum pname, const GLint *params))
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuiv, (GLuint texture, GLenum pname, const GLuint *params))
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterf, (GLuint texture, GLenum pname, GLfloat param))
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfv, (GLuint texture, GLenum pname, const GLfloat *param))
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteri, (GLuint texture, GLenum pname, GLint param))
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriv, (GLuint texture, GLenum pname, const GLint *param))
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D((texture), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D((texture), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D((texture), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D((texture), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase((xfb), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferBase, (GLuint xfb, GLuint index, GLuint buffer))
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange((xfb), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferRange, (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBuffer, (GLuint buffer))
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribBinding, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribIFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribLFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindingDivisor, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer((vaobj), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayElementBuffer, (GLuint vaobj, GLuint buffer))
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffer, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers((vaobj), (first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffers, (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#endif // defined(GL_VERSION_4_5)
#if defined(GL_VERSION_4_6)
#define glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCount((mode), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCount, (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCount((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCount, (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glPolygonOffsetClamp(factor, units, clamp) glatter_glPolygonOffsetClamp((factor), (units), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClamp, (GLfloat factor, GLfloat units, GLfloat clamp))
#define glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) glatter_glSpecializeShader((shader), (pEntryPoint), (numSpecializationConstants), (pConstantIndex), (pConstantValue))
GLATTER_UBLOCK(void, APIENTRY, glSpecializeShader, (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue))
#endif // defined(GL_VERSION_4_6)
#endif // defined(__gl_glext_h_)
#if defined(__glcorearb_h_)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleARB, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleARB, (GLuint texture))
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleARB, (GLuint texture, GLuint sampler))
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vARB, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentARB, (GLuint64 handle))
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentARB, (GLuint64 handle))
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentARB, (GLuint64 handle))
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentARB, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentARB, (GLuint64 handle))
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentARB, (GLuint64 handle))
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64ARB, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64ARB, (GLint location, GLuint64 value))
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64ARB, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vARB, (GLuint index, const GLuint64EXT *v))
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB((context), (event), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glCreateSyncFromCLeventARB, (struct _cl_context *context, struct _cl_event *event, GLbitfield flags))
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeGroupSizeARB, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z))
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackARB, (GLDEBUGPROCARB callback, const void *userParam))
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControlARB, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertARB, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogARB, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateiARB, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationiARB, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateiARB, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunciARB, (GLuint buf, GLenum src, GLenum dst))
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB((mode), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCountARB, (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCountARB, (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatusARB, (void))
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB((target), (lod), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImageARB, (GLenum target, GLint lod, GLsizei bufSize, void *img))
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB((target), (level), (format), (type), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImageARB, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img))
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdvARB, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfvARB, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformivARB, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuivARB, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixelsARB, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShadingARB, (GLfloat value))
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB((shader), (count), (path), (length))
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderIncludeARB, (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length))
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB((namelen), (name))
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamedStringARB, (GLint namelen, const GLchar *name))
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB((namelen), (name), (bufSize), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringARB, (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string))
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB((namelen), (name), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringivARB, (GLint namelen, const GLchar *name, GLenum pname, GLint *params))
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB((namelen), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedStringARB, (GLint namelen, const GLchar *name))
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB((type), (namelen), (name), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedStringARB, (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string))
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB((target), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glBufferPageCommitmentARB, (GLenum target, GLintptr offset, GLsizei size, GLboolean commit))
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentARB, (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit))
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentEXT, (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit))
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) glatter_glTexPageCommitmentARB((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (resident))
GLATTER_UBLOCK(void, APIENTRY, glTexPageCommitmentARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident))
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_VERSION_1_0)
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc((sfactor), (dfactor))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glClear(mask) glatter_glClear((mask))
GLATTER_UBLOCK(void, APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepth(depth) glatter_glClearDepth((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepth, (GLdouble depth))
#define glClearStencil(s) glatter_glClearStencil((s))
GLATTER_UBLOCK(void, APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCullFace(mode) glatter_glCullFace((mode))
GLATTER_UBLOCK(void, APIENTRY, glCullFace, (GLenum mode))
#define glDepthFunc(func) glatter_glDepthFunc((func))
GLATTER_UBLOCK(void, APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask((flag))
GLATTER_UBLOCK(void, APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRange(near, far) glatter_glDepthRange((near), (far))
GLATTER_UBLOCK(void, APIENTRY, glDepthRange, (GLdouble near, GLdouble far))
#define glDisable(cap) glatter_glDisable((cap))
GLATTER_UBLOCK(void, APIENTRY, glDisable, (GLenum cap))
#define glDrawBuffer(buf) glatter_glDrawBuffer((buf))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffer, (GLenum buf))
#define glEnable(cap) glatter_glEnable((cap))
GLATTER_UBLOCK(void, APIENTRY, glEnable, (GLenum cap))
#define glFinish() glatter_glFinish()
GLATTER_UBLOCK(void, APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush()
GLATTER_UBLOCK(void, APIENTRY, glFlush, (void))
#define glFrontFace(mode) glatter_glFrontFace((mode))
GLATTER_UBLOCK(void, APIENTRY, glFrontFace, (GLenum mode))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetDoublev(pname, data) glatter_glGetDoublev((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublev, (GLenum pname, GLdouble *data))
#define glGetError() glatter_glGetError()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetString(name) glatter_glGetString((name))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetString, (GLenum name))
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage((target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsEnabled(cap) glatter_glIsEnabled((cap))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabled, (GLenum cap))
#define glLineWidth(width) glatter_glLineWidth((width))
GLATTER_UBLOCK(void, APIENTRY, glLineWidth, (GLfloat width))
#define glLogicOp(opcode) glatter_glLogicOp((opcode))
GLATTER_UBLOCK(void, APIENTRY, glLogicOp, (GLenum opcode))
#define glPixelStoref(pname, param) glatter_glPixelStoref((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStoref, (GLenum pname, GLfloat param))
#define glPixelStorei(pname, param) glatter_glPixelStorei((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPointSize(size) glatter_glPointSize((size))
GLATTER_UBLOCK(void, APIENTRY, glPointSize, (GLfloat size))
#define glPolygonMode(face, mode) glatter_glPolygonMode((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glPolygonMode, (GLenum face, GLenum mode))
#define glReadBuffer(src) glatter_glReadBuffer((src))
GLATTER_UBLOCK(void, APIENTRY, glReadBuffer, (GLenum src))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glScissor(x, y, width, height) glatter_glScissor((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask((mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D((target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage1D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glViewport(x, y, width, height) glatter_glViewport((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_VERSION_1_0)
#if defined(GL_VERSION_1_1)
#define glBindTexture(target, texture) glatter_glBindTexture((target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D((target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glGenTextures(n, textures) glatter_glGenTextures((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetPointerv(pname, params) glatter_glGetPointerv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerv, (GLenum pname, void **params))
#define glIsTexture(texture) glatter_glIsTexture((texture))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTexture, (GLuint texture))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_1)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture((texture))
GLATTER_UBLOCK(void, APIENTRY, glActiveTexture, (GLenum texture))
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage((target), (level), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImage, (GLenum target, GLint level, void *img))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation((mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays((mode), (first), (count), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArrays, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount))
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements((mode), (count), (type), (indices), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElements, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount))
#define glPointParameterf(pname, param) glatter_glPointParameterf((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#define glPointParameterfv(pname, params) glatter_glPointParameterfv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#define glPointParameteri(pname, param) glatter_glPointParameteri((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteri, (GLenum pname, GLint param))
#define glPointParameteriv(pname, params) glatter_glPointParameteriv((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriv, (GLenum pname, const GLint *params))
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBindBuffer(target, buffer) glatter_glBindBuffer((target), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBufferData(target, size, data, usage) glatter_glBufferData((target), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glEndQuery(target) glatter_glEndQuery((target))
GLATTER_UBLOCK(void, APIENTRY, glEndQuery, (GLenum target))
#define glGenBuffers(n, buffers) glatter_glGenBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenQueries(n, ids) glatter_glGenQueries((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, void *data))
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectiv, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glIsBuffer(buffer) glatter_glIsBuffer((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsQuery(id) glatter_glIsQuery((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQuery, (GLuint id))
#define glMapBuffer(target, access) glatter_glMapBuffer((target), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBuffer, (GLenum target, GLenum access))
#define glUnmapBuffer(target) glatter_glUnmapBuffer((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBuffer, (GLenum target))
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation((program), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glCompileShader(shader) glatter_glCompileShader((shader))
GLATTER_UBLOCK(void, APIENTRY, glCompileShader, (GLuint shader))
#define glCreateProgram() glatter_glCreateProgram()
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader((type))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShader, (GLenum type))
#define glDeleteProgram(program) glatter_glDeleteProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteShader(shader) glatter_glDeleteShader((shader))
GLATTER_UBLOCK(void, APIENTRY, glDeleteShader, (GLuint shader))
#define glDetachShader(program, shader) glatter_glDetachShader((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray((index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray((index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv((program), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv((shader), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdv, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glIsProgram(program) glatter_glIsProgram((program))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgram, (GLuint program))
#define glIsShader(shader) glatter_glIsShader((shader))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsShader, (GLuint shader))
#define glLinkProgram(program) glatter_glLinkProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glLinkProgram, (GLuint program))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource((shader), (count), (string), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate((face), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glUniform1f(location, v0) glatter_glUniform1f((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram((program))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1d, (GLuint index, GLdouble x))
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1s, (GLuint index, GLshort x))
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sv, (GLuint index, const GLshort *v))
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2s, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sv, (GLuint index, const GLshort *v))
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3s, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nbv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Niv, (GLuint index, const GLint *v))
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nsv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nub, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nuiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nusv, (GLuint index, const GLushort *v))
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4iv, (GLuint index, const GLint *v))
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4s, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usv, (GLuint index, const GLushort *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRender, (GLuint id, GLenum mode))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation((program), (color), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocation, (GLuint program, GLuint color, const GLchar *name))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer((target), (framebuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindVertexArray(array) glatter_glBindVertexArray((array))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus((target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClampColor(target, clamp) glatter_glClampColor((target), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glClampColor, (GLenum target, GLenum clamp))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDisablei(target, index) glatter_glDisablei((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisablei, (GLenum target, GLuint index))
#define glEnablei(target, index) glatter_glEnablei((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnablei, (GLenum target, GLuint index))
#define glEndConditionalRender() glatter_glEndConditionalRender()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRender, (void))
#define glEndTransformFeedback() glatter_glEndTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedback, (void))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange((target), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGenerateMipmap(target) glatter_glGenerateMipmap((target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi((name), (index))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glIsEnabledi(target, index) glatter_glIsEnabledi((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer((framebuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer((renderbuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsVertexArray(array) glatter_glIsVertexArray((array))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1i, (GLuint index, GLint x))
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iv, (GLuint index, const GLint *v))
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ui, (GLuint index, GLuint x))
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2i, (GLuint index, GLint x, GLint y))
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iv, (GLuint index, const GLint *v))
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ui, (GLuint index, GLuint x, GLuint y))
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3i, (GLuint index, GLint x, GLint y, GLint z))
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iv, (GLuint index, const GLint *v))
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ui, (GLuint index, GLuint x, GLuint y, GLuint z))
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bv, (GLuint index, const GLbyte *v))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4sv, (GLuint index, const GLshort *v))
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usv, (GLuint index, const GLushort *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName((program), (uniformIndex), (bufSize), (length), (uniformName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformName, (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex((index))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndex, (GLuint index))
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glDeleteSync(sync) glatter_glDeleteSync((sync))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSync, (GLsync sync))
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glFenceSync(condition, flags) glatter_glFenceSync((condition), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glIsSync(sync) glatter_glIsSync((sync))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSync, (GLsync sync))
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex((mode), (count), (type), (indices), (drawcount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsBaseVertex, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex))
#define glProvokingVertex(mode) glatter_glProvokingVertex((mode))
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertex, (GLenum mode))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski((maskNumber), (mask))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync((sync), (flags), (timeout))
GLATTER_UBLOCK(void, APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed((program), (colorNumber), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationIndexed, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#define glBindSampler(unit, sampler) glatter_glBindSampler((unit), (sampler))
GLATTER_UBLOCK(void, APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glGenSamplers(count, samplers) glatter_glGenSamplers((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataIndex, (GLuint program, const GLchar *name))
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64v, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64v, (GLuint id, GLenum pname, GLuint64 *params))
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glIsSampler(sampler) glatter_glIsSampler((sampler))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSampler, (GLuint sampler))
#define glQueryCounter(id, target) glatter_glQueryCounter((id), (target))
GLATTER_UBLOCK(void, APIENTRY, glQueryCounter, (GLuint id, GLenum target))
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed((target), (index), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryIndexed, (GLenum target, GLuint index, GLuint id))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect((mode), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect((mode), (type), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback((mode), (id))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedback, (GLenum mode, GLuint id))
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream((mode), (id), (stream))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStream, (GLenum mode, GLuint id, GLuint stream))
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEndQueryIndexed, (GLenum target, GLuint index))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv((program), (shadertype), (index), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformiv, (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values))
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv((program), (shadertype), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStageiv, (GLuint program, GLenum shadertype, GLenum pname, GLint *values))
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryIndexediv, (GLenum target, GLuint index, GLenum pname, GLint *params))
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex((program), (shadertype), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetSubroutineIndex, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation((program), (shadertype), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetSubroutineUniformLocation, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv((shadertype), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformSubroutineuiv, (GLenum shadertype, GLint location, GLuint *params))
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformdv, (GLuint program, GLint location, GLdouble *params))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedback, (GLuint id))
#define glMinSampleShading(value) glatter_glMinSampleShading((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShading, (GLfloat value))
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv((pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameterfv, (GLenum pname, const GLfloat *values))
#define glPatchParameteri(pname, value) glatter_glPatchParameteri((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedback, (void))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback()
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedback, (void))
#define glUniform1d(location, x) glatter_glUniform1d((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1d, (GLint location, GLdouble x))
#define glUniform1dv(location, count, value) glatter_glUniform1dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform2d(location, x, y) glatter_glUniform2d((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2d, (GLint location, GLdouble x, GLdouble y))
#define glUniform2dv(location, count, value) glatter_glUniform2dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform3d(location, x, y, z) glatter_glUniform3d((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3d, (GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glUniform3dv(location, count, value) glatter_glUniform3dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4d, (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glUniform4dv(location, count, value) glatter_glUniform4dv((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv((shadertype), (count), (indices))
GLATTER_UBLOCK(void, APIENTRY, glUniformSubroutinesuiv, (GLenum shadertype, GLsizei count, const GLuint *indices))
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram((pipeline), (program))
GLATTER_UBLOCK(void, APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glClearDepthf(d) glatter_glClearDepthf((d))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthf, (GLfloat d))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv((type), (count), (strings))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeArrayv, (GLuint first, GLsizei count, const GLdouble *v))
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed((index), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeIndexed, (GLuint index, GLdouble n, GLdouble f))
#define glDepthRangef(n, f) glatter_glDepthRangef((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_v, (GLenum target, GLuint index, GLdouble *data))
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_v, (GLenum target, GLuint index, GLfloat *data))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv((pipeline), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdv, (GLuint index, GLenum pname, GLdouble *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline((pipeline))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1d, (GLuint program, GLint location, GLdouble v0))
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2d, (GLuint program, GLint location, GLdouble v0, GLdouble v1))
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2))
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3))
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler()
GLATTER_UBLOCK(void, APIENTRY, glReleaseShaderCompiler, (void))
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorArrayv, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexed, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexedv, (GLuint index, const GLint *v))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages((pipeline), (stages), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1d, (GLuint index, GLdouble x))
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dv, (GLuint index, const GLdouble *v))
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportArrayv, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedf, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedfv, (GLuint index, const GLfloat *v))
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance((mode), (first), (count), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedBaseInstance, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance((mode), (count), (type), (indices), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertexBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced((mode), (id), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackInstanced, (GLenum mode, GLuint id, GLsizei instancecount))
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced((mode), (id), (stream), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStreamInstanced, (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount))
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv((program), (bufferIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAtomicCounterBufferiv, (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D((target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage1D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData((target), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferData, (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData((target), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferSubData, (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect((indirect))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformati64v, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params))
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocationIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData((buffer))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferData, (GLuint buffer))
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage((texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexImage, (GLuint texture, GLint level))
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth))
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect((mode), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirect, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect((mode), (type), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel((ptr), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#define glPopDebugGroup() glatter_glPopDebugGroup()
GLATTER_UBLOCK(void, APIENTRY, glPopDebugGroup, (void))
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup((source), (id), (length), (message))
GLATTER_UBLOCK(void, APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding((program), (storageBlockIndex), (storageBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glShaderStorageBlockBinding, (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding))
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, APIENTRY, glTextureView, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding((attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor((bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase((target), (first), (count), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersBase, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers))
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange((target), (first), (count), (buffers), (offsets), (sizes))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersRange, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes))
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers((first), (count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glBindSamplers, (GLuint first, GLsizei count, const GLuint *samplers))
#define glBindTextures(first, count, textures) glatter_glBindTextures((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers((first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffers, (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage((target), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glBufferStorage, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage((texture), (level), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexImage, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit((unit), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTextureUnit, (GLuint unit, GLuint texture))
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitNamedFramebuffer, (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatus, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferData, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubData, (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void *data))
#define glClearNamedFramebufferfi(framebuffer, buffer, depth, stencil) glatter_glClearNamedFramebufferfi((framebuffer), (buffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfi, (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil))
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferuiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClipControl(origin, depth) glatter_glClipControl((origin), (depth))
GLATTER_UBLOCK(void, APIENTRY, glClipControl, (GLenum origin, GLenum depth))
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D((texture), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyNamedBufferSubData, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size))
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D((texture), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateBuffers, (GLsizei n, GLuint *buffers))
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glCreateProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glCreateQueries(target, n, ids) glatter_glCreateQueries((target), (n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateQueries, (GLenum target, GLsizei n, GLuint *ids))
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers((n), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glCreateSamplers, (GLsizei n, GLuint *samplers))
#define glCreateTextures(target, n, textures) glatter_glCreateTextures((target), (n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glCreateTextures, (GLenum target, GLsizei n, GLuint *textures))
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glCreateVertexArrays, (GLsizei n, GLuint *arrays))
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizei length))
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap((texture))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmap, (GLuint texture))
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage((texture), (level), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImage, (GLuint texture, GLint level, GLsizei bufSize, void *pixels))
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels))
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatus, (void))
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteri64v, (GLuint buffer, GLenum pname, GLint64 *params))
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteriv, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointerv, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizei size, void *data))
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameteriv, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameteriv, (GLuint framebuffer, GLenum pname, GLint *param))
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameteriv, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage((texture), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImage, (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfv, (GLuint texture, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameteriv, (GLuint texture, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIiv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuiv, (GLuint texture, GLenum pname, GLuint *params))
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfv, (GLuint texture, GLenum pname, GLfloat *params))
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameteriv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki64_v, (GLuint xfb, GLenum pname, GLuint index, GLint64 *param))
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki_v, (GLuint xfb, GLenum pname, GLuint index, GLint *param))
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv((xfb), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackiv, (GLuint xfb, GLenum pname, GLint *param))
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexed64iv, (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param))
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexediv, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayiv, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage((target), (lod), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImage, (GLenum target, GLint lod, GLsizei bufSize, void *pixels))
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage((target), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdv, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData((framebuffer), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferSubData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBuffer, (GLuint buffer, GLenum access))
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferData, (GLuint buffer, GLsizei size, const void *data, GLenum usage))
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorage, (GLuint buffer, GLsizei size, const void *data, GLbitfield flags))
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizei size, const void *data))
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer((framebuffer), (buf))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffer, (GLuint framebuffer, GLenum buf))
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffers, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteri, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer((framebuffer), (src))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferReadBuffer, (GLuint framebuffer, GLenum src))
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbuffer, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayer, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorage, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisample, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glTextureBarrier() glatter_glTextureBarrier()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrier, (void))
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer((texture), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBuffer, (GLuint texture, GLenum internalformat, GLuint buffer))
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange((texture), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRange, (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size))
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIiv, (GLuint texture, GLenum pname, const GLint *params))
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuiv, (GLuint texture, GLenum pname, const GLuint *params))
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterf, (GLuint texture, GLenum pname, GLfloat param))
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfv, (GLuint texture, GLenum pname, const GLfloat *param))
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteri, (GLuint texture, GLenum pname, GLint param))
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriv, (GLuint texture, GLenum pname, const GLint *param))
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D((texture), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D((texture), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D((texture), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D((texture), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase((xfb), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferBase, (GLuint xfb, GLuint index, GLuint buffer))
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange((xfb), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferRange, (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size))
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBuffer, (GLuint buffer))
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribBinding, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribIFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribLFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindingDivisor, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer((vaobj), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayElementBuffer, (GLuint vaobj, GLuint buffer))
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffer, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers((vaobj), (first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffers, (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#endif // defined(__glcorearb_h_)
#endif // defined(GL_VERSION_4_5)
#endif // GLATTER_GL

