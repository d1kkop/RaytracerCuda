/*
Copyright 2017 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



#ifdef GLATTER_WGL
#if defined(__wgl_wglext_h_)
#if defined(WGL_3DL_stereo_control)
#define wglSetStereoEmitterState3DL(hDC, uState) glatter_wglSetStereoEmitterState3DL((hDC), (uState))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetStereoEmitterState3DL, (HDC hDC, UINT uState))
#endif // defined(WGL_3DL_stereo_control)
#if defined(WGL_AMD_gpu_association)
#define wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_wglBlitContextFramebufferAMD((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(VOID, WINAPI, wglBlitContextFramebufferAMD, (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define wglCreateAssociatedContextAMD(id) glatter_wglCreateAssociatedContextAMD((id))
GLATTER_UBLOCK(HGLRC, WINAPI, wglCreateAssociatedContextAMD, (UINT id))
#define wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList) glatter_wglCreateAssociatedContextAttribsAMD((id), (hShareContext), (attribList))
GLATTER_UBLOCK(HGLRC, WINAPI, wglCreateAssociatedContextAttribsAMD, (UINT id, HGLRC hShareContext, const int *attribList))
#define wglDeleteAssociatedContextAMD(hglrc) glatter_wglDeleteAssociatedContextAMD((hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglDeleteAssociatedContextAMD, (HGLRC hglrc))
#define wglGetContextGPUIDAMD(hglrc) glatter_wglGetContextGPUIDAMD((hglrc))
GLATTER_UBLOCK(UINT, WINAPI, wglGetContextGPUIDAMD, (HGLRC hglrc))
#define wglGetCurrentAssociatedContextAMD() glatter_wglGetCurrentAssociatedContextAMD()
GLATTER_UBLOCK(HGLRC, WINAPI, wglGetCurrentAssociatedContextAMD, (void))
#define wglGetGPUIDsAMD(maxCount, ids) glatter_wglGetGPUIDsAMD((maxCount), (ids))
GLATTER_UBLOCK(UINT, WINAPI, wglGetGPUIDsAMD, (UINT maxCount, UINT *ids))
#define wglGetGPUInfoAMD(id, property, dataType, size, data) glatter_wglGetGPUInfoAMD((id), (property), (dataType), (size), (data))
GLATTER_UBLOCK(INT, WINAPI, wglGetGPUInfoAMD, (UINT id, int property, GLenum dataType, UINT size, void *data))
#define wglMakeAssociatedContextCurrentAMD(hglrc) glatter_wglMakeAssociatedContextCurrentAMD((hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglMakeAssociatedContextCurrentAMD, (HGLRC hglrc))
#endif // defined(WGL_AMD_gpu_association)
#if defined(WGL_ARB_buffer_region)
#define wglCreateBufferRegionARB(hDC, iLayerPlane, uType) glatter_wglCreateBufferRegionARB((hDC), (iLayerPlane), (uType))
GLATTER_UBLOCK(HANDLE, WINAPI, wglCreateBufferRegionARB, (HDC hDC, int iLayerPlane, UINT uType))
#define wglDeleteBufferRegionARB(hRegion) glatter_wglDeleteBufferRegionARB((hRegion))
GLATTER_UBLOCK(VOID, WINAPI, wglDeleteBufferRegionARB, (HANDLE hRegion))
#define wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc) glatter_wglRestoreBufferRegionARB((hRegion), (x), (y), (width), (height), (xSrc), (ySrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglRestoreBufferRegionARB, (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc))
#define wglSaveBufferRegionARB(hRegion, x, y, width, height) glatter_wglSaveBufferRegionARB((hRegion), (x), (y), (width), (height))
GLATTER_UBLOCK(BOOL, WINAPI, wglSaveBufferRegionARB, (HANDLE hRegion, int x, int y, int width, int height))
#endif // defined(WGL_ARB_buffer_region)
#if defined(WGL_ARB_create_context)
#define wglCreateContextAttribsARB(hDC, hShareContext, attribList) glatter_wglCreateContextAttribsARB((hDC), (hShareContext), (attribList))
GLATTER_UBLOCK(HGLRC, WINAPI, wglCreateContextAttribsARB, (HDC hDC, HGLRC hShareContext, const int *attribList))
#endif // defined(WGL_ARB_create_context)
#if defined(WGL_ARB_extensions_string)
#define wglGetExtensionsStringARB(hdc) glatter_wglGetExtensionsStringARB((hdc))
GLATTER_UBLOCK(const char *, WINAPI, wglGetExtensionsStringARB, (HDC hdc))
#endif // defined(WGL_ARB_extensions_string)
#if defined(WGL_ARB_make_current_read)
#define wglGetCurrentReadDCARB() glatter_wglGetCurrentReadDCARB()
GLATTER_UBLOCK(HDC, WINAPI, wglGetCurrentReadDCARB, (void))
#define wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentARB((hDrawDC), (hReadDC), (hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglMakeContextCurrentARB, (HDC hDrawDC, HDC hReadDC, HGLRC hglrc))
#endif // defined(WGL_ARB_make_current_read)
#if defined(WGL_ARB_pbuffer)
#define wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferARB((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList))
GLATTER_UBLOCK(HPBUFFERARB, WINAPI, wglCreatePbufferARB, (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList))
#define wglDestroyPbufferARB(hPbuffer) glatter_wglDestroyPbufferARB((hPbuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglDestroyPbufferARB, (HPBUFFERARB hPbuffer))
#define wglGetPbufferDCARB(hPbuffer) glatter_wglGetPbufferDCARB((hPbuffer))
GLATTER_UBLOCK(HDC, WINAPI, wglGetPbufferDCARB, (HPBUFFERARB hPbuffer))
#define wglQueryPbufferARB(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferARB((hPbuffer), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryPbufferARB, (HPBUFFERARB hPbuffer, int iAttribute, int *piValue))
#define wglReleasePbufferDCARB(hPbuffer, hDC) glatter_wglReleasePbufferDCARB((hPbuffer), (hDC))
GLATTER_UBLOCK(int, WINAPI, wglReleasePbufferDCARB, (HPBUFFERARB hPbuffer, HDC hDC))
#endif // defined(WGL_ARB_pbuffer)
#if defined(WGL_ARB_pixel_format)
#define wglChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatARB((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats))
GLATTER_UBLOCK(BOOL, WINAPI, wglChoosePixelFormatARB, (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats))
#define wglGetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvARB((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribfvARB, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues))
#define wglGetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivARB((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribivARB, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues))
#endif // defined(WGL_ARB_pixel_format)
#if defined(WGL_ARB_render_texture)
#define wglBindTexImageARB(hPbuffer, iBuffer) glatter_wglBindTexImageARB((hPbuffer), (iBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindTexImageARB, (HPBUFFERARB hPbuffer, int iBuffer))
#define wglReleaseTexImageARB(hPbuffer, iBuffer) glatter_wglReleaseTexImageARB((hPbuffer), (iBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseTexImageARB, (HPBUFFERARB hPbuffer, int iBuffer))
#define wglSetPbufferAttribARB(hPbuffer, piAttribList) glatter_wglSetPbufferAttribARB((hPbuffer), (piAttribList))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetPbufferAttribARB, (HPBUFFERARB hPbuffer, const int *piAttribList))
#endif // defined(WGL_ARB_render_texture)
#if defined(WGL_EXT_display_color_table)
#define wglBindDisplayColorTableEXT(id) glatter_wglBindDisplayColorTableEXT((id))
GLATTER_UBLOCK(GLboolean, WINAPI, wglBindDisplayColorTableEXT, (GLushort id))
#define wglCreateDisplayColorTableEXT(id) glatter_wglCreateDisplayColorTableEXT((id))
GLATTER_UBLOCK(GLboolean, WINAPI, wglCreateDisplayColorTableEXT, (GLushort id))
#define wglDestroyDisplayColorTableEXT(id) glatter_wglDestroyDisplayColorTableEXT((id))
GLATTER_UBLOCK(VOID, WINAPI, wglDestroyDisplayColorTableEXT, (GLushort id))
#define wglLoadDisplayColorTableEXT(table, length) glatter_wglLoadDisplayColorTableEXT((table), (length))
GLATTER_UBLOCK(GLboolean, WINAPI, wglLoadDisplayColorTableEXT, (const GLushort *table, GLuint length))
#endif // defined(WGL_EXT_display_color_table)
#if defined(WGL_EXT_extensions_string)
#define wglGetExtensionsStringEXT() glatter_wglGetExtensionsStringEXT()
GLATTER_UBLOCK(const char *, WINAPI, wglGetExtensionsStringEXT, (void))
#endif // defined(WGL_EXT_extensions_string)
#if defined(WGL_EXT_make_current_read)
#define wglGetCurrentReadDCEXT() glatter_wglGetCurrentReadDCEXT()
GLATTER_UBLOCK(HDC, WINAPI, wglGetCurrentReadDCEXT, (void))
#define wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentEXT((hDrawDC), (hReadDC), (hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglMakeContextCurrentEXT, (HDC hDrawDC, HDC hReadDC, HGLRC hglrc))
#endif // defined(WGL_EXT_make_current_read)
#if defined(WGL_EXT_pbuffer)
#define wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferEXT((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList))
GLATTER_UBLOCK(HPBUFFEREXT, WINAPI, wglCreatePbufferEXT, (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList))
#define wglDestroyPbufferEXT(hPbuffer) glatter_wglDestroyPbufferEXT((hPbuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglDestroyPbufferEXT, (HPBUFFEREXT hPbuffer))
#define wglGetPbufferDCEXT(hPbuffer) glatter_wglGetPbufferDCEXT((hPbuffer))
GLATTER_UBLOCK(HDC, WINAPI, wglGetPbufferDCEXT, (HPBUFFEREXT hPbuffer))
#define wglQueryPbufferEXT(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferEXT((hPbuffer), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryPbufferEXT, (HPBUFFEREXT hPbuffer, int iAttribute, int *piValue))
#define wglReleasePbufferDCEXT(hPbuffer, hDC) glatter_wglReleasePbufferDCEXT((hPbuffer), (hDC))
GLATTER_UBLOCK(int, WINAPI, wglReleasePbufferDCEXT, (HPBUFFEREXT hPbuffer, HDC hDC))
#endif // defined(WGL_EXT_pbuffer)
#if defined(WGL_EXT_pixel_format)
#define wglChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatEXT((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats))
GLATTER_UBLOCK(BOOL, WINAPI, wglChoosePixelFormatEXT, (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats))
#define wglGetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvEXT((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribfvEXT, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues))
#define wglGetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivEXT((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribivEXT, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues))
#endif // defined(WGL_EXT_pixel_format)
#if defined(WGL_EXT_swap_control)
#define wglGetSwapIntervalEXT() glatter_wglGetSwapIntervalEXT()
GLATTER_UBLOCK(int, WINAPI, wglGetSwapIntervalEXT, (void))
#define wglSwapIntervalEXT(interval) glatter_wglSwapIntervalEXT((interval))
GLATTER_UBLOCK(BOOL, WINAPI, wglSwapIntervalEXT, (int interval))
#endif // defined(WGL_EXT_swap_control)
#if defined(WGL_I3D_digital_video_control)
#define wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglGetDigitalVideoParametersI3D((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetDigitalVideoParametersI3D, (HDC hDC, int iAttribute, int *piValue))
#define wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglSetDigitalVideoParametersI3D((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetDigitalVideoParametersI3D, (HDC hDC, int iAttribute, const int *piValue))
#endif // defined(WGL_I3D_digital_video_control)
#if defined(WGL_I3D_gamma)
#define wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglGetGammaTableI3D((hDC), (iEntries), (puRed), (puGreen), (puBlue))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGammaTableI3D, (HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue))
#define wglGetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglGetGammaTableParametersI3D((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGammaTableParametersI3D, (HDC hDC, int iAttribute, int *piValue))
#define wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglSetGammaTableI3D((hDC), (iEntries), (puRed), (puGreen), (puBlue))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetGammaTableI3D, (HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue))
#define wglSetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglSetGammaTableParametersI3D((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetGammaTableParametersI3D, (HDC hDC, int iAttribute, const int *piValue))
#endif // defined(WGL_I3D_gamma)
#if defined(WGL_I3D_genlock)
#define wglDisableGenlockI3D(hDC) glatter_wglDisableGenlockI3D((hDC))
GLATTER_UBLOCK(BOOL, WINAPI, wglDisableGenlockI3D, (HDC hDC))
#define wglEnableGenlockI3D(hDC) glatter_wglEnableGenlockI3D((hDC))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnableGenlockI3D, (HDC hDC))
#define wglGenlockSampleRateI3D(hDC, uRate) glatter_wglGenlockSampleRateI3D((hDC), (uRate))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSampleRateI3D, (HDC hDC, UINT uRate))
#define wglGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGenlockSourceDelayI3D((hDC), (uDelay))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSourceDelayI3D, (HDC hDC, UINT uDelay))
#define wglGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGenlockSourceEdgeI3D((hDC), (uEdge))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSourceEdgeI3D, (HDC hDC, UINT uEdge))
#define wglGenlockSourceI3D(hDC, uSource) glatter_wglGenlockSourceI3D((hDC), (uSource))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSourceI3D, (HDC hDC, UINT uSource))
#define wglGetGenlockSampleRateI3D(hDC, uRate) glatter_wglGetGenlockSampleRateI3D((hDC), (uRate))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSampleRateI3D, (HDC hDC, UINT *uRate))
#define wglGetGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGetGenlockSourceDelayI3D((hDC), (uDelay))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSourceDelayI3D, (HDC hDC, UINT *uDelay))
#define wglGetGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGetGenlockSourceEdgeI3D((hDC), (uEdge))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSourceEdgeI3D, (HDC hDC, UINT *uEdge))
#define wglGetGenlockSourceI3D(hDC, uSource) glatter_wglGetGenlockSourceI3D((hDC), (uSource))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSourceI3D, (HDC hDC, UINT *uSource))
#define wglIsEnabledGenlockI3D(hDC, pFlag) glatter_wglIsEnabledGenlockI3D((hDC), (pFlag))
GLATTER_UBLOCK(BOOL, WINAPI, wglIsEnabledGenlockI3D, (HDC hDC, BOOL *pFlag))
#define wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay) glatter_wglQueryGenlockMaxSourceDelayI3D((hDC), (uMaxLineDelay), (uMaxPixelDelay))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryGenlockMaxSourceDelayI3D, (HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay))
#endif // defined(WGL_I3D_genlock)
#if defined(WGL_I3D_image_buffer)
#define wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count) glatter_wglAssociateImageBufferEventsI3D((hDC), (pEvent), (pAddress), (pSize), (count))
GLATTER_UBLOCK(BOOL, WINAPI, wglAssociateImageBufferEventsI3D, (HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count))
#define wglCreateImageBufferI3D(hDC, dwSize, uFlags) glatter_wglCreateImageBufferI3D((hDC), (dwSize), (uFlags))
GLATTER_UBLOCK(LPVOID, WINAPI, wglCreateImageBufferI3D, (HDC hDC, DWORD dwSize, UINT uFlags))
#define wglDestroyImageBufferI3D(hDC, pAddress) glatter_wglDestroyImageBufferI3D((hDC), (pAddress))
GLATTER_UBLOCK(BOOL, WINAPI, wglDestroyImageBufferI3D, (HDC hDC, LPVOID pAddress))
#define wglReleaseImageBufferEventsI3D(hDC, pAddress, count) glatter_wglReleaseImageBufferEventsI3D((hDC), (pAddress), (count))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseImageBufferEventsI3D, (HDC hDC, const LPVOID *pAddress, UINT count))
#endif // defined(WGL_I3D_image_buffer)
#if defined(WGL_I3D_swap_frame_lock)
#define wglDisableFrameLockI3D() glatter_wglDisableFrameLockI3D()
GLATTER_UBLOCK(BOOL, WINAPI, wglDisableFrameLockI3D, (void))
#define wglEnableFrameLockI3D() glatter_wglEnableFrameLockI3D()
GLATTER_UBLOCK(BOOL, WINAPI, wglEnableFrameLockI3D, (void))
#define wglIsEnabledFrameLockI3D(pFlag) glatter_wglIsEnabledFrameLockI3D((pFlag))
GLATTER_UBLOCK(BOOL, WINAPI, wglIsEnabledFrameLockI3D, (BOOL *pFlag))
#define wglQueryFrameLockMasterI3D(pFlag) glatter_wglQueryFrameLockMasterI3D((pFlag))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryFrameLockMasterI3D, (BOOL *pFlag))
#endif // defined(WGL_I3D_swap_frame_lock)
#if defined(WGL_I3D_swap_frame_usage)
#define wglBeginFrameTrackingI3D() glatter_wglBeginFrameTrackingI3D()
GLATTER_UBLOCK(BOOL, WINAPI, wglBeginFrameTrackingI3D, (void))
#define wglEndFrameTrackingI3D() glatter_wglEndFrameTrackingI3D()
GLATTER_UBLOCK(BOOL, WINAPI, wglEndFrameTrackingI3D, (void))
#define wglGetFrameUsageI3D(pUsage) glatter_wglGetFrameUsageI3D((pUsage))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetFrameUsageI3D, (float *pUsage))
#define wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage) glatter_wglQueryFrameTrackingI3D((pFrameCount), (pMissedFrames), (pLastMissedUsage))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryFrameTrackingI3D, (DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage))
#endif // defined(WGL_I3D_swap_frame_usage)
#if defined(WGL_NV_DX_interop)
#define wglDXCloseDeviceNV(hDevice) glatter_wglDXCloseDeviceNV((hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXCloseDeviceNV, (HANDLE hDevice))
#define wglDXLockObjectsNV(hDevice, count, hObjects) glatter_wglDXLockObjectsNV((hDevice), (count), (hObjects))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXLockObjectsNV, (HANDLE hDevice, GLint count, HANDLE *hObjects))
#define wglDXObjectAccessNV(hObject, access) glatter_wglDXObjectAccessNV((hObject), (access))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXObjectAccessNV, (HANDLE hObject, GLenum access))
#define wglDXOpenDeviceNV(dxDevice) glatter_wglDXOpenDeviceNV((dxDevice))
GLATTER_UBLOCK(HANDLE, WINAPI, wglDXOpenDeviceNV, (void *dxDevice))
#define wglDXRegisterObjectNV(hDevice, dxObject, name, type, access) glatter_wglDXRegisterObjectNV((hDevice), (dxObject), (name), (type), (access))
GLATTER_UBLOCK(HANDLE, WINAPI, wglDXRegisterObjectNV, (HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access))
#define wglDXSetResourceShareHandleNV(dxObject, shareHandle) glatter_wglDXSetResourceShareHandleNV((dxObject), (shareHandle))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXSetResourceShareHandleNV, (void *dxObject, HANDLE shareHandle))
#define wglDXUnlockObjectsNV(hDevice, count, hObjects) glatter_wglDXUnlockObjectsNV((hDevice), (count), (hObjects))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXUnlockObjectsNV, (HANDLE hDevice, GLint count, HANDLE *hObjects))
#define wglDXUnregisterObjectNV(hDevice, hObject) glatter_wglDXUnregisterObjectNV((hDevice), (hObject))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXUnregisterObjectNV, (HANDLE hDevice, HANDLE hObject))
#endif // defined(WGL_NV_DX_interop)
#if defined(WGL_NV_copy_image)
#define wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_wglCopyImageSubDataNV((hSrcRC), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (hDstRC), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
GLATTER_UBLOCK(BOOL, WINAPI, wglCopyImageSubDataNV, (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(WGL_NV_copy_image)
#if defined(WGL_NV_delay_before_swap)
#define wglDelayBeforeSwapNV(hDC, seconds) glatter_wglDelayBeforeSwapNV((hDC), (seconds))
GLATTER_UBLOCK(BOOL, WINAPI, wglDelayBeforeSwapNV, (HDC hDC, GLfloat seconds))
#endif // defined(WGL_NV_delay_before_swap)
#if defined(WGL_NV_gpu_affinity)
#define wglCreateAffinityDCNV(phGpuList) glatter_wglCreateAffinityDCNV((phGpuList))
GLATTER_UBLOCK(HDC, WINAPI, wglCreateAffinityDCNV, (const HGPUNV *phGpuList))
#define wglDeleteDCNV(hdc) glatter_wglDeleteDCNV((hdc))
GLATTER_UBLOCK(BOOL, WINAPI, wglDeleteDCNV, (HDC hdc))
#define wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice) glatter_wglEnumGpuDevicesNV((hGpu), (iDeviceIndex), (lpGpuDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnumGpuDevicesNV, (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice))
#define wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu) glatter_wglEnumGpusFromAffinityDCNV((hAffinityDC), (iGpuIndex), (hGpu))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnumGpusFromAffinityDCNV, (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu))
#define wglEnumGpusNV(iGpuIndex, phGpu) glatter_wglEnumGpusNV((iGpuIndex), (phGpu))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnumGpusNV, (UINT iGpuIndex, HGPUNV *phGpu))
#endif // defined(WGL_NV_gpu_affinity)
#if defined(WGL_NV_present_video)
#define wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList) glatter_wglBindVideoDeviceNV((hDC), (uVideoSlot), (hVideoDevice), (piAttribList))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindVideoDeviceNV, (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList))
#define wglEnumerateVideoDevicesNV(hDC, phDeviceList) glatter_wglEnumerateVideoDevicesNV((hDC), (phDeviceList))
GLATTER_UBLOCK(int, WINAPI, wglEnumerateVideoDevicesNV, (HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList))
#define wglQueryCurrentContextNV(iAttribute, piValue) glatter_wglQueryCurrentContextNV((iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryCurrentContextNV, (int iAttribute, int *piValue))
#endif // defined(WGL_NV_present_video)
#if defined(WGL_NV_swap_group)
#define wglBindSwapBarrierNV(group, barrier) glatter_wglBindSwapBarrierNV((group), (barrier))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindSwapBarrierNV, (GLuint group, GLuint barrier))
#define wglJoinSwapGroupNV(hDC, group) glatter_wglJoinSwapGroupNV((hDC), (group))
GLATTER_UBLOCK(BOOL, WINAPI, wglJoinSwapGroupNV, (HDC hDC, GLuint group))
#define wglQueryFrameCountNV(hDC, count) glatter_wglQueryFrameCountNV((hDC), (count))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryFrameCountNV, (HDC hDC, GLuint *count))
#define wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers) glatter_wglQueryMaxSwapGroupsNV((hDC), (maxGroups), (maxBarriers))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryMaxSwapGroupsNV, (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers))
#define wglQuerySwapGroupNV(hDC, group, barrier) glatter_wglQuerySwapGroupNV((hDC), (group), (barrier))
GLATTER_UBLOCK(BOOL, WINAPI, wglQuerySwapGroupNV, (HDC hDC, GLuint *group, GLuint *barrier))
#define wglResetFrameCountNV(hDC) glatter_wglResetFrameCountNV((hDC))
GLATTER_UBLOCK(BOOL, WINAPI, wglResetFrameCountNV, (HDC hDC))
#endif // defined(WGL_NV_swap_group)
#if defined(WGL_NV_vertex_array_range)
#define wglAllocateMemoryNV(size, readfreq, writefreq, priority) glatter_wglAllocateMemoryNV((size), (readfreq), (writefreq), (priority))
GLATTER_UBLOCK(void *, WINAPI, wglAllocateMemoryNV, (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority))
#define wglFreeMemoryNV(pointer) glatter_wglFreeMemoryNV((pointer))
GLATTER_UBLOCK(void, WINAPI, wglFreeMemoryNV, (void *pointer))
#endif // defined(WGL_NV_vertex_array_range)
#if defined(WGL_NV_video_capture)
#define wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice) glatter_wglBindVideoCaptureDeviceNV((uVideoSlot), (hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindVideoCaptureDeviceNV, (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice))
#define wglEnumerateVideoCaptureDevicesNV(hDc, phDeviceList) glatter_wglEnumerateVideoCaptureDevicesNV((hDc), (phDeviceList))
GLATTER_UBLOCK(UINT, WINAPI, wglEnumerateVideoCaptureDevicesNV, (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList))
#define wglLockVideoCaptureDeviceNV(hDc, hDevice) glatter_wglLockVideoCaptureDeviceNV((hDc), (hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglLockVideoCaptureDeviceNV, (HDC hDc, HVIDEOINPUTDEVICENV hDevice))
#define wglQueryVideoCaptureDeviceNV(hDc, hDevice, iAttribute, piValue) glatter_wglQueryVideoCaptureDeviceNV((hDc), (hDevice), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryVideoCaptureDeviceNV, (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue))
#define wglReleaseVideoCaptureDeviceNV(hDc, hDevice) glatter_wglReleaseVideoCaptureDeviceNV((hDc), (hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseVideoCaptureDeviceNV, (HDC hDc, HVIDEOINPUTDEVICENV hDevice))
#endif // defined(WGL_NV_video_capture)
#if defined(WGL_NV_video_output)
#define wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer) glatter_wglBindVideoImageNV((hVideoDevice), (hPbuffer), (iVideoBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindVideoImageNV, (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer))
#define wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice) glatter_wglGetVideoDeviceNV((hDC), (numDevices), (hVideoDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetVideoDeviceNV, (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice))
#define wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_wglGetVideoInfoNV((hpVideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetVideoInfoNV, (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo))
#define wglReleaseVideoDeviceNV(hVideoDevice) glatter_wglReleaseVideoDeviceNV((hVideoDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseVideoDeviceNV, (HPVIDEODEV hVideoDevice))
#define wglReleaseVideoImageNV(hPbuffer, iVideoBuffer) glatter_wglReleaseVideoImageNV((hPbuffer), (iVideoBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseVideoImageNV, (HPBUFFERARB hPbuffer, int iVideoBuffer))
#define wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock) glatter_wglSendPbufferToVideoNV((hPbuffer), (iBufferType), (pulCounterPbuffer), (bBlock))
GLATTER_UBLOCK(BOOL, WINAPI, wglSendPbufferToVideoNV, (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock))
#endif // defined(WGL_NV_video_output)
#if defined(WGL_OML_sync_control)
#define wglGetMscRateOML(hdc, numerator, denominator) glatter_wglGetMscRateOML((hdc), (numerator), (denominator))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetMscRateOML, (HDC hdc, INT32 *numerator, INT32 *denominator))
#define wglGetSyncValuesOML(hdc, ust, msc, sbc) glatter_wglGetSyncValuesOML((hdc), (ust), (msc), (sbc))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetSyncValuesOML, (HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc))
#define wglSwapBuffersMscOML(hdc, target_msc, divisor, remainder) glatter_wglSwapBuffersMscOML((hdc), (target_msc), (divisor), (remainder))
GLATTER_UBLOCK(INT64, WINAPI, wglSwapBuffersMscOML, (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder))
#define wglSwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder) glatter_wglSwapLayerBuffersMscOML((hdc), (fuPlanes), (target_msc), (divisor), (remainder))
GLATTER_UBLOCK(INT64, WINAPI, wglSwapLayerBuffersMscOML, (HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder))
#define wglWaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc) glatter_wglWaitForMscOML((hdc), (target_msc), (divisor), (remainder), (ust), (msc), (sbc))
GLATTER_UBLOCK(BOOL, WINAPI, wglWaitForMscOML, (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc))
#define wglWaitForSbcOML(hdc, target_sbc, ust, msc, sbc) glatter_wglWaitForSbcOML((hdc), (target_sbc), (ust), (msc), (sbc))
GLATTER_UBLOCK(BOOL, WINAPI, wglWaitForSbcOML, (HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc))
#endif // defined(__wgl_wglext_h_)
#endif // defined(WGL_OML_sync_control)
#endif // GLATTER_WGL

